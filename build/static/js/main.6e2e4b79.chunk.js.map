{"version":3,"sources":["components/Address.jsx","components/Balance.jsx","helpers/Transactor.js","components/Blockie.jsx","components/AddressInput.jsx","components/EtherInput.jsx","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/utils.js","components/Contract/DisplayVariable.jsx","components/Contract/FunctionForm.jsx","components/Contract/index.jsx","components/Faucet.jsx","components/Header.jsx","helpers/loadAppContracts.js","components/Swap.jsx","components/ThemeSwitch.jsx","components/Timeline.jsx","components/L2Bridge.jsx","App.jsx","index.jsx","contracts/external_contracts.js","constants.js"],"names":["Text","Typography","Address","props","address","value","ens","useLookupAddress","ensProvider","currentTheme","useThemeSwitcher","avatar","paragraph","rows","displayAddress","substr","ensSplit","split","length","size","text","etherscanLink","blockExplorer","blockExplorerLink","minimized","style","verticalAlign","color","target","href","rel","seed","toLowerCase","scale","onChange","editable","copyable","fontSize","paddingLeft","utils","require","Balance","useState","dollarMode","setDollarMode","balance","useBalance","provider","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","price","dollarMultiplier","padding","cursor","onClick","ethers","callbacks","Transactor","providerOrSigner","gasPrice","etherscan","tx","callback","a","Signer","isSigner","signer","getNetwork","network","_isProvider","getSigner","console","log","notify","options","dappId","BLOCKNATIVE_DAPPID","system","networkId","chainId","transactionHandler","txInformation","possibleFunction","transaction","hash","Notify","etherscanNetwork","name","etherscanTxUrl","Promise","result","parseUnits","gasLimit","hexlify","sendTransaction","indexOf","emitter","on","onclick","window","open","notification","info","message","description","placement","txResult","listeningInterval","setInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","clearInterval","wait","data","error","JSON","parse","stringify","body","obj","errorObj","e","Blockie","AddressInput","setValue","scan","setScan","currentValue","scannerButton","marginTop","count","CameraOutlined","QrcodeOutlined","updateAddress","useCallback","newValue","resolveName","possibleAddress","scanner","zIndex","position","left","top","width","delay","resolution","onError","onScan","possibleNewValue","lastIndexOf","id","autoComplete","autoFocus","placeholder","prefix","addonAfter","EtherInput","mode","setMode","display","setDisplay","option","title","usdValue","useEffect","ethValue","Paragraph","Wallet","signerAddress","setSignerAddress","getAddress","newAddress","receiveButton","privateKeyButton","selectedAddress","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","providerSend","WalletOutlined","rotate","level","includeMargin","renderAs","imageSettings","excavate","KeyOutlined","localStorage","getItem","wallet","extraPkDisplayAdded","extraPkDisplay","key","push","backgroundStyle","pastpk","pastwallet","currentPrivateKey","setItem","Date","now","privateKey","createRandom","_signingKey","location","reload","inputStyle","visible","float","paddingRight","onOk","onCancel","footer","type","disabled","loading","parseEther","to","SendOutlined","Account","userSigner","localProvider","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","modalButtons","cachedProvider","marginLeft","shape","constants","tryToDisplay","thing","toNumber","formatUnits","DisplayVariable","contractFunction","functionInfo","refreshRequired","triggerRefresh","variable","setVariable","refresh","funcResponse","span","textAlign","opacity","BigNumber","getFunctionInputKey","input","inputIndex","FunctionForm","form","setForm","txValue","setTxValue","returnValue","setReturnValue","inputs","map","buttons","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","toUtf8Bytes","trim","margin","event","suffix","txValueInput","floatValue","from","toHexString","payable","buttonIcon","defaultValue","bordered","height","args","baseType","stateMutability","returned","overrides","noContractDisplay","className","borderRadius","fontWeight","marginRight","role","Contract","contract","customContract","account","show","contractConfig","contracts","useContractLoader","contractIsDeployed","useContractExistsAtAddress","displayedContractFunctions","useMemo","Object","entries","interface","functions","filter","fn","contractDisplay","contractFuncInfo","contractFunc","connect","injectedProvider","Header","Select","Option","Swap","ThemeSwitcher","theme","isDarkMode","setIsDarkMode","switcher","themes","status","right","bottom","checked","isChecked","dark","light","targetNetwork","NETWORKS","polygon","scaffoldEthProvider","navigator","onLine","providers","StaticJsonRpcProvider","poktMainnetProvider","mainnetInfura","ALCHEMY_KEY","localProviderUrl","rpcUrl","localProviderUrlFromEnv","process","REACT_APP_PROVIDER","walletLinkProvider","WalletLink","appName","makeWeb3Provider","Web3Modal","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","bridge","infuraId","INFURA_ID","rpc","logo","connector","_options","enable","authereum","Authereum","App","_network","setInjectedProvider","setAddress","clearCachedProvider","disconnect","setTimeout","useExchangeEthPrice","useGasPrice","useUserProviderAndSigner","localChainId","selectedChainId","faucetTx","yourLocalBalance","yourMainnetBalance","deployedContracts","externalContracts","readContracts","writeContracts","mainnetContracts","daiAddress","daiAbi","floorAbi","marketAbi","getDaiBalance","Web3Provider","ethereum","daiContract","balanceOf","marketAddy","setDaiBalance","approveDai","daiWithSigner","setApproveMintButton","approve","Floor101","setDisableMintButton","alert","approveDai2","addy","Marketplace","floorAddy","useContractReader","yourBalance","hasLoan","yourCollectibles","setYourCollectibles","nftSales","setNFTSales","s_total_nfts","lendButton","setLendButton","approveButton","setApproveButton","approveMintButton","disableMintButton","daiBalance","listSaleEvents","useEventListener","mintEvents","lendEvent","repayLoanEvent","buyNftEvent","balance2","salesBalance","getDate","dt","humanDateFormat","toLocaleString","setDate","dat","mint","floorContract","floorWithSigner","mintWithDAI","handle","marketContract","marketWithSigner","lend","NFTid","approveFloor","collectibleUpdate","tokenIndex","tokenOfOwnerByIndex","tokenId","tokenURI","jsonManifestString","atob","substring","jsonManifest","uri","owner","reverse","updateYourCollectibles","getPrice","prc","updateNFTSales","setNFTid","nftSalePrice","setNFTSalePrice","onChange2","networkDisplay","networkSelected","NETWORK","networkLocal","closable","toString","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","request","method","params","switchTx","code","reason","route","setRoute","pathname","connection","faucetClicked","setFaucetClicked","selectedKeys","Item","exact","path","dataSource","renderItem","item","src","image","class","backgroundColor","border","hidden","min","max","Group","marginBottom","repayLoan","TwitterOutlined","listSale","Dai","buyNft","prevTheme","subgraphUri","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","ApolloProvider","themeMap","defaultTheme","document","getElementById","module","exports","DAI","abi","internalType","anonymous","indexed","constant","outputs","UNI","localhost","global","hostname","mainnet","goerli","faucet","mumbai","localArbitrum","localArbitrumL1","rinkebyArbitrum","arbitrum","n"],"mappings":"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","file":"static/js/main.6e2e4b79.chunk.js","sourcesContent":["import { Skeleton, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\r\n\r\n// changed value={address} to address={address}\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays an address with a blockie image and option to copy address\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Address\r\n    address={address}\r\n    ensProvider={mainnetProvider}\r\n    blockExplorer={blockExplorer}\r\n    fontSize={fontSize}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\")\r\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\r\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\r\n  - Provide fontSize={fontSize} to change the size of address text\r\n*/\r\n\r\nconst { Text } = Typography;\r\n\r\nconst blockExplorerLink = (address, blockExplorer) =>\r\n  `${blockExplorer || \"https://etherscan.io/\"}${\"address/\"}${address}`;\r\n\r\nexport default function Address(props) {\r\n  const address = props.value || props.address;\r\n\r\n  const ens = useLookupAddress(props.ensProvider, address);\r\n\r\n  const { currentTheme } = useThemeSwitcher();\r\n\r\n  if (!address) {\r\n    return (\r\n      <span>\r\n        <Skeleton avatar paragraph={{ rows: 1 }} />\r\n      </span>\r\n    );\r\n  }\r\n\r\n  let displayAddress = address.substr(0, 6);\r\n\r\n  const ensSplit = ens && ens.split(\".\");\r\n  const validEnsCheck = ensSplit && ensSplit[ensSplit.length - 1] === \"eth\";\r\n\r\n  if (validEnsCheck) {\r\n    displayAddress = ens;\r\n  } else if (props.size === \"short\") {\r\n    displayAddress += \"...\" + address.substr(-4);\r\n  } else if (props.size === \"long\") {\r\n    displayAddress = address;\r\n  }\r\n\r\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\r\n  if (props.minimized) {\r\n    return (\r\n      <span style={{ verticalAlign: \"middle\" }}>\r\n        <a\r\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n          target=\"_blank\"\r\n          href={etherscanLink}\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\r\n        </a>\r\n      </span>\r\n    );\r\n  }\r\n\r\n  let text;\r\n  if (props.onChange) {\r\n    text = (\r\n      <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\r\n        <a\r\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n          target=\"_blank\"\r\n          href={etherscanLink}\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          {displayAddress}\r\n        </a>\r\n      </Text>\r\n    );\r\n  } else {\r\n    text = (\r\n      <Text copyable={{ text: address }}>\r\n        <a\r\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n          target=\"_blank\"\r\n          href={etherscanLink}\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          {displayAddress}\r\n        </a>\r\n      </Text>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      <span style={{ verticalAlign: \"middle\" }}>\r\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\r\n      </span>\r\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\r\n        {text}\r\n      </span>\r\n    </span>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useBalance } from \"eth-hooks\";\r\n\r\nconst { utils } = require(\"ethers\");\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays a balance of given address in ether & dollar\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Balance\r\n    address={address}\r\n    provider={mainnetProvider}\r\n    price={price}\r\n  />\r\n\r\n  ~ If you already have the balance as a bignumber ~\r\n  <Balance\r\n    balance={balance}\r\n    price={price}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address={address} and get balance corresponding to given address\r\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\r\n  - Provide price={price} of ether and get your balance converted to dollars\r\n*/\r\n\r\nexport default function Balance(props) {\r\n  const [dollarMode, setDollarMode] = useState(true);\r\n\r\n  // const [listening, setListening] = useState(false);\r\n\r\n  const balance = useBalance(props.provider, props.address);\r\n\r\n  let floatBalance = parseFloat(\"0.00\");\r\n\r\n  let usingBalance = balance;\r\n\r\n  if (typeof props.balance !== \"undefined\") {\r\n    usingBalance = props.balance;\r\n  }\r\n  if (typeof props.value !== \"undefined\") {\r\n    usingBalance = props.value;\r\n  }\r\n\r\n  if (usingBalance) {\r\n    const etherBalance = utils.formatEther(usingBalance);\r\n    parseFloat(etherBalance).toFixed(2);\r\n    floatBalance = parseFloat(etherBalance);\r\n  }\r\n\r\n  let displayBalance = floatBalance.toFixed(4);\r\n\r\n  const price = props.price || props.dollarMultiplier || 1;\r\n\r\n  if (dollarMode) {\r\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\r\n  }\r\n\r\n  return (\r\n    <span\r\n      style={{\r\n        verticalAlign: \"middle\",\r\n        fontSize: props.size ? props.size : 24,\r\n        padding: 8,\r\n        cursor: \"pointer\",\r\n      }}\r\n      onClick={() => {\r\n        setDollarMode(!dollarMode);\r\n      }}\r\n    >\r\n      {displayBalance}\r\n    </span>\r\n  );\r\n}\r\n","import { notification } from \"antd\";\r\nimport Notify from \"bnc-notify\";\r\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\r\n\r\nconst { ethers } = require(\"ethers\");\r\n\r\n// this should probably just be renamed to \"notifier\"\r\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\r\n// https://docs.blocknative.com/notify\r\nconst callbacks = {};\r\n\r\nconst DEBUG = true;\r\n\r\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\r\n  if (typeof providerOrSigner !== \"undefined\") {\r\n    // eslint-disable-next-line consistent-return\r\n    return async (tx, callback) => {\r\n      let signer;\r\n      let network;\r\n      let provider;\r\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\r\n        provider = providerOrSigner.provider;\r\n        signer = providerOrSigner;\r\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\r\n      } else if (providerOrSigner._isProvider) {\r\n        provider = providerOrSigner;\r\n        signer = providerOrSigner.getSigner();\r\n        network = await providerOrSigner.getNetwork();\r\n      }\r\n\r\n      console.log(\"network\", network);\r\n      var options = null;\r\n      var notify = null;\r\n      options = {\r\n        dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\r\n        system: \"ethereum\",\r\n        networkId: network.chainId,\r\n        // darkMode: Boolean, // (default: false)\r\n        transactionHandler: txInformation => {\r\n          if (DEBUG) console.log(\"HANDLE TX\", txInformation);\r\n          const possibleFunction = callbacks[txInformation.transaction.hash];\r\n          if (typeof possibleFunction === \"function\") {\r\n            possibleFunction(txInformation.transaction);\r\n          }\r\n        },\r\n      };\r\n\r\n      notify = Notify(options);\r\n\r\n      let etherscanNetwork = \"\";\r\n      if (network.name && network.chainId > 1) {\r\n        etherscanNetwork = network.name + \".\";\r\n      }\r\n\r\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\r\n      if (network.chainId === 100) {\r\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\r\n      }\r\n\r\n      try {\r\n        let result;\r\n        if (tx instanceof Promise) {\r\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\r\n          result = await tx;\r\n        } else {\r\n          if (!tx.gasPrice) {\r\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\r\n          }\r\n          if (!tx.gasLimit) {\r\n            tx.gasLimit = ethers.utils.hexlify(120000);\r\n          }\r\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\r\n          result = await signer.sendTransaction(tx);\r\n        }\r\n        if (DEBUG) console.log(\"RESULT:\", result);\r\n        // console.log(\"Notify\", notify);\r\n\r\n        if (callback) {\r\n          callbacks[result.hash] = callback;\r\n        }\r\n\r\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\r\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\r\n          const { emitter } = notify.hash(result.hash);\r\n          emitter.on(\"all\", transaction => {\r\n            return {\r\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\r\n            };\r\n          });\r\n        } else {\r\n          notification.info({\r\n            message: \"Local Transaction Sent\",\r\n            description: result.hash,\r\n            placement: \"bottomRight\",\r\n          });\r\n          // on most networks BlockNative will update a transaction handler,\r\n          // but locally we will set an interval to listen...\r\n          if (callback) {\r\n            const txResult = await tx;\r\n            const listeningInterval = setInterval(async () => {\r\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\r\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\r\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\r\n                callback({ ...txResult, ...currentTransactionReceipt });\r\n                clearInterval(listeningInterval);\r\n              }\r\n            }, 500);\r\n          }\r\n        }\r\n\r\n        if (typeof result.wait === \"function\") {\r\n          await result.wait();\r\n        }\r\n\r\n        return result;\r\n      } catch (e) {\r\n        if (DEBUG) console.log(e);\r\n        // Accounts for Metamask and default signer on all networks\r\n        let message =\r\n          e.data && e.data.message\r\n            ? e.data.message\r\n            : e.error && JSON.parse(JSON.stringify(e.error)).body\r\n            ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message\r\n            : e.data\r\n            ? e.data\r\n            : JSON.stringify(e);\r\n        if (!e.error && e.message) {\r\n          message = e.message;\r\n        }\r\n\r\n        console.log(\"Attempt to clean up:\", message);\r\n        try {\r\n          let obj = JSON.parse(message);\r\n          if (obj && obj.body) {\r\n            let errorObj = JSON.parse(obj.body);\r\n            if (errorObj && errorObj.error && errorObj.error.message) {\r\n              message = errorObj.error.message;\r\n            }\r\n          }\r\n        } catch (e) {\r\n          //ignore\r\n        }\r\n\r\n        notification.error({\r\n          message: \"Transaction Error\",\r\n          description: message,\r\n        });\r\n        if (callback && typeof callback === \"function\") {\r\n          callback(e);\r\n        }\r\n      }\r\n    };\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\n\r\n// provides a blockie image for the address using \"react-blockies\" library\r\n\r\nexport default function Blockie(props) {\r\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\r\n    return <span />;\r\n  }\r\n  // eslint-disable-next-line react/jsx-props-no-spreading\r\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\r\n}\r\n","import { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\r\nimport { Badge, Input } from \"antd\";\r\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\r\nimport React, { useCallback, useState } from \"react\";\r\nimport QrReader from \"react-qr-reader\";\r\nimport Blockie from \"./Blockie\";\r\n\r\n// probably we need to change value={toAddress} to address={toAddress}\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays an address input with QR scan option\r\n\r\n  ~ How can I use? ~\r\n\r\n  <AddressInput\r\n    autoFocus\r\n    ensProvider={mainnetProvider}\r\n    placeholder=\"Enter address\"\r\n    value={toAddress}\r\n    onChange={setToAddress}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n  - Provide placeholder=\"Enter address\" value for the input\r\n  - Value of the address input is stored in value={toAddress}\r\n  - Control input change by onChange={setToAddress}\r\n                          or onChange={address => { setToAddress(address);}}\r\n*/\r\n\r\nexport default function AddressInput(props) {\r\n  const [value, setValue] = useState(props.value);\r\n  const [scan, setScan] = useState(false);\r\n\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n  const ens = useLookupAddress(props.ensProvider, currentValue);\r\n\r\n  const scannerButton = (\r\n    <div\r\n      style={{ marginTop: 4, cursor: \"pointer\" }}\r\n      onClick={() => {\r\n        setScan(!scan);\r\n      }}\r\n    >\r\n      <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\r\n        <QrcodeOutlined style={{ fontSize: 18 }} />\r\n      </Badge>{\" \"}\r\n      Scan\r\n    </div>\r\n  );\r\n\r\n  const { ensProvider, onChange } = props;\r\n  const updateAddress = useCallback(\r\n    async newValue => {\r\n      if (typeof newValue !== \"undefined\") {\r\n        let address = newValue;\r\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\r\n          try {\r\n            const possibleAddress = await ensProvider.resolveName(address);\r\n            if (possibleAddress) {\r\n              address = possibleAddress;\r\n            }\r\n            // eslint-disable-next-line no-empty\r\n          } catch (e) {}\r\n        }\r\n        setValue(address);\r\n        if (typeof onChange === \"function\") {\r\n          onChange(address);\r\n        }\r\n      }\r\n    },\r\n    [ensProvider, onChange],\r\n  );\r\n\r\n  const scanner = scan ? (\r\n    <div\r\n      style={{\r\n        zIndex: 256,\r\n        position: \"absolute\",\r\n        left: 0,\r\n        top: 0,\r\n        width: \"100%\",\r\n      }}\r\n      onClick={() => {\r\n        setScan(false);\r\n      }}\r\n    >\r\n      <QrReader\r\n        delay={250}\r\n        resolution={1200}\r\n        onError={e => {\r\n          console.log(\"SCAN ERROR\", e);\r\n          setScan(false);\r\n        }}\r\n        onScan={newValue => {\r\n          if (newValue) {\r\n            console.log(\"SCAN VALUE\", newValue);\r\n            let possibleNewValue = newValue;\r\n            if (possibleNewValue.indexOf(\"/\") >= 0) {\r\n              possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\r\n              console.log(\"CLEANED VALUE\", possibleNewValue);\r\n            }\r\n            setScan(false);\r\n            updateAddress(possibleNewValue);\r\n          }\r\n        }}\r\n        style={{ width: \"100%\" }}\r\n      />\r\n    </div>\r\n  ) : (\r\n    \"\"\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {scanner}\r\n      <Input\r\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\r\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\r\n        autoComplete=\"off\"\r\n        autoFocus={props.autoFocus}\r\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\r\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\r\n        value={ens || currentValue}\r\n        addonAfter={scannerButton}\r\n        onChange={e => {\r\n          updateAddress(e.target.value);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import { Input } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n// small change in useEffect, display currentValue if it's provided by user\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\r\n\r\n  ~ How can I use? ~\r\n\r\n  <EtherInput\r\n    autofocus\r\n    price={price}\r\n    value=100\r\n    placeholder=\"Enter amount\"\r\n    onChange={value => {\r\n      setAmount(value);\r\n    }}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide price={price} of ether and easily convert between USD and ETH\r\n  - Provide value={value} to specify initial amount of ether\r\n  - Provide placeholder=\"Enter amount\" value for the input\r\n  - Control input change by onChange={value => { setAmount(value);}}\r\n*/\r\n\r\nexport default function EtherInput(props) {\r\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\r\n  const [display, setDisplay] = useState();\r\n  const [value, setValue] = useState();\r\n\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n\r\n  const option = title => {\r\n    if (!props.price) return \"\";\r\n    return (\r\n      <div\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={() => {\r\n          if (mode === \"USD\") {\r\n            setMode(\"ETH\");\r\n            setDisplay(currentValue);\r\n          } else {\r\n            setMode(\"USD\");\r\n            if (currentValue) {\r\n              const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\r\n              setDisplay(usdValue);\r\n            } else {\r\n              setDisplay(currentValue);\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        {title}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  let prefix;\r\n  let addonAfter;\r\n  if (mode === \"USD\") {\r\n    prefix = \"$\";\r\n    addonAfter = option(\"USD 🔀\");\r\n  } else {\r\n    prefix = \"Ξ\";\r\n    addonAfter = option(\"ETH 🔀\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!currentValue) {\r\n      setDisplay(\"\");\r\n    }\r\n  }, [currentValue]);\r\n\r\n  return (\r\n    <Input\r\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\r\n      autoFocus={props.autoFocus}\r\n      prefix={prefix}\r\n      value={display}\r\n      addonAfter={addonAfter}\r\n      onChange={async e => {\r\n        const newValue = e.target.value;\r\n        if (mode === \"USD\") {\r\n          const possibleNewValue = parseFloat(newValue);\r\n          if (possibleNewValue) {\r\n            const ethValue = possibleNewValue / props.price;\r\n            setValue(ethValue);\r\n            if (typeof props.onChange === \"function\") {\r\n              props.onChange(ethValue);\r\n            }\r\n            setDisplay(newValue);\r\n          } else {\r\n            setDisplay(newValue);\r\n          }\r\n        } else {\r\n          setValue(newValue);\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(newValue);\r\n          }\r\n          setDisplay(newValue);\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\r\nimport { Button, Modal, Spin, Tooltip, Typography } from \"antd\";\r\nimport { ethers } from \"ethers\";\r\nimport QR from \"qrcode.react\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Transactor } from \"../helpers\";\r\nimport Address from \"./Address\";\r\nimport AddressInput from \"./AddressInput\";\r\nimport Balance from \"./Balance\";\r\nimport EtherInput from \"./EtherInput\";\r\n\r\nconst { Text, Paragraph } = Typography;\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays a wallet where you can specify address and send USD/ETH, with options to\r\n  scan address, to convert between USD and ETH, to see and generate private keys,\r\n  to send, receive and extract the burner wallet\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Wallet\r\n    provider={userProvider}\r\n    address={address}\r\n    ensProvider={mainnetProvider}\r\n    price={price}\r\n    color='red'\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide provider={userProvider} to display a wallet\r\n  - Provide address={address} if you want to specify address, otherwise\r\n                                                    your default address will be used\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n  - Provide price={price} of ether and easily convert between USD and ETH\r\n  - Provide color to specify the color of wallet icon\r\n*/\r\n\r\nexport default function Wallet(props) {\r\n  const [signerAddress, setSignerAddress] = useState();\r\n  useEffect(() => {\r\n    async function getAddress() {\r\n      if (props.signer) {\r\n        const newAddress = await props.signer.getAddress();\r\n        setSignerAddress(newAddress);\r\n      }\r\n    }\r\n    getAddress();\r\n  }, [props.signer]);\r\n\r\n  const selectedAddress = props.address || signerAddress;\r\n\r\n  const [open, setOpen] = useState();\r\n  const [qr, setQr] = useState();\r\n  const [amount, setAmount] = useState();\r\n  const [toAddress, setToAddress] = useState();\r\n  const [pk, setPK] = useState();\r\n\r\n  const providerSend = props.provider ? (\r\n    <Tooltip title=\"Wallet\">\r\n      <WalletOutlined\r\n        onClick={() => {\r\n          setOpen(!open);\r\n        }}\r\n        rotate={-90}\r\n        style={{\r\n          padding: 7,\r\n          color: props.color ? props.color : \"\",\r\n          cursor: \"pointer\",\r\n          fontSize: 28,\r\n          verticalAlign: \"middle\",\r\n        }}\r\n      />\r\n    </Tooltip>\r\n  ) : (\r\n    \"\"\r\n  );\r\n\r\n  let display;\r\n  let receiveButton;\r\n  let privateKeyButton;\r\n  if (qr) {\r\n    display = (\r\n      <div>\r\n        <div>\r\n          <Text copyable>{selectedAddress}</Text>\r\n        </div>\r\n        <QR\r\n          value={selectedAddress}\r\n          size=\"450\"\r\n          level=\"H\"\r\n          includeMargin\r\n          renderAs=\"svg\"\r\n          imageSettings={{ excavate: false }}\r\n        />\r\n      </div>\r\n    );\r\n    receiveButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Hide\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(selectedAddress);\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Private Key\r\n      </Button>\r\n    );\r\n  } else if (pk) {\r\n    const pk = localStorage.getItem(\"metaPrivateKey\");\r\n    const wallet = new ethers.Wallet(pk);\r\n\r\n    if (wallet.address !== selectedAddress) {\r\n      display = (\r\n        <div>\r\n          <b>*injected account*, private key unknown</b>\r\n        </div>\r\n      );\r\n    } else {\r\n      const extraPkDisplayAdded = {};\r\n      const extraPkDisplay = [];\r\n      extraPkDisplayAdded[wallet.address] = true;\r\n      extraPkDisplay.push(\r\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\r\n          <a href={\"/pk#\" + pk}>\r\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\r\n          </a>\r\n        </div>,\r\n      );\r\n      for (const key in localStorage) {\r\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\r\n          console.log(key);\r\n          const pastpk = localStorage.getItem(key);\r\n          const pastwallet = new ethers.Wallet(pastpk);\r\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\r\n            extraPkDisplayAdded[pastwallet.address] = true;\r\n            extraPkDisplay.push(\r\n              <div style={{ fontSize: 16 }}>\r\n                <a href={\"/pk#\" + pastpk}>\r\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\r\n                  {pastwallet.address.substr(0, 6)}\r\n                </a>\r\n              </div>,\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      display = (\r\n        <div>\r\n          <b>Private Key:</b>\r\n\r\n          <div>\r\n            <Text copyable>{pk}</Text>\r\n          </div>\r\n\r\n          <hr />\r\n\r\n          <i>\r\n            Point your camera phone at qr code to open in\r\n            <a target=\"_blank\" href={\"https://xdai.io/\" + pk} rel=\"noopener noreferrer\">\r\n              burner wallet\r\n            </a>\r\n            :\r\n          </i>\r\n          <QR\r\n            value={\"https://xdai.io/\" + pk}\r\n            size=\"450\"\r\n            level=\"H\"\r\n            includeMargin\r\n            renderAs=\"svg\"\r\n            imageSettings={{ excavate: false }}\r\n          />\r\n\r\n          <Paragraph style={{ fontSize: \"16\" }} copyable>\r\n            {\"https://xdai.io/\" + pk}\r\n          </Paragraph>\r\n\r\n          {extraPkDisplay ? (\r\n            <div>\r\n              <h3>Known Private Keys:</h3>\r\n              {extraPkDisplay}\r\n              <Button\r\n                onClick={() => {\r\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\r\n                  if (currentPrivateKey) {\r\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\r\n                  }\r\n                  const randomWallet = ethers.Wallet.createRandom();\r\n                  const privateKey = randomWallet._signingKey().privateKey;\r\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\r\n                  window.location.reload();\r\n                }}\r\n              >\r\n                Generate\r\n              </Button>\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    receiveButton = (\r\n      <Button\r\n        key=\"receive\"\r\n        onClick={() => {\r\n          setQr(selectedAddress);\r\n          setPK(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Receive\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(\"\");\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Hide\r\n      </Button>\r\n    );\r\n  } else {\r\n    const inputStyle = {\r\n      padding: 10,\r\n    };\r\n\r\n    display = (\r\n      <div>\r\n        <div style={inputStyle}>\r\n          <AddressInput\r\n            autoFocus\r\n            ensProvider={props.ensProvider}\r\n            placeholder=\"to address\"\r\n            address={toAddress}\r\n            onChange={setToAddress}\r\n          />\r\n        </div>\r\n        <div style={inputStyle}>\r\n          <EtherInput\r\n            price={props.price}\r\n            value={amount}\r\n            onChange={value => {\r\n              setAmount(value);\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n    receiveButton = (\r\n      <Button\r\n        key=\"receive\"\r\n        onClick={() => {\r\n          setQr(selectedAddress);\r\n          setPK(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Receive\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(selectedAddress);\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Private Key\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      {providerSend}\r\n      <Modal\r\n        visible={open}\r\n        title={\r\n          <div>\r\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\r\n            <div style={{ float: \"right\", paddingRight: 25 }}>\r\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\r\n            </div>\r\n          </div>\r\n        }\r\n        onOk={() => {\r\n          setQr();\r\n          setPK();\r\n          setOpen(!open);\r\n        }}\r\n        onCancel={() => {\r\n          setQr();\r\n          setPK();\r\n          setOpen(!open);\r\n        }}\r\n        footer={[\r\n          privateKeyButton,\r\n          receiveButton,\r\n          <Button\r\n            key=\"submit\"\r\n            type=\"primary\"\r\n            disabled={!amount || !toAddress || qr}\r\n            loading={false}\r\n            onClick={() => {\r\n              const tx = Transactor(props.signer || props.provider);\r\n\r\n              let value;\r\n              try {\r\n                value = ethers.utils.parseEther(\"\" + amount);\r\n              } catch (e) {\r\n                // failed to parseEther, try something else\r\n                value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\r\n              }\r\n\r\n              tx({\r\n                to: toAddress,\r\n                value,\r\n              });\r\n              setOpen(!open);\r\n              setQr();\r\n            }}\r\n          >\r\n            <SendOutlined /> Send\r\n          </Button>,\r\n        ]}\r\n      >\r\n        {display}\r\n      </Modal>\r\n    </span>\r\n  );\r\n}\r\n","import { Button } from \"antd\";\r\nimport React from \"react\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\nimport Address from \"./Address\";\r\nimport Balance from \"./Balance\";\r\nimport Wallet from \"./Wallet\";\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays an Address, Balance, and Wallet as one Account component,\r\n  also allows users to log in to existing accounts and log out\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Account\r\n    address={address}\r\n    localProvider={localProvider}\r\n    userProvider={userProvider}\r\n    mainnetProvider={mainnetProvider}\r\n    price={price}\r\n    web3Modal={web3Modal}\r\n    loadWeb3Modal={loadWeb3Modal}\r\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n    blockExplorer={blockExplorer}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address={address} and get balance corresponding to the given address\r\n  - Provide localProvider={localProvider} to access balance on local network\r\n  - Provide userProvider={userProvider} to display a wallet\r\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\")\r\n  - Provide price={price} of ether and get your balance converted to dollars\r\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n              to be able to log in/log out to/from existing accounts\r\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\r\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\r\n*/\r\n\r\nexport default function Account({\r\n  address,\r\n  userSigner,\r\n  localProvider,\r\n  mainnetProvider,\r\n  price,\r\n  minimized,\r\n  web3Modal,\r\n  loadWeb3Modal,\r\n  logoutOfWeb3Modal,\r\n  blockExplorer,\r\n}) {\r\n  const modalButtons = [];\r\n  if (web3Modal) {\r\n    if (web3Modal.cachedProvider) {\r\n      modalButtons.push(\r\n        <Button\r\n          key=\"logoutbutton\"\r\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\r\n          shape=\"round\"\r\n          size=\"large\"\r\n          onClick={logoutOfWeb3Modal}\r\n        >\r\n          logout\r\n        </Button>,\r\n      );\r\n    } else {\r\n      modalButtons.push(\r\n        <Button\r\n          key=\"loginbutton\"\r\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\r\n          shape=\"round\"\r\n          size=\"large\"\r\n          /* type={minimized ? \"default\" : \"primary\"}     too many people just defaulting to MM and having a bad time */\r\n          onClick={loadWeb3Modal}\r\n        >\r\n          connect\r\n        </Button>,\r\n      );\r\n    }\r\n  }\r\n\r\n  const { currentTheme } = useThemeSwitcher();\r\n\r\n  const display = minimized ? (\r\n    \"\"\r\n  ) : (\r\n    <span>\r\n      {address ? (\r\n        <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />\r\n      ) : (\r\n        \"Connecting...\"\r\n      )}\r\n      <Balance address={address} provider={localProvider} price={price} />\r\n      <Wallet\r\n        address={address}\r\n        provider={localProvider}\r\n        signer={userSigner}\r\n        ensProvider={mainnetProvider}\r\n        price={price}\r\n        color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\r\n      />\r\n    </span>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {display}\r\n      {modalButtons}\r\n    </div>\r\n  );\r\n}\r\n","import { Input } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst { utils, constants } = require(\"ethers\");\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays input field with options to convert between STRING and BYTES32\r\n\r\n  ~ How can I use? ~\r\n\r\n  <BytesStringInput\r\n    autofocus\r\n    value={\"scaffold-eth\"}\r\n    placeholder=\"Enter value...\"\r\n    onChange={value => {\r\n      setValue(value);\r\n    }}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide value={value} to specify initial string\r\n  - Provide placeholder=\"Enter value...\" value for the input\r\n  - Control input change by onChange={value => { setValue(value);}}\r\n\r\n*/\r\n\r\nexport default function BytesStringInput(props) {\r\n  const [mode, setMode] = useState(\"STRING\");\r\n  const [display, setDisplay] = useState();\r\n  const [value, setValue] = useState(constants.HashZero);\r\n\r\n  // current value is the value in bytes32\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n\r\n  const option = title => {\r\n    return (\r\n      <div\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={() => {\r\n          if (mode === \"STRING\") {\r\n            setMode(\"BYTES32\");\r\n            if (!utils.isHexString(currentValue)) {\r\n              /* in case user enters invalid bytes32 number,\r\n                   it considers it as string and converts to bytes32 */\r\n              const changedValue = utils.formatBytes32String(currentValue);\r\n              setDisplay(changedValue);\r\n            } else {\r\n              setDisplay(currentValue);\r\n            }\r\n          } else {\r\n            setMode(\"STRING\");\r\n            if (currentValue && utils.isHexString(currentValue)) {\r\n              setDisplay(utils.parseBytes32String(currentValue));\r\n            } else {\r\n              setDisplay(currentValue);\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        {title}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  let addonAfter;\r\n  if (mode === \"STRING\") {\r\n    addonAfter = option(\"STRING 🔀\");\r\n  } else {\r\n    addonAfter = option(\"BYTES32 🔀\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!currentValue) {\r\n      setDisplay(\"\");\r\n    }\r\n  }, [currentValue]);\r\n\r\n  return (\r\n    <Input\r\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\r\n      autoFocus={props.autoFocus}\r\n      value={display}\r\n      addonAfter={addonAfter}\r\n      onChange={async e => {\r\n        const newValue = e.target.value;\r\n        if (mode === \"STRING\") {\r\n          // const ethValue = parseFloat(newValue) / props.price;\r\n          // setValue(ethValue);\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(utils.formatBytes32String(newValue));\r\n          }\r\n          setValue(utils.formatBytes32String(newValue));\r\n          setDisplay(newValue);\r\n        } else {\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(newValue);\r\n          }\r\n          setValue(newValue);\r\n          setDisplay(newValue);\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Address } from \"..\";\r\n\r\nconst { utils } = require(\"ethers\");\r\n\r\nconst tryToDisplay = thing => {\r\n  if (thing && thing.toNumber) {\r\n    try {\r\n      return thing.toNumber();\r\n    } catch (e) {\r\n      return \"Ξ\" + utils.formatUnits(thing, \"ether\");\r\n    }\r\n  }\r\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\r\n    return <Address address={thing} fontSize={22} />;\r\n  }\r\n  return JSON.stringify(thing);\r\n};\r\n\r\nexport default tryToDisplay;\r\n","import { Col, Divider, Row } from \"antd\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport tryToDisplay from \"./utils\";\r\n\r\nconst DisplayVariable = ({ contractFunction, functionInfo, refreshRequired, triggerRefresh }) => {\r\n  const [variable, setVariable] = useState(\"\");\r\n\r\n  const refresh = useCallback(async () => {\r\n    try {\r\n      const funcResponse = await contractFunction();\r\n      setVariable(funcResponse);\r\n      triggerRefresh(false);\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }, [setVariable, contractFunction, triggerRefresh]);\r\n\r\n  useEffect(() => {\r\n    refresh();\r\n  }, [refresh, refreshRequired, contractFunction]);\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col\r\n          span={8}\r\n          style={{\r\n            textAlign: \"right\",\r\n            opacity: 0.333,\r\n            paddingRight: 6,\r\n            fontSize: 24,\r\n          }}\r\n        >\r\n          {functionInfo.name}\r\n        </Col>\r\n        <Col span={14}>\r\n          <h2>{tryToDisplay(variable)}</h2>\r\n        </Col>\r\n        <Col span={2}>\r\n          <h2>\r\n            <a href=\"#\" onClick={refresh}>\r\n              🔄\r\n            </a>\r\n          </h2>\r\n        </Col>\r\n      </Row>\r\n      <Divider />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayVariable;\r\n","import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { Transactor } from \"../../helpers\";\r\nimport tryToDisplay from \"./utils\";\r\n\r\nconst { utils, BigNumber } = require(\"ethers\");\r\n\r\nconst getFunctionInputKey = (functionInfo, input, inputIndex) => {\r\n  const name = input?.name ? input.name : \"input_\" + inputIndex + \"_\";\r\n  return functionInfo.name + \"_\" + name + \"_\" + input.type;\r\n};\r\n\r\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\r\n  const [form, setForm] = useState({});\r\n  const [txValue, setTxValue] = useState();\r\n  const [returnValue, setReturnValue] = useState();\r\n\r\n  const tx = Transactor(provider, gasPrice);\r\n\r\n  const inputs = functionInfo.inputs.map((input, inputIndex) => {\r\n    const key = getFunctionInputKey(functionInfo, input, inputIndex);\r\n\r\n    let buttons = \"\";\r\n    if (input.type === \"bytes32\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"to bytes32\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              if (utils.isHexString(form[key])) {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.parseBytes32String(form[key]);\r\n                setForm(formUpdate);\r\n              } else {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.formatBytes32String(form[key]);\r\n                setForm(formUpdate);\r\n              }\r\n            }}\r\n          >\r\n            #️⃣\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"bytes\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"to hex\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              if (utils.isHexString(form[key])) {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.toUtf8String(form[key]);\r\n                setForm(formUpdate);\r\n              } else {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\r\n                setForm(formUpdate);\r\n              }\r\n            }}\r\n          >\r\n            #️⃣\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"uint256\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              const formUpdate = { ...form };\r\n              formUpdate[key] = utils.parseEther(form[key]);\r\n              setForm(formUpdate);\r\n            }}\r\n          >\r\n            ✴️\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"address\") {\r\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\r\n      if (possibleAddress && possibleAddress.length === 42) {\r\n        buttons = (\r\n          <Tooltip placement=\"right\" title=\"blockie\">\r\n            <Blockies seed={possibleAddress} scale={3} />\r\n          </Tooltip>\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div style={{ margin: 2 }} key={key}>\r\n        <Input\r\n          size=\"large\"\r\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\r\n          autoComplete=\"off\"\r\n          value={form[key]}\r\n          name={key}\r\n          onChange={event => {\r\n            const formUpdate = { ...form };\r\n            formUpdate[event.target.name] = event.target.value;\r\n            setForm(formUpdate);\r\n          }}\r\n          suffix={buttons}\r\n        />\r\n      </div>\r\n    );\r\n  });\r\n\r\n  const txValueInput = (\r\n    <div style={{ margin: 2 }} key=\"txValueInput\">\r\n      <Input\r\n        placeholder=\"transaction value\"\r\n        onChange={e => setTxValue(e.target.value)}\r\n        value={txValue}\r\n        addonAfter={\r\n          <div>\r\n            <Row>\r\n              <Col span={16}>\r\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\r\n                  <div\r\n                    type=\"dashed\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={async () => {\r\n                      const floatValue = parseFloat(txValue);\r\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\r\n                    }}\r\n                  >\r\n                    ✳️\r\n                  </div>\r\n                </Tooltip>\r\n              </Col>\r\n              <Col span={16}>\r\n                <Tooltip placement=\"right\" title=\"number to hex\">\r\n                  <div\r\n                    type=\"dashed\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={async () => {\r\n                      setTxValue(BigNumber.from(txValue).toHexString());\r\n                    }}\r\n                  >\r\n                    #️⃣\r\n                  </div>\r\n                </Tooltip>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n\r\n  if (functionInfo.payable) {\r\n    inputs.push(txValueInput);\r\n  }\r\n\r\n  const buttonIcon =\r\n    functionInfo.type === \"call\" ? (\r\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\r\n    ) : (\r\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\r\n    );\r\n  inputs.push(\r\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\r\n      <Input\r\n        onChange={e => setReturnValue(e.target.value)}\r\n        defaultValue=\"\"\r\n        bordered={false}\r\n        disabled\r\n        value={returnValue}\r\n        suffix={\r\n          <div\r\n            style={{ width: 50, height: 30, margin: 0 }}\r\n            type=\"default\"\r\n            onClick={async () => {\r\n              const args = functionInfo.inputs.map((input, inputIndex) => {\r\n                const key = getFunctionInputKey(functionInfo, input, inputIndex);\r\n                let value = form[key];\r\n                if (input.baseType === \"array\") {\r\n                  value = JSON.parse(value);\r\n                } else if (input.type === \"bool\") {\r\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\r\n                    value = 1;\r\n                  } else {\r\n                    value = 0;\r\n                  }\r\n                }\r\n                return value;\r\n              });\r\n\r\n              let result;\r\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\r\n                try {\r\n                  const returned = await contractFunction(...args);\r\n                  result = tryToDisplay(returned);\r\n                } catch (err) {\r\n                  console.error(err);\r\n                }\r\n              } else {\r\n                const overrides = {};\r\n                if (txValue) {\r\n                  overrides.value = txValue; // ethers.utils.parseEther()\r\n                }\r\n                if (gasPrice) {\r\n                  overrides.gasPrice = gasPrice;\r\n                }\r\n                // Uncomment this if you want to skip the gas estimation for each transaction\r\n                // overrides.gasLimit = hexlify(1200000);\r\n\r\n                // console.log(\"Running with extras\",extras)\r\n                const returned = await tx(contractFunction(...args, overrides));\r\n                result = tryToDisplay(returned);\r\n              }\r\n\r\n              console.log(\"SETTING RESULT:\", result);\r\n              setReturnValue(result);\r\n              triggerRefresh(true);\r\n            }}\r\n          >\r\n            {buttonIcon}\r\n          </div>\r\n        }\r\n      />\r\n    </div>,\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col\r\n          span={8}\r\n          style={{\r\n            textAlign: \"right\",\r\n            opacity: 0.333,\r\n            paddingRight: 6,\r\n            fontSize: 24,\r\n          }}\r\n        >\r\n          {functionInfo.name}\r\n        </Col>\r\n        <Col span={16}>{inputs}</Col>\r\n      </Row>\r\n      <Divider />\r\n    </div>\r\n  );\r\n}\r\n","import { Card } from \"antd\";\r\nimport React, { useMemo, useState } from \"react\";\r\nimport { useContractExistsAtAddress, useContractLoader } from \"eth-hooks\";\r\nimport Account from \"../Account\";\r\nimport DisplayVariable from \"./DisplayVariable\";\r\nimport FunctionForm from \"./FunctionForm\";\r\n\r\nconst noContractDisplay = (\r\n  <div>\r\n    Loading...{\" \"}\r\n    <div style={{ padding: 32 }}>\r\n      You need to run{\" \"}\r\n      <span\r\n        className=\"highlight\"\r\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n      >\r\n        yarn run chain\r\n      </span>{\" \"}\r\n      and{\" \"}\r\n      <span\r\n        className=\"highlight\"\r\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n      >\r\n        yarn run deploy\r\n      </span>{\" \"}\r\n      to see your contract here.\r\n    </div>\r\n    <div style={{ padding: 32 }}>\r\n      <span style={{ marginRight: 4 }} role=\"img\" aria-label=\"warning\">\r\n        ☢️\r\n      </span>\r\n      Warning: You might need to run\r\n      <span\r\n        className=\"highlight\"\r\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n      >\r\n        yarn run deploy\r\n      </span>{\" \"}\r\n      <i>again</i> after the frontend comes up!\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst isQueryable = fn => (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") && fn.inputs.length === 0;\r\n\r\nexport default function Contract({\r\n  customContract,\r\n  account,\r\n  gasPrice,\r\n  signer,\r\n  provider,\r\n  name,\r\n  show,\r\n  price,\r\n  blockExplorer,\r\n  chainId,\r\n  contractConfig,\r\n}) {\r\n  const contracts = useContractLoader(provider, contractConfig, chainId);\r\n  let contract;\r\n  if (!customContract) {\r\n    contract = contracts ? contracts[name] : \"\";\r\n  } else {\r\n    contract = customContract;\r\n  }\r\n\r\n  const address = contract ? contract.address : \"\";\r\n  const contractIsDeployed = useContractExistsAtAddress(provider, address);\r\n\r\n  const displayedContractFunctions = useMemo(() => {\r\n    const results = contract\r\n      ? Object.entries(contract.interface.functions).filter(\r\n          fn => fn[1][\"type\"] === \"function\" && !(show && show.indexOf(fn[1][\"name\"]) < 0),\r\n        )\r\n      : [];\r\n    return results;\r\n  }, [contract, show]);\r\n\r\n  const [refreshRequired, triggerRefresh] = useState(false);\r\n  const contractDisplay = displayedContractFunctions.map(contractFuncInfo => {\r\n    const contractFunc =\r\n      contractFuncInfo[1].stateMutability === \"view\" || contractFuncInfo[1].stateMutability === \"pure\"\r\n        ? contract[contractFuncInfo[0]]\r\n        : contract.connect(signer)[contractFuncInfo[0]];\r\n\r\n    if (typeof contractFunc === \"function\") {\r\n      if (isQueryable(contractFuncInfo[1])) {\r\n        // If there are no inputs, just display return value\r\n        return (\r\n          <DisplayVariable\r\n            key={contractFuncInfo[1].name}\r\n            contractFunction={contractFunc}\r\n            functionInfo={contractFuncInfo[1]}\r\n            refreshRequired={refreshRequired}\r\n            triggerRefresh={triggerRefresh}\r\n          />\r\n        );\r\n      }\r\n\r\n      // If there are inputs, display a form to allow users to provide these\r\n      return (\r\n        <FunctionForm\r\n          key={\"FF\" + contractFuncInfo[0]}\r\n          contractFunction={contractFunc}\r\n          functionInfo={contractFuncInfo[1]}\r\n          provider={provider}\r\n          gasPrice={gasPrice}\r\n          triggerRefresh={triggerRefresh}\r\n        />\r\n      );\r\n    }\r\n    return null;\r\n  });\r\n\r\n  return (\r\n    <div style={{ margin: \"auto\", width: \"70vw\" }}>\r\n      <Card\r\n        title={\r\n          <div>\r\n            {name}\r\n            <div style={{ float: \"right\" }}>\r\n              <Account\r\n                address={address}\r\n                localProvider={provider}\r\n                injectedProvider={provider}\r\n                mainnetProvider={provider}\r\n                price={price}\r\n                blockExplorer={blockExplorer}\r\n              />\r\n              {account}\r\n            </div>\r\n          </div>\r\n        }\r\n        size=\"large\"\r\n        style={{ marginTop: 25, width: \"100%\" }}\r\n        loading={contractDisplay && contractDisplay.length <= 0}\r\n      >\r\n        {contractIsDeployed ? contractDisplay : noContractDisplay}\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","import { SendOutlined } from \"@ant-design/icons\";\r\nimport { Button, Input, Tooltip } from \"antd\";\r\n// import { useLookupAddress } from \"eth-hooks/dapps/ens\";\r\nimport React, { useCallback, useState, useEffect } from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { Transactor } from \"../helpers\";\r\nimport Wallet from \"./Wallet\";\r\n\r\nconst { utils } = require(\"ethers\");\r\n\r\n// improved a bit by converting address to ens if it exists\r\n// added option to directly input ens name\r\n// added placeholder option\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays a local faucet to send ETH to given address, also wallet is provided\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Faucet\r\n    price={price}\r\n    localProvider={localProvider}\r\n    ensProvider={mainnetProvider}\r\n    placeholder={\"Send local faucet\"}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\r\n  - Provide localProvider={localProvider} to be able to send ETH to given address\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n              works both in input field & wallet\r\n  - Provide placeholder=\"Send local faucet\" value for the input\r\n*/\r\n\r\nexport default function Faucet(props) {\r\n  const [address, setAddress] = useState();\r\n  const [faucetAddress, setFaucetAddress] = useState();\r\n\r\n  const { price, placeholder, localProvider, ensProvider, onChange } = props;\r\n\r\n  useEffect(() => {\r\n    const getFaucetAddress = async () => {\r\n      if (localProvider) {\r\n        const _faucetAddress = await localProvider.listAccounts();\r\n        setFaucetAddress(_faucetAddress[0]);\r\n        //console.log(_faucetAddress);\r\n      }\r\n    };\r\n    getFaucetAddress();\r\n  }, [localProvider]);\r\n\r\n  let blockie;\r\n  if (address && typeof address.toLowerCase === \"function\") {\r\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\r\n  } else {\r\n    blockie = <div />;\r\n  }\r\n\r\n  // const ens = useLookupAddress(ensProvider, address);\r\n\r\n  const updateAddress = useCallback(\r\n    async newValue => {\r\n      if (typeof newValue !== \"undefined\" && utils.isAddress(newValue)) {\r\n        let newAddress = newValue;\r\n        // if (newAddress.indexOf(\".eth\") > 0 || newAddress.indexOf(\".xyz\") > 0) {\r\n        //   try {\r\n        //     const possibleAddress = await ensProvider.resolveName(newAddress);\r\n        //     if (possibleAddress) {\r\n        //       newAddress = possibleAddress;\r\n        //     }\r\n        //     // eslint-disable-next-line no-empty\r\n        //   } catch (e) { }\r\n        // }\r\n        setAddress(newAddress);\r\n      }\r\n    },\r\n    [ensProvider, onChange],\r\n  );\r\n\r\n  const tx = Transactor(localProvider);\r\n\r\n  return (\r\n    <span>\r\n      <Input\r\n        size=\"large\"\r\n        placeholder={placeholder ? placeholder : \"local faucet\"}\r\n        prefix={blockie}\r\n        value={address}\r\n        // value={ens || address}\r\n        onChange={e => {\r\n          // setAddress(e.target.value);\r\n          updateAddress(e.target.value);\r\n        }}\r\n        suffix={\r\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\r\n            <Button\r\n              onClick={() => {\r\n                tx({\r\n                  to: address,\r\n                  value: utils.parseEther(\"0.01\"),\r\n                });\r\n                //setAddress(\"\");\r\n              }}\r\n              shape=\"circle\"\r\n              icon={<SendOutlined />}\r\n            />\r\n            <Wallet\r\n              color=\"#888888\"\r\n              provider={localProvider}\r\n              ensProvider={ensProvider}\r\n              price={price}\r\n              address={faucetAddress}\r\n            />\r\n          </Tooltip>\r\n        }\r\n      />\r\n    </span>\r\n  );\r\n}\r\n","import { PageHeader } from \"antd\";\r\nimport React from \"react\";\r\n\r\n// displays a page header\r\n\r\nexport default function Header() {\r\n  return (\r\n      <PageHeader\r\n        title=\"Floor 101\"\r\n        style={{ cursor: \"pointer\" }}\r\n      />\r\n  );\r\n}\r\n","const contractListPromise = import(\"../contracts/hardhat_contracts.json\");\r\n// @ts-ignore\r\nconst externalContractsPromise = import(\"../contracts/external_contracts\");\r\n\r\nexport const loadAppContracts = async () => {\r\n  const config = {};\r\n  config.deployedContracts = (await contractListPromise).default ?? {};\r\n  config.externalContracts = (await externalContractsPromise).default ?? {};\r\n  return config;\r\n};\r\n","import { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\r\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\r\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Descriptions,\r\n  Divider,\r\n  Drawer,\r\n  InputNumber,\r\n  Modal,\r\n  notification,\r\n  Row,\r\n  Select,\r\n  Space,\r\n  Tooltip,\r\n  Typography,\r\n} from \"antd\";\r\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\r\nimport { ethers } from \"ethers\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDebounce } from \"../hooks\";\r\n\r\nconst { Option } = Select;\r\nconst { Text } = Typography;\r\n\r\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\r\n\r\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\r\n\r\nconst erc20Abi = [\r\n  \"function balanceOf(address owner) view returns (uint256)\",\r\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\r\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\r\n];\r\n\r\nconst makeCall = async (callName, contract, args, metadata = {}) => {\r\n  if (contract[callName]) {\r\n    let result;\r\n    if (args) {\r\n      result = await contract[callName](...args, metadata);\r\n    } else {\r\n      result = await contract[callName]();\r\n    }\r\n    return result;\r\n  }\r\n  return undefined;\r\n  console.log(\"no call of that name!\");\r\n};\r\n\r\nconst defaultToken = \"ETH\";\r\nconst defaultTokenOut = \"DAI\";\r\nconst defaultSlippage = \"0.5\";\r\nconst defaultTimeLimit = 60 * 10;\r\n\r\nconst tokenListToObject = array =>\r\n  array.reduce((obj, item) => {\r\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\r\n    return obj;\r\n  }, {});\r\n\r\nfunction Swap({ selectedProvider, tokenListURI }) {\r\n  const [tokenIn, setTokenIn] = useState(defaultToken);\r\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\r\n  const [exact, setExact] = useState();\r\n  const [amountIn, setAmountIn] = useState();\r\n  const [amountInMax, setAmountInMax] = useState();\r\n  const [amountOut, setAmountOut] = useState();\r\n  const [amountOutMin, setAmountOutMin] = useState();\r\n  const [trades, setTrades] = useState();\r\n  const [routerAllowance, setRouterAllowance] = useState();\r\n  const [balanceIn, setBalanceIn] = useState();\r\n  const [balanceOut, setBalanceOut] = useState();\r\n  const [slippageTolerance, setSlippageTolerance] = useState(\r\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\r\n  );\r\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\r\n  const [swapping, setSwapping] = useState(false);\r\n  const [approving, setApproving] = useState(false);\r\n  const [settingsVisible, setSettingsVisible] = useState(false);\r\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\r\n\r\n  const [tokenList, setTokenList] = useState([]);\r\n\r\n  const [tokens, setTokens] = useState();\r\n\r\n  const [invertPrice, setInvertPrice] = useState(false);\r\n\r\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\r\n\r\n  const signer = selectedProvider.getSigner();\r\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\r\n\r\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\r\n\r\n  const debouncedAmountIn = useDebounce(amountIn, 500);\r\n  const debouncedAmountOut = useDebounce(amountOut, 500);\r\n\r\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\r\n\r\n  useEffect(() => {\r\n    const getTokenList = async () => {\r\n      console.log(_tokenListUri);\r\n      try {\r\n        const tokenListResponse = await fetch(_tokenListUri);\r\n        const tokenListJson = await tokenListResponse.json();\r\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\r\n          return t.chainId === activeChainId;\r\n        });\r\n        const ethToken = WETH[activeChainId];\r\n        ethToken.name = \"Ethereum\";\r\n        ethToken.symbol = \"ETH\";\r\n        ethToken.logoURI =\r\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\r\n        const _tokenList = [ethToken, ...filteredTokens];\r\n        setTokenList(_tokenList);\r\n        const _tokens = tokenListToObject(_tokenList);\r\n        setTokens(_tokens);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    };\r\n    getTokenList();\r\n  }, [tokenListURI]);\r\n\r\n  const getTrades = async () => {\r\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\r\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\r\n\r\n      const baseTokens = tokenList\r\n        .filter(function (t) {\r\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\r\n        })\r\n        .map(el => {\r\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\r\n        });\r\n\r\n      const listOfPairwiseTokens = pairs(baseTokens);\r\n\r\n      const getPairs = async list => {\r\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\r\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\r\n      };\r\n\r\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\r\n\r\n      let bestTrade;\r\n\r\n      if (exact === \"in\") {\r\n        setAmountInMax();\r\n        bestTrade = Trade.bestTradeExactIn(\r\n          listOfPairs.filter(item => item),\r\n          new TokenAmount(tokens[tokenIn], ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\r\n          tokens[tokenOut],\r\n          { maxNumResults: 3, maxHops: 1 },\r\n        );\r\n        if (bestTrade[0]) {\r\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\r\n        } else {\r\n          setAmountOut();\r\n        }\r\n      } else if (exact === \"out\") {\r\n        setAmountOutMin();\r\n        bestTrade = Trade.bestTradeExactOut(\r\n          listOfPairs.filter(item => item),\r\n          tokens[tokenIn],\r\n          new TokenAmount(tokens[tokenOut], ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\r\n          { maxNumResults: 3, maxHops: 1 },\r\n        );\r\n        if (bestTrade[0]) {\r\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\r\n        } else {\r\n          setAmountIn();\r\n        }\r\n      }\r\n\r\n      setTrades(bestTrade);\r\n\r\n      console.log(bestTrade);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTrades();\r\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\r\n\r\n  useEffect(() => {\r\n    if (trades && trades[0]) {\r\n      if (exact === \"in\") {\r\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\r\n      } else if (exact === \"out\") {\r\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\r\n      }\r\n    }\r\n  }, [slippageTolerance, amountIn, amountOut, trades]);\r\n\r\n  const getBalance = async (_token, _account, _contract) => {\r\n    let newBalance;\r\n    if (_token === \"ETH\") {\r\n      newBalance = await selectedProvider.getBalance(_account);\r\n    } else {\r\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\r\n    }\r\n    return newBalance;\r\n  };\r\n\r\n  const getAccountInfo = async () => {\r\n    if (tokens) {\r\n      const accountList = await selectedProvider.listAccounts();\r\n\r\n      if (tokenIn) {\r\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\r\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\r\n        setBalanceIn(newBalanceIn);\r\n\r\n        let allowance;\r\n\r\n        if (tokenIn === \"ETH\") {\r\n          setRouterAllowance();\r\n        } else {\r\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\r\n          setRouterAllowance(allowance);\r\n        }\r\n      }\r\n\r\n      if (tokenOut) {\r\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\r\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\r\n        setBalanceOut(newBalanceOut);\r\n      }\r\n    }\r\n  };\r\n\r\n  usePoller(getAccountInfo, 6000);\r\n\r\n  const route = trades\r\n    ? trades.length > 0\r\n      ? trades[0].route.path.map(function (item) {\r\n          return item.symbol;\r\n        })\r\n      : []\r\n    : [];\r\n\r\n  const updateRouterAllowance = async newAllowance => {\r\n    setApproving(true);\r\n    try {\r\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\r\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\r\n      console.log(result);\r\n      setApproving(false);\r\n      return true;\r\n    } catch (e) {\r\n      notification.open({\r\n        message: \"Approval unsuccessful\",\r\n        description: `Error: ${e.message}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const approveRouter = async () => {\r\n    const approvalAmount =\r\n      exact === \"in\"\r\n        ? ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\r\n        : amountInMax.raw.toString();\r\n    console.log(approvalAmount);\r\n    const approval = updateRouterAllowance(approvalAmount);\r\n    if (approval) {\r\n      notification.open({\r\n        message: \"Token transfer approved\",\r\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const removeRouterAllowance = async () => {\r\n    const approvalAmount = ethers.utils.hexlify(0);\r\n    console.log(approvalAmount);\r\n    const removal = updateRouterAllowance(approvalAmount);\r\n    if (removal) {\r\n      notification.open({\r\n        message: \"Token approval removed\",\r\n        description: `The router is no longer approved for ${tokenIn}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const executeSwap = async () => {\r\n    setSwapping(true);\r\n    try {\r\n      let args;\r\n      const metadata = {};\r\n\r\n      let call;\r\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\r\n      const path = trades[0].route.path.map(function (item) {\r\n        return item.address;\r\n      });\r\n      console.log(path);\r\n      const accountList = await selectedProvider.listAccounts();\r\n      const address = accountList[0];\r\n\r\n      if (exact === \"in\") {\r\n        const _amountIn = ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\r\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\r\n        if (tokenIn === \"ETH\") {\r\n          call = \"swapExactETHForTokens\";\r\n          args = [_amountOutMin, path, address, deadline];\r\n          metadata.value = _amountIn;\r\n        } else {\r\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\r\n          args = [_amountIn, _amountOutMin, path, address, deadline];\r\n        }\r\n      } else if (exact === \"out\") {\r\n        const _amountOut = ethers.utils.hexlify(\r\n          ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals),\r\n        );\r\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\r\n        if (tokenIn === \"ETH\") {\r\n          call = \"swapETHForExactTokens\";\r\n          args = [_amountOut, path, address, deadline];\r\n          metadata.value = _amountInMax;\r\n        } else {\r\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\r\n          args = [_amountOut, _amountInMax, path, address, deadline];\r\n        }\r\n      }\r\n      console.log(call, args, metadata);\r\n      const result = await makeCall(call, routerContract, args, metadata);\r\n      console.log(result);\r\n      notification.open({\r\n        message: \"Swap complete 🦄\",\r\n        description: (\r\n          <>\r\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\r\n            <Text copyable>{result.hash}</Text>\r\n          </>\r\n        ),\r\n      });\r\n      setSwapping(false);\r\n    } catch (e) {\r\n      console.log(e);\r\n      setSwapping(false);\r\n      notification.open({\r\n        message: \"Swap unsuccessful\",\r\n        description: `Error: ${e.message}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const showSwapModal = () => {\r\n    setSwapModalVisible(true);\r\n  };\r\n\r\n  const handleSwapModalOk = () => {\r\n    setSwapModalVisible(false);\r\n    executeSwap();\r\n  };\r\n\r\n  const handleSwapModalCancel = () => {\r\n    setSwapModalVisible(false);\r\n  };\r\n\r\n  const insufficientBalance = balanceIn\r\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\r\n    : null;\r\n  const inputIsToken = tokenIn !== \"ETH\";\r\n  const insufficientAllowance = !inputIsToken\r\n    ? false\r\n    : routerAllowance\r\n    ? parseFloat(ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\r\n    : null;\r\n  const formattedBalanceIn = balanceIn\r\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\r\n    : null;\r\n  const formattedBalanceOut = balanceOut\r\n    ? parseFloat(ethers.utils.formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\r\n    : null;\r\n\r\n  const metaIn =\r\n    tokens && tokenList && tokenIn\r\n      ? tokenList.filter(function (t) {\r\n          return t.address === tokens[tokenIn].address;\r\n        })[0]\r\n      : null;\r\n  const metaOut =\r\n    tokens && tokenList && tokenOut\r\n      ? tokenList.filter(function (t) {\r\n          return t.address === tokens[tokenOut].address;\r\n        })[0]\r\n      : null;\r\n\r\n  const cleanIpfsURI = uri => {\r\n    try {\r\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\r\n    } catch (e) {\r\n      console.log(e, uri);\r\n      return uri;\r\n    }\r\n  };\r\n\r\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\r\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\r\n\r\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\r\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\r\n  const priceDescription = rawPrice\r\n    ? invertPrice\r\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\r\n      : `${price} ${tokenOut} per ${tokenIn}`\r\n    : null;\r\n\r\n  const priceWidget = (\r\n    <Space>\r\n      <Text type=\"secondary\">{priceDescription}</Text>\r\n      <Button\r\n        type=\"text\"\r\n        onClick={() => {\r\n          setInvertPrice(!invertPrice);\r\n        }}\r\n      >\r\n        <RetweetOutlined />\r\n      </Button>\r\n    </Space>\r\n  );\r\n\r\n  const swapModal = (\r\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\r\n      <Row>\r\n        <Space>\r\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\r\n          {amountIn}\r\n          {tokenIn}\r\n        </Space>\r\n      </Row>\r\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\r\n        <span>↓</span>\r\n      </Row>\r\n      <Row>\r\n        <Space>\r\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\r\n          {amountOut}\r\n          {tokenOut}\r\n        </Space>\r\n      </Row>\r\n      <Divider />\r\n      <Row>{priceWidget}</Row>\r\n      <Row>\r\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\r\n          ? exact === \"in\"\r\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\r\n                6,\r\n              )} ${tokenOut} or the transaction will revert.`\r\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\r\n                6,\r\n              )} ${tokenIn} or the transaction will revert.`\r\n          : null}\r\n      </Row>\r\n    </Modal>\r\n  );\r\n\r\n  return (\r\n    <Card\r\n      title={\r\n        <Space>\r\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\r\n          <Typography>Uniswapper</Typography>\r\n        </Space>\r\n      }\r\n      extra={\r\n        <Button\r\n          type=\"text\"\r\n          onClick={() => {\r\n            setSettingsVisible(true);\r\n          }}\r\n        >\r\n          <SettingOutlined />\r\n        </Button>\r\n      }\r\n    >\r\n      <Space direction=\"vertical\">\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Card\r\n            size=\"small\"\r\n            type=\"inner\"\r\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\r\n            extra={\r\n              <>\r\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\r\n                <Button\r\n                  type=\"link\"\r\n                  onClick={() => {\r\n                    setAmountOut();\r\n                    setAmountIn(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals));\r\n                    setAmountOutMin();\r\n                    setAmountInMax();\r\n                    setExact(\"in\");\r\n                  }}\r\n                >\r\n                  {formattedBalanceIn}\r\n                </Button>\r\n              </>\r\n            }\r\n            style={{ width: 400, textAlign: \"left\" }}\r\n          >\r\n            <InputNumber\r\n              style={{ width: \"160px\" }}\r\n              min={0}\r\n              size=\"large\"\r\n              value={amountIn}\r\n              onChange={e => {\r\n                setAmountOut();\r\n                setTrades();\r\n                setAmountIn(e);\r\n                setExact(\"in\");\r\n              }}\r\n            />\r\n            <Select\r\n              showSearch\r\n              value={tokenIn}\r\n              style={{ width: \"120px\" }}\r\n              size=\"large\"\r\n              bordered={false}\r\n              defaultValue={defaultToken}\r\n              onChange={value => {\r\n                console.log(value);\r\n                if (value === tokenOut) {\r\n                  console.log(\"switch!\", tokenIn);\r\n                  setTokenOut(tokenIn);\r\n                  setAmountOut(amountIn);\r\n                  setBalanceOut(balanceIn);\r\n                }\r\n                setTokenIn(value);\r\n                setTrades();\r\n                setAmountIn();\r\n                setExact(\"out\");\r\n                setBalanceIn();\r\n              }}\r\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n              optionFilterProp=\"children\"\r\n            >\r\n              {tokenList.map(token => (\r\n                <Option key={token.symbol} value={token.symbol}>\r\n                  {token.symbol}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </Card>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Tooltip title={route.join(\"->\")}>\r\n            <span>↓</span>\r\n          </Tooltip>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Card\r\n            size=\"small\"\r\n            type=\"inner\"\r\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\r\n            extra={\r\n              <>\r\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\r\n                <Button type=\"text\">{formattedBalanceOut}</Button>\r\n              </>\r\n            }\r\n            style={{ width: 400, textAlign: \"left\" }}\r\n          >\r\n            <InputNumber\r\n              style={{ width: \"160px\" }}\r\n              size=\"large\"\r\n              min={0}\r\n              value={amountOut}\r\n              onChange={e => {\r\n                setAmountOut(e);\r\n                setAmountIn();\r\n                setTrades();\r\n                setExact(\"out\");\r\n              }}\r\n            />\r\n            <Select\r\n              showSearch\r\n              value={tokenOut}\r\n              style={{ width: \"120px\" }}\r\n              size=\"large\"\r\n              bordered={false}\r\n              onChange={value => {\r\n                console.log(value, tokenIn, tokenOut);\r\n                if (value === tokenIn) {\r\n                  console.log(\"switch!\", tokenOut);\r\n                  setTokenIn(tokenOut);\r\n                  setAmountIn(amountOut);\r\n                  setBalanceIn(balanceOut);\r\n                }\r\n                setTokenOut(value);\r\n                setExact(\"in\");\r\n                setAmountOut();\r\n                setTrades();\r\n                setBalanceOut();\r\n              }}\r\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n              optionFilterProp=\"children\"\r\n            >\r\n              {tokenList.map(token => (\r\n                <Option key={token.symbol} value={token.symbol}>\r\n                  {token.symbol}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </Card>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          {priceDescription ? priceWidget : null}\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Space>\r\n            {inputIsToken ? (\r\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\r\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\r\n              </Button>\r\n            ) : null}\r\n            <Button\r\n              size=\"large\"\r\n              loading={swapping}\r\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\r\n              onClick={showSwapModal}\r\n            >\r\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\r\n            </Button>\r\n            {swapModal}\r\n          </Space>\r\n        </Row>\r\n      </Space>\r\n      <Drawer\r\n        visible={settingsVisible}\r\n        onClose={() => {\r\n          setSettingsVisible(false);\r\n        }}\r\n        width={500}\r\n      >\r\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\r\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\r\n          <Descriptions.Item label=\"routerAllowance\">\r\n            <Space>\r\n              {routerAllowance ? ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\r\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\r\n            </Space>\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\r\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\r\n          <Descriptions.Item label=\"bestPrice\">\r\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"nextMidPrice\">\r\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"priceImpact\">\r\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"slippageTolerance\">\r\n            <InputNumber\r\n              defaultValue={defaultSlippage}\r\n              min={0}\r\n              max={100}\r\n              precision={2}\r\n              formatter={value => `${value}%`}\r\n              parser={value => value.replace(\"%\", \"\")}\r\n              onChange={value => {\r\n                console.log(value);\r\n\r\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\r\n                setSlippageTolerance(slippagePercent);\r\n              }}\r\n            />\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\r\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\r\n          <Descriptions.Item label=\"timeLimitInSeconds\">\r\n            <InputNumber\r\n              min={0}\r\n              max={3600}\r\n              defaultValue={defaultTimeLimit}\r\n              onChange={value => {\r\n                console.log(value);\r\n                setTimeLimit(value);\r\n              }}\r\n            />\r\n          </Descriptions.Item>\r\n        </Descriptions>\r\n      </Drawer>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Swap;\r\n","import { Switch } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\n\r\nexport default function ThemeSwitcher() {\r\n  const theme = window.localStorage.getItem(\"theme\");\r\n  const [isDarkMode, setIsDarkMode] = useState(!(!theme || theme === \"light\"));\r\n  const { switcher, currentTheme, status, themes } = useThemeSwitcher();\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(\"theme\", currentTheme);\r\n  }, [currentTheme]);\r\n\r\n  const toggleTheme = isChecked => {\r\n    setIsDarkMode(isChecked);\r\n    switcher({ theme: isChecked ? themes.dark : themes.light });\r\n  };\r\n\r\n  // Avoid theme change flicker\r\n  // if (status === \"loading\") {\r\n  //   return null;\r\n  // }\r\n\r\n  return (\r\n    <div className=\"main fade-in\" style={{ position: \"fixed\", right: 8, bottom: 8 }}>\r\n      <span style={{ padding: 8 }}>{currentTheme === \"light\" ? \"☀️\" : \"🌜\"}</span>\r\n      <Switch checked={isDarkMode} onChange={toggleTheme} />\r\n    </div>\r\n  );\r\n}\r\n","import { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\r\nimport { Timeline, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\n\r\nconst { Text } = Typography;\r\n\r\n// displays a timeline for scaffold-eth usage\r\n\r\nexport default function TimelineDisplay(props) {\r\n  return (\r\n    <Timeline mode=\"right\">\r\n      <Timeline.Item dot=\"💾\">\r\n        <Text delete>\r\n          Clone and Install from the{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\r\n            github repo\r\n          </a>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"⚛️\">\r\n        <Text delete>\r\n          Start your frontend app with: <Text strong>yarn start</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"⛓\">\r\n        <Text delete={props.chainIsUp}>\r\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"📝\">\r\n        <Text delete={props.hasOwner}>\r\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🤡\">\r\n        <Text delete={props.isNotSmoort}>\r\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\r\n        <Text delete={props.hasEther}>\r\n          Send test ether to your{\" \"}\r\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\r\n          (bottom left) faucet\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item\r\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\r\n        color={props.contractHasEther ? \"green\" : \"blue\"}\r\n      >\r\n        <Text delete={props.contractHasEther}>\r\n          Deposit some funds into your{\" \"}\r\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\r\n          smart contract wallet\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item\r\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\r\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\r\n      >\r\n        <Text delete={props.amOwnerOfContract}>\r\n          Set <b>owner</b> of your{\" \"}\r\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\r\n          smart contract wallet to your{\" \"}\r\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"☢️\">\r\n        <Text>\r\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🔬\">\r\n        <Text>\r\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\r\n          <Text strong>yarn run test</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🚀\">\r\n        <Text>\r\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\r\n            @ me\r\n          </a>\r\n          !\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"📖\">\r\n        <Text>\r\n          Read more about{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\r\n            Ethereum\r\n          </a>\r\n          ,{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\r\n            Solidity\r\n          </a>\r\n          , and{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\r\n            Buidler\r\n          </a>\r\n        </Text>\r\n      </Timeline.Item>\r\n    </Timeline>\r\n  );\r\n}\r\n","import { utils, ethers } from \"ethers\";\r\nimport { Button, Input, Form, Select, InputNumber, Table, Radio } from \"antd\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useContractLoader, useOnBlock } from \"eth-hooks\";\r\nimport { NETWORKS } from \"../constants\";\r\nimport { Transactor } from \"../helpers\";\r\n\r\n/*\r\nThis is a component for bridging between L1 & L2\r\nCurrently it supports Testnet deposits for Arbitrum & Optimism\r\n\r\n __          _______ _____\r\n \\ \\        / /_   _|  __ \\\r\n  \\ \\  /\\  / /  | | | |__) |\r\n   \\ \\/  \\/ /   | | |  ___/\r\n    \\  /\\  /   _| |_| |\r\n     \\/  \\/   |_____|_|\r\n\r\n\r\n*/\r\n\r\nexport default function L2ArbitrumBridge({ address, userSigner }) {\r\n  const [L1EthBalance, setL1EthBalance] = useState(\"...\");\r\n  const [L2EthBalance, setL2EthBalance] = useState(\"...\");\r\n  const [L1Provider, setL1Provider] = useState(\"\");\r\n  const [L2Provider, setL2Provider] = useState(\"\");\r\n  const [rollup, setRollup] = useState(\"arbitrum\");\r\n  const [environment, setEnvironment] = useState(\"test\");\r\n\r\n  const rollupConfig = {\r\n    arbitrum: {\r\n      test: { L1: NETWORKS.rinkeby, L2: NETWORKS.rinkebyArbitrum },\r\n      main: { L1: NETWORKS.mainnet, L2: NETWORKS.arbitrum },\r\n      local: { L1: NETWORKS.localArbitrumL1, L2: NETWORKS.localArbitrum },\r\n    },\r\n    optimism: {\r\n      test: { L1: NETWORKS.kovan, L2: NETWORKS.kovanOptimism },\r\n      local: { L1: NETWORKS.localOptimismL1, L2: NETWORKS.localOptimism },\r\n    },\r\n  };\r\n\r\n  const activeConfig = rollupConfig[rollup][environment];\r\n\r\n  const selectedChainId =\r\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\r\n\r\n  const tx = Transactor(userSigner);\r\n\r\n  useEffect(() => {\r\n    async function setProviders() {\r\n      const L1 = activeConfig.L1;\r\n      const L2 = activeConfig.L2;\r\n      setL1Provider(new ethers.providers.StaticJsonRpcProvider(L1.rpcUrl));\r\n      setL2Provider(new ethers.providers.StaticJsonRpcProvider(L2.rpcUrl));\r\n      setL1EthBalance(\"...\");\r\n      setL2EthBalance(\"...\");\r\n    }\r\n    setProviders();\r\n  }, [rollup]);\r\n\r\n  const contracts = useContractLoader(userSigner, { externalContracts: L1BridgeMetadata, hardhatContracts: {} });\r\n\r\n  useOnBlock(L1Provider, async () => {\r\n    console.log(`⛓ A new mainnet block is here: ${L1Provider._lastBlockNumber}`);\r\n    const yourL1Balance = await L1Provider.getBalance(address);\r\n    setL1EthBalance(yourL1Balance ? ethers.utils.formatEther(yourL1Balance) : \"...\");\r\n    const yourL2Balance = await L2Provider.getBalance(address);\r\n    setL2EthBalance(yourL2Balance ? ethers.utils.formatEther(yourL2Balance) : \"...\");\r\n  });\r\n\r\n  const { Option } = Select;\r\n  const formItemLayout = {\r\n    labelCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 8 },\r\n    },\r\n    wrapperCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 12 },\r\n    },\r\n  };\r\n  const tailFormItemLayout = {\r\n    wrapperCol: {\r\n      xs: {\r\n        span: 24,\r\n        offset: 0,\r\n      },\r\n      sm: {\r\n        span: 12,\r\n        offset: 8,\r\n      },\r\n    },\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"\",\r\n      dataIndex: \"token\",\r\n      key: \"token\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: `${activeConfig.L1.name} L1 Balance`,\r\n      dataIndex: \"l1\",\r\n      key: \"l1\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: `${activeConfig.L1.name} ${rollup} Balance`,\r\n      dataIndex: \"l2\",\r\n      key: \"l2\",\r\n      align: \"center\",\r\n    },\r\n  ];\r\n\r\n  const data = [\r\n    {\r\n      key: \"1\",\r\n      token: \"ETH\",\r\n      l1: \"Ξ\" + L1EthBalance,\r\n      l2: \"Ξ\" + L2EthBalance,\r\n    },\r\n  ];\r\n\r\n  const [form] = Form.useForm();\r\n\r\n  const onAssetChange = value => {\r\n    console.log(value);\r\n  };\r\n\r\n  async function onFinish(values) {\r\n    console.log(contracts);\r\n    console.log(values.amount.toString());\r\n    console.log(rollup);\r\n    let newTx;\r\n    try {\r\n      if (rollup === \"arbitrum\") {\r\n        newTx = await tx(\r\n          contracts.Inbox.depositEth(1_300_000, {\r\n            value: utils.parseEther(values.amount.toString()),\r\n            gasLimit: 300000,\r\n          }),\r\n        );\r\n      } else if (rollup === \"optimism\") {\r\n        newTx = await tx(\r\n          contracts.OVM_L1StandardBridge.depositETH(1_300_000, \"0x\", {\r\n            value: utils.parseEther(values.amount.toString()),\r\n          }),\r\n        );\r\n      }\r\n      await newTx.wait();\r\n      console.log(\"woop!\");\r\n    } catch (e) {\r\n      console.log(e);\r\n      console.log(\"something went wrong!\");\r\n    }\r\n  }\r\n\r\n  const onReset = () => {\r\n    form.resetFields();\r\n  };\r\n\r\n  const wrongNetwork = selectedChainId !== activeConfig.L1.chainId;\r\n\r\n  return (\r\n    <div style={{ padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\r\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\r\n        <h2>Welcome to the L2 Deposit Bridge!</h2>\r\n        <Radio.Group\r\n          value={rollup}\r\n          onChange={e => {\r\n            setRollup(e.target.value);\r\n          }}\r\n          style={{ marginBottom: 10 }}\r\n        >\r\n          <Radio.Button value=\"arbitrum\">Arbitrum</Radio.Button>\r\n          <Radio.Button value=\"optimism\">Optimism</Radio.Button>\r\n        </Radio.Group>\r\n\r\n        <Table columns={columns} dataSource={data} pagination={false} style={{ marginBottom: 20 }} />\r\n\r\n        <Form\r\n          {...formItemLayout}\r\n          form={form}\r\n          name=\"control-hooks\"\r\n          onFinish={onFinish}\r\n          initialValues={{ assetType: \"eth\" }}\r\n        >\r\n          <Form.Item\r\n            name=\"assetType\"\r\n            label=\"Select Asset Type\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n              },\r\n            ]}\r\n          >\r\n            <Select placeholder=\"Select an asset type\" onChange={onAssetChange} allowClear>\r\n              <Option value=\"eth\">ETH</Option>\r\n              <Option disabled value=\"erc20\">\r\n                ERC-20\r\n              </Option>\r\n            </Select>\r\n          </Form.Item>\r\n          <Form.Item name=\"address\" label=\"Address\">\r\n            <Input disabled placeholder={address} />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"amount\"\r\n            label=\"Amount to bridge\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n              },\r\n            ]}\r\n          >\r\n            <InputNumber />\r\n          </Form.Item>\r\n          <Form.Item {...tailFormItemLayout}>\r\n            <Button type=\"primary\" htmlType=\"submit\" disabled={wrongNetwork}>\r\n              {wrongNetwork ? `Switch wallet to ${activeConfig.L1.name}` : \"Deposit\"}\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Arbitrum Inbox https://rinkeby.etherscan.io/address/0xa157dc79ca26d69c3b1282d03ec42bdee2790a8f#code\r\nconst ArbitrumInboxABI = [\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      { indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" },\r\n      { indexed: false, internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"InboxMessageDelivered\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [{ indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" }],\r\n    name: \"InboxMessageDeliveredFromOrigin\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [{ indexed: false, internalType: \"address\", name: \"newSource\", type: \"address\" }],\r\n    name: \"WhitelistSourceUpdated\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"bridge\",\r\n    outputs: [{ internalType: \"contract IBridge\", name: \"\", type: \"address\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"l2CallValue\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"excessFeeRefundAddress\", type: \"address\" },\r\n      { internalType: \"address\", name: \"callValueRefundAddress\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"createRetryableTicket\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" }],\r\n    name: \"depositEth\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"contract IBridge\", name: \"_bridge\", type: \"address\" },\r\n      { internalType: \"address\", name: \"_whitelist\", type: \"address\" },\r\n    ],\r\n    name: \"initialize\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"isMaster\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendContractTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendL1FundedContractTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendL1FundedUnsignedTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\r\n    name: \"sendL2Message\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\r\n    name: \"sendL2MessageFromOrigin\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendUnsignedTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"address\", name: \"newSource\", type: \"address\" }],\r\n    name: \"updateWhitelistSource\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"whitelist\",\r\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n];\r\n\r\n// https://github.com/ethereum-optimism/optimism/blob/2bd49730fa8d2c10953873f0ccc792198a49d5c9/packages/contracts/contracts/optimistic-ethereum/iOVM/bridge/tokens/iOVM_L1StandardBridge.sol\r\nconst OVM_L1StandardBridgeABI = [\r\n  \"function depositETH(uint32 _l2Gas,bytes calldata _data) external payable\",\r\n  \"function depositETHTo(address _to,uint32 _l2Gas,bytes calldata _data) external payable\",\r\n  \"function finalizeETHWithdrawal (address _from,address _to,uint _amount,bytes calldata _data) external\",\r\n];\r\n\r\nconst L1BridgeMetadata = {\r\n  // Arbitrium Contract's\r\n  44010: {\r\n    contracts: {\r\n      Inbox: {\r\n        address: \"0xA4d796Ad4e79aFB703340a596AEd88f8a5924183\",\r\n        abi: ArbitrumInboxABI,\r\n      },\r\n    },\r\n  },\r\n  4: {\r\n    contracts: {\r\n      Inbox: {\r\n        address: \"0x578bade599406a8fe3d24fd7f7211c0911f5b29e\",\r\n        abi: ArbitrumInboxABI,\r\n      },\r\n    },\r\n  },\r\n  // Optimism Contract's\r\n  31337: {\r\n    contracts: {\r\n      OVM_L1StandardBridge: {\r\n        address: \"0x998abeb3E57409262aE5b751f60747921B33613E\",\r\n        abi: OVM_L1StandardBridgeABI,\r\n      },\r\n    },\r\n  },\r\n  42: {\r\n    contracts: {\r\n      OVM_L1StandardBridge: {\r\n        address: \"0x22F24361D548e5FaAfb36d1437839f080363982B\",\r\n        abi: OVM_L1StandardBridgeABI,\r\n      },\r\n    },\r\n  },\r\n};\r\n","//import Portis from \"@portis/web3\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport { Alert, Button, Col, List, Menu, Row, InputNumber, Divider, Radio, Spin} from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport Authereum from \"authereum\";\r\nimport {\r\n  useBalance,\r\n  useContractLoader,\r\n  useContractReader,\r\n  useGasPrice,\r\n  useOnBlock,\r\n  useUserProviderAndSigner,\r\n} from \"eth-hooks\";\r\nimport { useExchangeEthPrice } from \"eth-hooks/dapps/dex\";\r\nimport { useEventListener } from \"eth-hooks/events/useEventListener\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\";\r\nimport WalletLink from \"walletlink\";\r\nimport Web3Modal from \"web3modal\";\r\nimport { TwitterOutlined} from '@ant-design/icons';\r\nimport { Address, Account, Balance, Contract, Faucet,  Header, ThemeSwitch } from \"./components\";\r\nimport { INFURA_ID, NETWORK, NETWORKS, ALCHEMY_KEY } from \"./constants\";\r\nimport externalContracts from \"./contracts/external_contracts\";\r\n// contracts\r\nimport deployedContracts from \"./contracts/hardhat_contracts.json\";\r\nimport { Transactor } from \"./helpers\";\r\n// import Hints from \"./Hints\";\r\n//import { ExampleUI, Hints, Subgraph } from \"./views\";\r\nimport \"./App.css\";\r\nconst { ethers } = require(\"ethers\");\r\n\r\n/// 📡 What chain are your contracts deployed to?\r\nconst targetNetwork = NETWORKS.polygon; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\r\n\r\n// 😬 Sorry for all the console logging\r\nconst DEBUG = true;\r\nconst NETWORKCHECK = true;\r\n\r\n// 🛰 providers\r\nif (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\r\n// const mainnetProvider = getDefaultProvider(\"mainnet\", { infura: INFURA_ID, etherscan: ETHERSCAN_KEY, quorum: 1 });\r\n// const mainnetProvider = new InfuraProvider(\"mainnet\",INFURA_ID);\r\n//\r\n// attempt to connect to our own scaffold eth rpc and if that fails fall back to infura...\r\n// Using StaticJsonRpcProvider as the chainId won't change see https://github.com/ethers-io/ethers.js/issues/901\r\nconst scaffoldEthProvider = navigator.onLine\r\n  ? new ethers.providers.StaticJsonRpcProvider(\"https://polygon-mainnet.g.alchemy.com/v2/yLWScHSkzCG2R-CTJwDr3ZgHu5ij3Mis\")\r\n  : null;\r\nconst poktMainnetProvider = navigator.onLine\r\n  ? new ethers.providers.StaticJsonRpcProvider(\r\n      \"https://eth-mainnet.g.alchemy.com/v2/pmZFj4utEW0QnKbGMIRKUAzeCnsinoRS\",\r\n    )\r\n  : null;\r\nconst mainnetInfura = navigator.onLine\r\n  ? new ethers.providers.StaticJsonRpcProvider(`https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`)\r\n  : null;\r\n// ( ⚠️ Getting \"failed to meet quorum\" errors? Check your INFURA_ID\r\n// 🏠 Your local provider is usually pointed at your local blockchain\r\nconst localProviderUrl = targetNetwork.rpcUrl;\r\n// as you deploy to other networks you can set REACT_APP_PROVIDER=https://dai.poa.network in packages/react-app/.env\r\nconst localProviderUrlFromEnv = process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : localProviderUrl;\r\nif (DEBUG) console.log(\"🏠 Connecting to provider:\", localProviderUrlFromEnv);\r\nconst localProvider = new ethers.providers.StaticJsonRpcProvider(localProviderUrlFromEnv);\r\n\r\n// 🔭 block explorer URL\r\nconst blockExplorer = targetNetwork.blockExplorer;\r\n\r\n// Coinbase walletLink init\r\nconst walletLink = new WalletLink({\r\n  appName: \"coinbase\",\r\n});\r\n\r\n// WalletLink provider\r\nconst walletLinkProvider = walletLink.makeWeb3Provider(`https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`, 1);\r\n\r\n// Portis ID: 6255fb2b-58c8-433b-a2c9-62098c05ddc9\r\n/*\r\n  Web3 modal helps us \"connect\" external wallets:\r\n*/\r\nconst web3Modal = new Web3Modal({\r\n  network: \"mainnet\", // Optional. If using WalletConnect on xDai, change network to \"xdai\" and add RPC info below for xDai chain.\r\n  cacheProvider: true, // optional\r\n  theme: \"light\", // optional. Change to \"dark\" for a dark theme.\r\n  providerOptions: {\r\n    walletconnect: {\r\n      package: WalletConnectProvider, // required\r\n      options: {\r\n        bridge: \"https://polygon.bridge.walletconnect.org\",\r\n        infuraId: INFURA_ID,\r\n        rpc: {\r\n          1: `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`, // mainnet // For more WalletConnect providers: https://docs.walletconnect.org/quick-start/dapps/web3-provider#required\r\n          42: `https://kovan.infura.io/v3/${INFURA_ID}`,\r\n          100: \"https://dai.poa.network\", // xDai\r\n        },\r\n      },\r\n    },\r\n    \"custom-walletlink\": {\r\n      display: {\r\n        logo: \"https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0\",\r\n        name: \"Coinbase\",\r\n        description: \"Connect to Coinbase Wallet (not Coinbase App)\",\r\n      },\r\n      package: walletLinkProvider,\r\n      connector: async (provider, _options) => {\r\n        await provider.enable();\r\n        return provider;\r\n      },\r\n    },\r\n    authereum: {\r\n      package: Authereum, // required\r\n    },\r\n  },\r\n});\r\n\r\nfunction App(props) {\r\n  const mainnetProvider =\r\n    poktMainnetProvider && poktMainnetProvider._isProvider\r\n      ? poktMainnetProvider\r\n      : scaffoldEthProvider && scaffoldEthProvider._network\r\n      ? scaffoldEthProvider\r\n      : mainnetInfura;\r\n\r\n  const [injectedProvider, setInjectedProvider] = useState();\r\n  const [address, setAddress] = useState();\r\n\r\n  const logoutOfWeb3Modal = async () => {\r\n    await web3Modal.clearCachedProvider();\r\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\r\n      await injectedProvider.provider.disconnect();\r\n    }\r\n    setTimeout(() => {\r\n      window.location.reload();\r\n    }, 1);\r\n  };\r\n\r\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\r\n  const price = useExchangeEthPrice(targetNetwork, mainnetProvider);\r\n\r\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\r\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\r\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\r\n  const userProviderAndSigner = useUserProviderAndSigner(injectedProvider, localProvider);\r\n  const userSigner = userProviderAndSigner.signer;\r\n\r\n  useEffect(() => {\r\n    async function getAddress() {\r\n      if (userSigner) {\r\n        const newAddress = await userSigner.getAddress();\r\n        setAddress(newAddress);\r\n      }\r\n    }\r\n    getAddress();\r\n  }, [userSigner]);\r\n\r\n  // You can warn the user if you would like them to be on a specific network\r\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\r\n  const selectedChainId =\r\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\r\n\r\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\r\n\r\n  // The transactor wraps transactions and provides notificiations\r\n  const tx = Transactor(userSigner, gasPrice);\r\n\r\n  // Faucet Tx can be used to send funds from the faucet\r\n  const faucetTx = Transactor(localProvider, gasPrice);\r\n\r\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\r\n  const yourLocalBalance = useBalance(localProvider, address);\r\n\r\n  // Just plug in different 🛰 providers to get your balance on different chains:\r\n  const yourMainnetBalance = useBalance(mainnetProvider, address);\r\n\r\n  // const contractConfig = useContractConfig();\r\n\r\n  const contractConfig = { deployedContracts: deployedContracts || {}, externalContracts: externalContracts || {} };\r\n\r\n  // Load in your local 📝 contract and read a value from it:\r\n  const readContracts = useContractLoader(localProvider, contractConfig);\r\n\r\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\r\n  const writeContracts = useContractLoader(userSigner, contractConfig, localChainId);\r\n\r\n  // EXTERNAL CONTRACT EXAMPLE:\r\n  //\r\n  // If you want to bring in the mainnet DAI contract it would look like:\r\n  const mainnetContracts = useContractLoader(mainnetProvider, contractConfig);\r\n\r\n// You can also use an ENS name for the contract address\r\n const daiAddress = \"0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063\";  // matic mainnet\r\n\r\n// The ERC-20 Contract ABI, which is a common contract interface\r\n// for tokens (this is the Human-Readable ABI format)\r\nconst daiAbi = [\r\n  \"function name() view returns (string)\",\r\n  \"function balanceOf(address account) view returns (uint256)\",\r\n  \"function approve( address spender, uint256 amount)\",\r\n  // Send some of your tokens to someone else\r\n  \"function transfer(address recipient, uint256 amount)\",\r\n];\r\nconst floorAbi = [\r\n  \"function mintWithDAI() public payable\",\r\n  \"function approve( address to, uint256 tokenId)\",  \r\n];\r\nconst marketAbi = [\r\n  \"function lend(uint256 tokenId, uint256 loanLength) public payable nonReentrant\",\r\n];\r\n\r\n// get the balance in the market contract\r\nconst getDaiBalance = async () =>{\r\n  try{\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);  \r\n    const daiContract = new ethers.Contract(daiAddress, daiAbi, provider);\r\n    let a = await daiContract.balanceOf(marketAddy);\r\n    setDaiBalance(a);\r\n}catch(e) { console.log(e);}\r\n}\r\n\r\n// Approve dai contract for minting contract\r\nconst approveDai = async () =>{\r\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n  const signer = provider.getSigner();\r\n  const daiContract = new ethers.Contract(daiAddress, daiAbi, provider);\r\n  const daiWithSigner = daiContract.connect(signer); \r\n  try{\r\n    setApproveMintButton(true);    // disables approve button   \r\n    await daiWithSigner.approve(readContracts.Floor101.address, ethers.utils.parseEther(\"100\"));\r\n    setDisableMintButton(false) ;  // enables mint button\r\n  }catch(e) {alert (e); console.log(e);}\r\n}\r\n\r\n// Approve dai contract for minting contract\r\nconst approveDai2 = async (addy) =>{\r\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n  const signer = provider.getSigner();\r\n  const daiContract = new ethers.Contract(daiAddress, daiAbi, provider);\r\n  const daiWithSigner = daiContract.connect(signer); \r\n  try{\r\n    setApproveMintButton(true);    // disables approve button   \r\n    await daiWithSigner.approve(addy, ethers.utils.parseEther(\"100\"));\r\n    setDisableMintButton(false) ;  // enables mint button\r\n  }catch(e) {alert (e); console.log(e);}\r\n}\r\n\r\n  const marketAddy=  readContracts && readContracts.Marketplace && readContracts.Marketplace.address;\r\n  const floorAddy=  readContracts && readContracts.Floor101 && readContracts.Floor101.address;\r\n\r\n  // const marketContractAddress = useContractReader(readContracts, \"Marketplace\", \"address\");\r\n  const balance = useContractReader(readContracts, \"Floor101\", \"balanceOf\", [address]);\r\n  const yourBalance = balance && balance.toNumber && balance.toNumber();\r\n\r\n  const hasLoan = useContractReader(readContracts, \"Marketplace\", \"hasLoan\", [address]);\r\n  const [yourCollectibles, setYourCollectibles] = useState();\r\n  const [nftSales, setNFTSales] = useState();\r\n\r\n  let s_total_nfts =  useContractReader(readContracts, \"Floor101\", \"totalSupply\");   \r\n   \r\n  const [lendButton, setLendButton] = useState(false);                 // used for disabling the approve/  lend buttons\r\n  const [approveButton, setApproveButton] = useState(false); \r\n  const [approveMintButton, setApproveMintButton] = useState(false);    // used for disabling the approve/ mint buttons\r\n  const [disableMintButton, setDisableMintButton] = useState(true);   \r\n  const [daiBalance, setDaiBalance] = useState(0);\r\n  // const listCancelSaleEvents = useEventListener(readContracts, \"Marketplace\", \"Event_cancelSale \", localProvider, 1);\r\n  const listSaleEvents = useEventListener(readContracts, \"Marketplace\", \"saleListingEvent \", localProvider, 1); \r\n  const mintEvents = useEventListener(readContracts, \"Floor101\", \"mintEvent\", localProvider, 1);\r\n  const lendEvent = useEventListener(readContracts, \"Marketplace\", \"lendEvent\", localProvider, 1);\r\n  const repayLoanEvent = useEventListener(readContracts, \"Marketplace\", \"repayLoanEvent\", localProvider, 1);  \r\n  const buyNftEvent = useEventListener(readContracts, \"Marketplace\", \"buyNftEvent\", localProvider, 1);  \r\n  \r\n\r\n  let balance2 = useContractReader(readContracts, \"Floor101\", \"balanceOf\", [marketAddy]);\r\n\r\n  const salesBalance = balance2 && balance2.toNumber && balance2.toNumber();\r\n\r\n  const [value, setValue] = useState(2);\r\n  const onChange = (e) => {\r\n    console.log('radio checked', e.target.value);\r\n    setValue(e.target.value);\r\n  };\r\n\r\n function getDate(dt) {\r\n      const milliseconds = dt * 1000 // 1575909015000\r\n      const dateObject = new Date(milliseconds)\r\n      let humanDateFormat = dateObject.toLocaleString() //2019-12-9 10:30:15\r\n      setDate(humanDateFormat);\r\n    }\r\n\r\n  const [dat, setDate] = useState(\"0\");\r\n\r\n // let tId = useContractReader( readContracts, \"Floor101\", \"tokenOfOwnerByIndex\", readContracts.Marketplace.address, 0);  \r\n const mint = async () =>{ \r\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n  const signer = provider.getSigner();\r\n  const floorContract = new ethers.Contract(floorAddy, floorAbi, provider);\r\n  const floorWithSigner = floorContract.connect(signer); \r\n  try{   \r\n    await floorWithSigner.mintWithDAI();\r\n    setDisableMintButton(true) ;  // disables mint button\r\n    setApproveMintButton(false);    // enables approve button\r\n  }catch(e) {alert (e); console.log(e);}\r\n}\r\n\r\n  // lending button function\r\n const handle = async () =>{ \r\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n  const signer = provider.getSigner();\r\n  const marketContract = new ethers.Contract(marketAddy, marketAbi, provider);\r\n  const marketWithSigner = marketContract.connect(signer); \r\n  try{\r\n   if (value==2)  // 2 week loan \r\n    {\r\n    await marketWithSigner.lend(NFTid, value,{value: ethers.utils.parseEther(\"0.8\")});\r\n  }\r\n  else if (value==4) // 4 week loan\r\n   {  await marketWithSigner.lend(NFTid, value,{value: ethers.utils.parseEther(\"1.6\")});\r\n  }\r\n  else { alert(\"error calculating fee\")  ; \r\n  return;}\r\n  setApproveButton(false)\r\n  setLendButton(true)  \r\n}catch(e) {alert (e); console.log(e);}\r\n}\r\n\r\n\r\n// approve Floor Lending Contract\r\nconst approveFloor = async () =>{\r\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n  const signer = provider.getSigner();\r\n  const floorContract = new ethers.Contract(floorAddy, floorAbi, provider);\r\n  const floorWithSigner = floorContract.connect(signer); \r\n  try{   \r\n    await floorWithSigner.approve(marketAddy, NFTid);\r\n    setLendButton(false);\r\n    setApproveButton(true) ;\r\n  }catch(e) {alert (e); console.log(e);}\r\n}\r\n\r\n// displays NFTs that are minted\r\n  useEffect(() => {\r\n    const updateYourCollectibles = async () => {\r\n      const collectibleUpdate = [];\r\n      for (let tokenIndex = 0; tokenIndex < balance; tokenIndex++) {\r\n        try {\r\n          \r\n          const tokenId = await readContracts.Floor101.tokenOfOwnerByIndex(address, tokenIndex);\r\n          let tokenURI = await readContracts.Floor101.tokenURI(tokenId);\r\n          const jsonManifestString = atob(tokenURI.substring(29))\r\n          try {\r\n            const jsonManifest = JSON.parse(jsonManifestString);\r\n            collectibleUpdate.push({ id: tokenId, uri: tokenURI, owner: address, ...jsonManifest });\r\n          } catch (e) {\r\n            console.log(e);\r\n          }\r\n        } catch (e) {\r\n          console.log(e);\r\n        }\r\n      }\r\n      setYourCollectibles(collectibleUpdate.reverse());\r\n    };\r\n    updateYourCollectibles();\r\n  }, [address, yourBalance]);\r\n\r\n// displays NFTs that are listed for sale\r\n  useEffect(() => {\r\n    const updateNFTSales = async () => {\r\n      const collectibleUpdate = [];\r\n \r\n      for (let tokenIndex = 0; tokenIndex < salesBalance; tokenIndex++) {\r\n        try {\r\n          const tokenId = await readContracts.Floor101.tokenOfOwnerByIndex(marketAddy, tokenIndex);\r\n          let tokenURI = await readContracts.Floor101.tokenURI(tokenId);\r\n          let prc= await readContracts.Marketplace.getPrice(tokenId); \r\n        // let seller= await readContracts.Marketplace.vaultItems[tokenId].seller;          \r\n          const jsonManifestString = atob(tokenURI.substring(29))\r\n          try {\r\n            const jsonManifest = JSON.parse(jsonManifestString);\r\n            if (prc>0)  // make sure you don't list NFTs that are in the lending contract\r\n            collectibleUpdate.push({ price: prc, id: tokenId, uri: tokenURI, owner: address,  ...jsonManifest });\r\n          } catch (e) {\r\n            console.log(e);\r\n          }\r\n        } catch (e) {\r\n          console.log(e);\r\n        }\r\n      }\r\n      setNFTSales(collectibleUpdate.reverse());\r\n    };\r\n    updateNFTSales();\r\n  }, [marketAddy, salesBalance]);\r\n  \r\n\r\n  const [NFTid, setNFTid] = useState(\"0\");\r\n  const [nftSalePrice, setNFTSalePrice] = useState(\"0\"); \r\n\r\n  // input number handler\r\n  const onChange2 = value => {\r\n    setNFTid(value);\r\n  };\r\n  // input number handler\r\n  const onChange3 = value => {\r\n    setNFTSalePrice(value);\r\n  };\r\n  //\r\n  // 🧫 DEBUG 👨🏻‍🔬\r\n  //\r\n  useEffect(() => {\r\n    if (\r\n      DEBUG &&\r\n      mainnetProvider &&\r\n      address &&\r\n      selectedChainId &&\r\n      yourLocalBalance &&\r\n      yourMainnetBalance &&\r\n      readContracts &&\r\n      writeContracts &&\r\n      mainnetContracts\r\n    ) {\r\n      console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\r\n      console.log(\"🌎 mainnetProvider\", mainnetProvider);\r\n      console.log(\"🏠 localChainId\", localChainId);\r\n      console.log(\"👩‍💼 selected address:\", address);\r\n      console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\r\n      console.log(\"📝 readContracts\", readContracts);\r\n      console.log(\"🔐 writeContracts\", writeContracts);\r\n    }\r\n  }, [\r\n    mainnetProvider,\r\n    address,\r\n    selectedChainId,\r\n    yourLocalBalance,\r\n    yourMainnetBalance,\r\n    readContracts,\r\n    writeContracts,\r\n    mainnetContracts,\r\n  ]);\r\n\r\n  let networkDisplay = \"\";\r\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\r\n    const networkSelected = NETWORK(selectedChainId);\r\n    const networkLocal = NETWORK(localChainId);\r\n    if (selectedChainId === 1337 && localChainId === 31337) {\r\n      networkDisplay = (\r\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\r\n          <Alert\r\n            message=\"⚠️ Wrong Network ID\"\r\n            description={\r\n              <div>\r\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\r\n                HardHat.\r\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\r\n              </div>\r\n            }\r\n            type=\"error\"\r\n            closable={false}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      networkDisplay = (\r\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\r\n          <Alert\r\n            message=\"⚠️ Wrong Network\"\r\n            description={\r\n              <div>\r\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\r\n                <Button  type=\"primary\"\r\n                  onClick={async () => {\r\n                    const ethereum = window.ethereum;\r\n                    const data = [\r\n                      {\r\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\r\n                        chainName: targetNetwork.name,\r\n                        nativeCurrency: targetNetwork.nativeCurrency,\r\n                        rpcUrls: [targetNetwork.rpcUrl],\r\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\r\n                      },\r\n                    ];\r\n                    console.log(\"data\", data);\r\n\r\n                    let switchTx;\r\n                    // https://docs.metamask.io/guide/rpc-api.html#other-rpc-methods\r\n                    try {\r\n                      switchTx = await ethereum.request({\r\n                        method: \"wallet_switchEthereumChain\",\r\n                        params: [{ chainId: data[0].chainId }],\r\n                      });\r\n                    } catch (switchError) {\r\n                      // not checking specific error code, because maybe we're not using MetaMask\r\n                      try {\r\n                        switchTx = await ethereum.request({\r\n                          method: \"wallet_addEthereumChain\",\r\n                          params: data,\r\n                        });\r\n                      } catch (addError) {\r\n                        // handle \"add\" error\r\n                      }\r\n                    }\r\n\r\n                    if (switchTx) {\r\n                      console.log(switchTx);\r\n                    }\r\n                  }}\r\n                >\r\n                  <b>{networkLocal && networkLocal.name}</b>\r\n                </Button>\r\n              </div>\r\n            }\r\n            type=\"error\"\r\n            closable={false}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  } else {\r\n    networkDisplay = (\r\n      <div style={{ zIndex: -1, position: \"absolute\", right: 154, top: 28, padding: 16, color: targetNetwork.color }}>\r\n        {targetNetwork.name}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const loadWeb3Modal = useCallback(async () => {\r\n    const provider = await web3Modal.connect();\r\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\r\n\r\n    provider.on(\"chainChanged\", chainId => {\r\n      console.log(`chain changed to ${chainId}! updating providers`);\r\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\r\n    });\r\n\r\n    provider.on(\"accountsChanged\", () => {\r\n      console.log(`account changed!`);\r\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\r\n    });\r\n\r\n    // Subscribe to session disconnection\r\n    provider.on(\"disconnect\", (code, reason) => {\r\n      console.log(code, reason);\r\n      logoutOfWeb3Modal();\r\n    });\r\n  }, [setInjectedProvider]);\r\n\r\n  useEffect(() => {\r\n    if (web3Modal.cachedProvider) {\r\n      loadWeb3Modal();\r\n    }\r\n  }, [loadWeb3Modal]);\r\n\r\n  const [route, setRoute] = useState();\r\n  useEffect(() => {\r\n    setRoute(window.location.pathname);\r\n  }, [setRoute]);\r\n\r\n  let faucetHint = \"\";\r\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\r\n\r\n  const [faucetClicked, setFaucetClicked] = useState(false);\r\n  if (\r\n    !faucetClicked &&\r\n    localProvider &&\r\n    localProvider._network &&\r\n    localProvider._network.chainId === 31337 &&\r\n    yourLocalBalance &&\r\n    ethers.utils.formatEther(yourLocalBalance) <= 0\r\n  ) {\r\n    faucetHint = (\r\n      <div style={{ padding: 16 }}>\r\n        <Button\r\n          type=\"primary\"\r\n          onClick={() => {\r\n            faucetTx({\r\n              to: address,\r\n              value: ethers.utils.parseEther(\".05\"),\r\n            });\r\n            setFaucetClicked(true);\r\n          }}\r\n        >\r\n          💰 Grab funds from the faucet ⛽️\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {/* ✏️ Edit the header and change the title to your project name */}\r\n      <Header />\r\n      {networkDisplay}\r\n      <BrowserRouter>\r\n        <Menu style={{ textAlign: \"center\" }} selectedKeys={[route]} mode=\"horizontal\">\r\n          <Menu.Item key=\"/\">\r\n            <Link\r\n              onClick={() => {\r\n                setRoute(\"/\");\r\n              }}\r\n              to=\"/\"\r\n            >\r\n             Mint\r\n            </Link>\r\n          </Menu.Item>\r\n\r\n          <Menu.Item key=\"/about\">\r\n            <Link\r\n              onClick={() => {\r\n                setRoute(\"/about\");\r\n              }}\r\n              to=\"/about\"\r\n            >\r\n             About\r\n            </Link>\r\n          </Menu.Item>  \r\n          <Menu.Item key=\"/market\">\r\n            <Link\r\n              onClick={() => {\r\n                setRoute(\"/market\");\r\n              }}\r\n              to=\"/market\"\r\n            >\r\n           Lend\r\n            </Link>\r\n          </Menu.Item> \r\n          <Menu.Item key=\"/repay\">\r\n            <Link\r\n              onClick={() => {\r\n                setRoute(\"/repay\");\r\n              }}\r\n              to=\"/repay\"\r\n            >\r\n           Repay\r\n            </Link>\r\n          </Menu.Item>     \r\n        </Menu>\r\n<Switch>\r\n<Route exact path=\"/\">\r\n <div style={{ width: 480, margin: \"auto\"}}>\r\n <div id=\"centerWrapper\" style={{ padding: 16 }}>\r\n <div><h2>MINT FLOOR 101 nft</h2></div>\r\n <p>NFT owned liquidity - each NFT owns an equal share of the treasury, including all money from minting. 1 NFT per wallet.\r\n </p>\r\n <p><b>NFTs Minted : </b>{ s_total_nfts && s_total_nfts.toString()}<br />\r\n <b>Available : </b>{(101 - s_total_nfts).toString()}<br />\r\n <b>Mint price : </b>$100 DAI<br />\r\n <b>MAX LTV : </b> 100%  </p> \r\n \r\n <Button type=\"primary\"  disabled={approveMintButton} shape=\"round\" onClick={() => {approveDai()}}\r\n > APPROVE</Button>{' '}\r\n <Button type=\"primary\" shape=\"round\" disabled={disableMintButton}  onClick={() => {mint()}}>MINT NFT</Button>\r\n              \r\n      <div><table width={400} id=\"cssTable\"><tr><td width={45}></td><td>\r\n<List dataSource={yourCollectibles} renderItem={item => {\r\n                    return (\r\n<List.Item>\r\n<a href={\"https://opensea.io/assets/\"+(readContracts && readContracts.Floor101 && readContracts.Floor101.address)+\"/\"+item.id} target=\"_blank\">{<img src= {item.image} class=\"center\"  />} </a>\r\n </List.Item>\r\n);}}/></td></tr></table>\r\n</div></div>\r\n<List bordered dataSource={mintEvents} renderItem={item => {\r\n                  return (\r\n                    <List.Item key={item[0] }>\r\n                      <span style={{ fontSize: 16, marginRight: 8 }}>#{item.args[1].toNumber()}</span>\r\n                      <Address address={item.args[0]} fontSize={16} /> \r\n                    </List.Item>\r\n                  );\r\n                }}\r\n              />\r\n             <Divider />\r\n          </div>\r\n          </Route>\r\n          <Route exact path=\"/debug\">\r\n\r\n <Contract\r\n            name=\"Floor101\"\r\n            price={price}\r\n            signer={userSigner}\r\n            provider={localProvider}\r\n            address={address}\r\n            blockExplorer={blockExplorer}\r\n            contractConfig={contractConfig}\r\n          />\r\n\r\n   <Contract\r\n            name=\"Marketplace\"\r\n            price={price}\r\n            signer={userSigner}\r\n            provider={localProvider}\r\n            address={address}\r\n            blockExplorer={blockExplorer}\r\n            contractConfig={contractConfig}\r\n          /> \r\n        </Route>\r\n          \r\n  <Route exact path=\"/market\">\r\n  <div style={{ width: 480, margin: \"auto\", backgroundColor: \"Off-White\", border:2}}>\r\n  <h1>Lending v1</h1>\r\n  <p>Lending available when minted out or 7 days after launch date.<br />\r\n   Lend 100% of floor value of your NFT. <br />\r\n   Lending fee of 0.8 matic (≈$1) to lend for 2 weeks and 1.6 matic for 4 weeks.<br />\r\n   Can only get liquidated by not repaying loan before end date.<br />\r\n   Liquidated NFTs will be resold through our marketplace contract for above the floor price or permanently burned.</p>\r\n   <h1>Lending Instructions</h1>\r\n   <p>Lending is currently fixed price, you will receive $100 Dai<br />\r\n\r\n   Enter your NFT ID, select loan length (2 or 4 weeks) and click the approve button, once the transaction is approved \r\n   click on the lend button and the floor price of $100 dai will be sent to your wallet.\r\n  \r\n   Available Dai in lending contract ${ethers.utils.formatEther(daiBalance)} </p>\r\n\r\n   <Button type=\"primary\" shape=\"round\" hidden onClick={getDaiBalance()}>DAI BALANCE</Button>\r\n\r\n <InputNumber min={1} max={101} placeholder={\"NFT ID\"} onChange={onChange2} style={{width: 200 }} /><br />\r\n <Radio.Group onChange={onChange} value={value}>\r\n      <Radio value={2}>2 weeks</Radio>\r\n      <Radio value={4}>4 weeks</Radio>\r\n    </Radio.Group><br />\r\n <Button type=\"primary\" shape=\"round\" disabled={approveButton} onClick={approveFloor}>APPROVE</Button> {' '}\r\n <Button type=\"primary\" shape=\"round\" disabled={lendButton} onClick={handle}>LEND</Button><br />\r\n  <List dataSource={lendEvent}   \r\n                renderItem={item => {\r\n                  return (\r\n                    <List.Item key={item[0] }>\r\n                     <p><h4>Loan Details</h4>\r\n                     <b>NFT ID # </b>{item.args[0].toNumber()}<br />\r\n                     <b>Loan amount : </b>${ ethers.utils.formatEther( item.args[2] ) }<br />\r\n                     <b>Due Date : </b> { getDate(item.args[4])   }{dat }<br />\r\n                     <b>Address : </b> {item.args[1]}  </p>\r\n                    </List.Item>\r\n                  );\r\n                }}\r\n              />\r\n <Divider />\r\n</div>\r\n\r\n</Route>\r\n<Route exact path=\"/repay\">\r\n <div style={{ width: 460, margin: \"auto\", backgroundColor: \"Off-White\", border:2}}>\r\n <h1>Repay Loan</h1>\r\n <p> Enter the number of your NFT, click approve and then Repay Loan, \r\n you will need to have at least $100 dai in your account to repay the loan<br />\r\n Loans for {address} are NFTID {hasLoan && hasLoan.toString() }</p>\r\n <InputNumber min={1} max={101} placeholder={\"NFT ID\"} onChange={onChange2} style={{width: 200, marginBottom: 10 }} /><br />\r\n <Button type=\"primary\" shape=\"round\" onClick={() => {approveDai2(marketAddy)}}>APPROVE </Button>{' '}\r\n <Button type=\"primary\" shape=\"round\" onClick={() =>{tx( writeContracts.Marketplace.repayLoan(NFTid))}}>\r\n REPAY LOAN</Button>\r\n<br />\r\n<List dataSource={repayLoanEvent}   \r\n                renderItem={item => {\r\n                  return (\r\n                    <List.Item key={item[0] }>\r\n                      <span style={{ fontSize: 16, marginRight: 8 }}><b>Loan for NFTID #{item.args[0].toNumber()} has been repaid</b></span>\r\n                      <span style={{ fontSize: 16, marginRight: 8 }}>Repayment amount ${ ethers.utils.formatEther( item.args[2] ) }</span><br />\r\n                      Address {item.args[1]}  \r\n                    </List.Item>\r\n                  );\r\n                }}\r\n              />\r\n\r\n     </div>\r\n    </Route>\r\n <Route exact path=\"/about\">\r\n <div style={{ width: 520, margin: \"auto\", backgroundColor: \"Off-White\", border:2}}>\r\n <h1>About Floor 101</h1> \r\n <p><b>Supply : </b>101 NFTs<br />\r\n    <b>Price : </b>$100 DAI<br />\r\n    <b>Limit : </b>1 per wallet<br />\r\n    <b>Lend : </b>100% of your investment less 0.8 matic fee<br />\r\n    <b>Lending : </b> Available 7 days after first mint or earlier if minted out. Lending contracts are already built and deployed.<br /><br />\r\n    Floor 101 is an SVG NFT which lives on the blockchain, not on a Pinata server. SVGs are dynamic (easily updated). NFT advertising?\r\n    Dynamic NFTs are just in their infancy and we will be pushing the boundaries of innovation with them \r\n    in future releases.\r\n    </p>\r\n   <h1>100% LTV? HOW?</h1> \r\n    <p>NFT owned liquidity (NOL) Every NFT owns an equal share of the treasury, which means we can safely\r\n    lend 100% of the value of every NFT. The $1 matic lending fee means the protocol is earning 26% APR on its NFT loans.\r\n    The floor price should be UP ONLY as revenues get added to it. Want your money back, take out a loan and let it get liquidated.</p>\r\n   <h1>Future Revenues</h1>\r\n     <p>Listing fees on our NFT marketplace<br />\r\n     Extending lending to other NFT projects<br />\r\n     Loan fees and liquidations<br />\r\n     Stablecoin investments<br />\r\n     Selling liquidated NFTs , Sales Royalties<br />\r\n     Future products \r\n     </p>\r\n     <h1>Utility</h1>\r\n     <p>Whitelisted to future NFT releases<br />\r\n    Lend 100% of floor(treasury) value of NFT - the treasury should increase over time.</p>        \r\n     <h1>Future Revenues</h1>\r\n     <p>Listing fees on our NFT marketplace<br />\r\n     Extending lending to other NFT projects<br />\r\n     Future : NFT Stablecoin / Remitance, Unstablecoin ...... </p>\r\n     <h1>Developer and Contracts</h1>\r\n     <p>Developed by <a href=\"https://twitter.com/pcashpeso\">JollibΞΞ</a> using <a href=\"https://speedrunethereum.com/\">Scaffold ETH</a><br />\r\n     <TwitterOutlined style={{fontSize: 20} } /><a href=\"https://twitter.com/NFTOL500\">FLOOR 101 Twitter</a> <br />\r\n     Contracts : <a href=\"https://polygonscan.com/address/0xdD8E426797cAb9e3Cd95Dd93C022296486772e02\">Floor101</a><br />\r\n     Contracts : <a href=\"https://polygonscan.com/address/0x434c0F75d19C014D2816c85762d5FDB276556F61\">Marketplace</a><br />  <br />   \r\n     <Link onClick={() => {setRoute(\"/debug\");}}to=\"/debug\">_</Link>\r\n     </p>\r\n\r\n     </div>\r\n    </Route>\r\n <Route exact path=\"/forsale\">\r\n <div style={{ width: 480, margin: \"auto\", backgroundColor: \"Off-White\", border:2}}>\r\n\r\n<h2>MarketPlace</h2><p>Enter the ID of your NFT and the price in DAI that you want to sell it for. There is a 0.8 Matic listing fee to sell your NFT, you will receive 100% of the sale price.</p>\r\n<InputNumber min={1} max={151} placeholder={\"NFT ID\"} onChange={onChange2} style={{ width: 200 }} /><br />\r\n<InputNumber min={1} placeholder={\"Sale Price in Dai/USD\"} onChange={onChange3} style={{ width: 200,margin:5 }} /><br />\r\n<Button type=\"primary\" shape=\"round\"  onClick={() =>{tx( writeContracts.Floor101.approve(readContracts.Marketplace.address, NFTid));}}> APPROVE </Button>{' '}\r\n<Button type=\"primary\" shape=\"round\"  onClick={() =>{tx( writeContracts.Marketplace.listSale(NFTid, ethers.utils.parseEther(nftSalePrice + \"\") ,{value: ethers.utils.parseEther(\"0.0006\")}));}}>\r\nSELL NFT</Button>\r\n\r\n<h2>For Sale</h2>\r\n<div style={{ width: 480, margin: \"auto\", backgroundColor: \"Off-White\", border:2}}>\r\n<List dataSource={nftSales} renderItem={item => {\r\n                    const id = item.id.toNumber();\r\n                    return (\r\n<List.Item>\r\n<img src= {item.image} /><br /> \r\nNFT ID : {id}<br /> \r\nSALE Price : { ethers.utils.formatEther( item.price ) } DAI <br />\r\n<Button type=\"primary\" shape=\"round\" onClick={() => {tx( writeContracts.Dai.approve(readContracts.Marketplace.address,  ethers.utils.parseEther(item.price + \"\")) );}}> APPROVE </Button>{' '}\r\n<Button type=\"primary\" shape=\"round\" onClick={() =>{tx( writeContracts.Marketplace.buyNft(id));}}>\r\nBuy NFT</Button>\r\n</List.Item>\r\n);}}/>\r\n</div>\r\n\r\n<List bordered dataSource={listSaleEvents}   \r\n                renderItem={item => {\r\n                  return (\r\n                    <List.Item key={item[0] }>\r\n                      <span style={{ fontSize: 16, marginRight: 8 }}>NFTID #{item.args[1].toNumber()}</span>\r\n                      <span style={{ fontSize: 16, marginRight: 8 }}>Price ${ ethers.utils.formatEther( item.args[2] ) }</span><br />\r\n                      Address {item.args[0]}  \r\n                    </List.Item>\r\n                  );\r\n                }}\r\n              />\r\n\r\n<div>BUY NFT EVENT</div>\r\n<List bordered dataSource={buyNftEvent}   \r\n                renderItem={item => {\r\n                  return (\r\n                    <List.Item key={item[0] }>\r\n                      <span style={{ fontSize: 16, marginRight: 8 }}>NFTID #{item.args[0].toNumber()}</span>\r\n                      <span style={{ fontSize: 16, marginRight: 8 }}>Price ${ ethers.utils.formatEther( item.args[2] ) }</span><br />\r\n                      Address {item.args[1]}  \r\n                    </List.Item>\r\n                  );\r\n                }}\r\n              />\r\n</div>           \r\n </Route>\r\n        </Switch>\r\n      </BrowserRouter>\r\n\r\n      <ThemeSwitch />\r\n\r\n      {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\r\n      <div style={{ position: \"fixed\", textAlign: \"right\", right: 0, top: 0, padding: 5 }}>\r\n        <Account\r\n          address={address}\r\n          localProvider={localProvider}\r\n          userSigner={userSigner}\r\n          mainnetProvider={mainnetProvider}\r\n          price={price}\r\n          web3Modal={web3Modal}\r\n          loadWeb3Modal={loadWeb3Modal}\r\n          logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n          blockExplorer={blockExplorer}\r\n        />\r\n\r\n      </div>\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nconst themes = {\r\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\r\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\r\n};\r\n\r\nconst prevTheme = window.localStorage.getItem(\"theme\");\r\n\r\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: subgraphUri,\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"light\"}>\r\n      <App subgraphUri={subgraphUri} />\r\n    </ThemeSwitcherProvider>\r\n  </ApolloProvider>,\r\n  document.getElementById(\"root\"),\r\n);\r\n","const ERC20ABI = [\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"name\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        name: \"_spender\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"approve\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"totalSupply\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        name: \"_from\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_to\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"transferFrom\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"decimals\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"uint8\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        name: \"_owner\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"balanceOf\",\r\n    outputs: [\r\n      {\r\n        name: \"balance\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"symbol\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        name: \"_to\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"transfer\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        name: \"_owner\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_spender\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"allowance\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    payable: true,\r\n    stateMutability: \"payable\",\r\n    type: \"fallback\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: \"owner\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: \"spender\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: \"value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Approval\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: \"from\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: \"to\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: \"value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Transfer\",\r\n    type: \"event\",\r\n  },\r\n];\r\nconst DAIABI = [\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"chainId_\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"constructor\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"src\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"guy\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Approval\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: true,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"bytes4\",\r\n        name: \"sig\",\r\n        type: \"bytes4\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"bytes32\",\r\n        name: \"arg1\",\r\n        type: \"bytes32\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"bytes32\",\r\n        name: \"arg2\",\r\n        type: \"bytes32\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: \"bytes\",\r\n        name: \"data\",\r\n        type: \"bytes\",\r\n      },\r\n    ],\r\n    name: \"LogNote\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"src\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"dst\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Transfer\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"DOMAIN_SEPARATOR\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bytes32\",\r\n        name: \"\",\r\n        type: \"bytes32\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"PERMIT_TYPEHASH\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bytes32\",\r\n        name: \"\",\r\n        type: \"bytes32\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"allowance\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"approve\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bool\",\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"balanceOf\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"burn\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"decimals\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint8\",\r\n        name: \"\",\r\n        type: \"uint8\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"guy\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"deny\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"mint\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"src\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"address\",\r\n        name: \"dst\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"move\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"name\",\r\n    outputs: [\r\n      {\r\n        internalType: \"string\",\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"nonces\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"holder\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"address\",\r\n        name: \"spender\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"nonce\",\r\n        type: \"uint256\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"expiry\",\r\n        type: \"uint256\",\r\n      },\r\n      {\r\n        internalType: \"bool\",\r\n        name: \"allowed\",\r\n        type: \"bool\",\r\n      },\r\n      {\r\n        internalType: \"uint8\",\r\n        name: \"v\",\r\n        type: \"uint8\",\r\n      },\r\n      {\r\n        internalType: \"bytes32\",\r\n        name: \"r\",\r\n        type: \"bytes32\",\r\n      },\r\n      {\r\n        internalType: \"bytes32\",\r\n        name: \"s\",\r\n        type: \"bytes32\",\r\n      },\r\n    ],\r\n    name: \"permit\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"pull\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"push\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"guy\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"rely\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"symbol\",\r\n    outputs: [\r\n      {\r\n        internalType: \"string\",\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"totalSupply\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"dst\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"transfer\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bool\",\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"src\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"address\",\r\n        name: \"dst\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"transferFrom\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bool\",\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"version\",\r\n    outputs: [\r\n      {\r\n        internalType: \"string\",\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"wards\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n];\r\n\r\n// Mainnet DAI, Optimism and Arbitrium Rollup Contracts with local addresses\r\nmodule.exports = {\r\n  1: {\r\n    contracts: {\r\n      DAI: {\r\n        address: \"0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063\",\r\n        abi: DAIABI,\r\n      },\r\n      UNI: {\r\n        address: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\r\n        abi: ERC20ABI,\r\n      },\r\n    },\r\n  },\r\n};\r\n","// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\r\nexport const INFURA_ID = \"460f40a260564ac4a4f4b3fffb032dad\";\r\n\r\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\r\nexport const ETHERSCAN_KEY = \"DNXJA8RX2Q3VZ4URQIWP7Z68CJXQZSC6AW\";\r\n\r\n// BLOCKNATIVE ID FOR Notify.js:\r\nexport const BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\r\n\r\nexport const ALCHEMY_KEY = \"oKxs-03sij-U_N0iOlrSsZFr29-IqbuF\";\r\n\r\nexport const NETWORKS = {\r\n  localhost: {\r\n    name: \"localhost\",\r\n    color: \"#666666\",\r\n    chainId: 31337,\r\n    blockExplorer: \"\",\r\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\",\r\n  },\r\n  mainnet: {\r\n    name: \"mainnet\",\r\n    color: \"#ff8b9e\",\r\n    chainId: 1,\r\n    rpcUrl: `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`,\r\n    blockExplorer: \"https://etherscan.io/\",\r\n  },\r\n  goerli: {\r\n    name: \"goerli\",\r\n    color: \"#0975F6\",\r\n    chainId: 5,\r\n    faucet: \"https://goerli-faucet.slock.it/\",\r\n    blockExplorer: \"https://goerli.etherscan.io/\",\r\n    rpcUrl: `https://eth-goerli.g.alchemy.com/v2/iFxSIW19bCIO92d4cpQ2ytkyihGwYGf6`,\r\n  },\r\n  polygon: {\r\n    name: \"matic\",\r\n    color: \"#2bbdf7\",\r\n    chainId: 137,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://polygon-mainnet.g.alchemy.com/v2/yLWScHSkzCG2R-CTJwDr3ZgHu5ij3Mis\",\r\n    faucet: \"https://faucet.matic.network/\",\r\n    blockExplorer: \"https://explorer-mainnet.maticvigil.com//\",\r\n  },\r\n  mumbai: {\r\n    name: \"mumbai\",\r\n    color: \"#92D9FA\",\r\n    chainId: 80001,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\r\n    faucet: \"https://faucet.matic.network/\",\r\n    blockExplorer: \"https://mumbai-explorer.matic.today/\",\r\n  },\r\n  localArbitrum: {\r\n    name: \"localArbitrum\",\r\n    color: \"#50a0ea\",\r\n    chainId: 153869338190755,\r\n    blockExplorer: \"\",\r\n    rpcUrl: `http://localhost:8547`,\r\n  },\r\n  localArbitrumL1: {\r\n    name: \"localArbitrumL1\",\r\n    color: \"#50a0ea\",\r\n    chainId: 44010,\r\n    blockExplorer: \"\",\r\n    rpcUrl: `http://localhost:7545`,\r\n  },\r\n  rinkebyArbitrum: {\r\n    name: \"Arbitrum Testnet\",\r\n    color: \"#50a0ea\",\r\n    chainId: 421611,\r\n    blockExplorer: \"https://rinkeby-explorer.arbitrum.io/#/\",\r\n    rpcUrl: `https://rinkeby.arbitrum.io/rpc`,\r\n  },\r\n  arbitrum: {\r\n    name: \"Arbitrum\",\r\n    color: \"#50a0ea\",\r\n    chainId: 42161,\r\n    blockExplorer: \"https://explorer.arbitrum.io/#/\",\r\n    rpcUrl: `https://arb1.arbitrum.io/rpc`,\r\n    gasPrice: 0,\r\n  },\r\n\r\n};\r\n\r\nexport const NETWORK = chainId => {\r\n  for (const n in NETWORKS) {\r\n    if (NETWORKS[n].chainId === chainId) {\r\n      return NETWORKS[n];\r\n    }\r\n  }\r\n};\r\n"],"sourceRoot":""}