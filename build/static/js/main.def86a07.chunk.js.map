{"version":3,"sources":["constants.js","components/Address.jsx","helpers/Transactor.js","helpers/Web3ModalSetup.js","helpers/ipfs.js","helpers/rpc.js","components/Balance.jsx","components/Blockie.jsx","components/AddressInput.jsx","components/EtherInput.jsx","components/WalletImport.jsx","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/FunctionForm.jsx","components/Contract/utils.jsx","components/Faucet.jsx","components/GasGauge.jsx","components/Header.jsx","components/Ramp.jsx","hooks/useStaticJsonRPC.js","helpers/loadAppContracts.js","components/Swap.jsx","components/ThemeSwitch.jsx","components/Timeline.jsx","components/L2Bridge.jsx","components/NetworkDisplay.jsx","components/FaucetHint.jsx","top.jpg","views/Home.jsx","views/Hints.jsx","views/Subgraph.jsx","App.jsx","hooks/GasPrice.js","index.jsx","contracts/external_contracts.js"],"names":["INFURA_ID","process","REACT_APP_INFURA_KEY","ALCHEMY_KEY","REACT_APP_ALCHEMY_KEY","ETHERSCAN_KEY","REACT_APP_ETHERSCAN_API_KEY","BLOCKNATIVE_DAPPID","REACT_APP_BLOCKNATIVE_DAPP_ID","RPC_POLL_TIME","REACT_APP_HARDHAT_HOST","NETWORKS","localhost","name","color","chainId","blockExplorer","rpcUrl","REACT_APP_CODESPACES","window","location","hostname","replace","global","mainnet","goerli","faucet","sepolia","gnosis","price","gasPrice","zksyncalpha","chiado","polygon","mumbai","localOptimismL1","localOptimism","goerliOptimism","optimism","goerliArbitrum","arbitrum","devnetArbitrum","localAvalanche","fujiAvalanche","mainnetAvalanche","testnetHarmony","mainnetHarmony","fantom","testnetFantom","moonbeam","moonriver","moonbaseAlpha","moonbeamDevNode","NETWORK","n","Text","Typography","Address","props","currentTheme","useThemeSwitcher","address","value","ens","useLookupAddress","ensProvider","ensSplit","split","validEnsCheck","length","etherscanLink","blockExplorerLink","displayAddress","substr","size","minimized","style","verticalAlign","target","href","rel","seed","toLowerCase","scale","fontSize","paddingLeft","onChange","editable","copyable","text","avatar","paragraph","rows","ethers","require","callbacks","Transactor","providerOrSigner","etherscan","tx","callback","a","Signer","isSigner","provider","signer","getNetwork","network","_isProvider","getSigner","console","log","notify","options","dappId","system","networkId","transactionHandler","txInformation","possibleFunction","transaction","hash","Notify","etherscanNetwork","etherscanTxUrl","Promise","result","utils","parseUnits","gasLimit","hexlify","sendTransaction","indexOf","emitter","on","onclick","open","notification","info","message","description","placement","txResult","listeningInterval","setInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","clearInterval","wait","data","error","JSON","parse","stringify","body","obj","errorObj","e","walletLinkProvider","WalletLink","appName","makeWeb3Provider","web3ModalSetup","SafeAppWeb3Modal","cacheProvider","theme","providerOptions","walletconnect","package","WalletConnectProvider","bridge","infuraId","rpc","portis","display","logo","Portis","id","fortmatic","Fortmatic","key","connector","_options","enable","authereum","Authereum","create","host","port","protocol","getRPCPollTime","_network","Balance","useState","dollarMode","setDollarMode","localProviderPollingTime","balance","useBalance","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","dollarMultiplier","padding","cursor","onClick","Blockie","isENS","endsWith","AddressInput","setValue","scan","setScan","currentValue","updateAddress","useCallback","newValue","resolveName","possibleAddress","zIndex","position","left","top","width","delay","resolution","onError","onScan","possibleNewValue","lastIndexOf","autoComplete","autoFocus","placeholder","prefix","isAddress","addonAfter","marginTop","count","CameraOutlined","QrcodeOutlined","EtherInput","mode","setMode","setDisplay","useEffect","usdValue","ethValue","WalletImport","setShowImport","importMnemonic","setImportMnemonic","importMnemonicIndex","setImportMnemonicIndex","password","setPassword","importPrivatekey","setImportPrivatekey","importAddress","setImportAddress","ethersSeed","mnemonicToSeed","ethersHDNode","HDNode","fromSeed","fullPath","ethersDerivedHDNode","derivePath","ethersPrivateKey","privateKey","calculatePK","officialEthersWallet","Wallet","calculateAddress","opacity","Password","disabled","height","float","currentPrivateKey","localStorage","getItem","setItem","Date","now","trim","reload","marginRight","signerAddress","setSignerAddress","getAddress","newAddress","receiveButton","privateKeyButton","selectedAddress","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","showImport","providerSend","title","WalletOutlined","rotate","showImportButton","level","includeMargin","renderAs","imageSettings","excavate","KeyOutlined","wallet","extraPkDisplayAdded","extraPkDisplay","push","backgroundStyle","pastpk","pastwallet","fullLink","el","document","createElement","appendChild","select","execCommand","removeChild","success","createRandom","_signingKey","inputStyle","visible","paddingRight","onOk","onCancel","footer","type","loading","parseEther","to","SendOutlined","Account","accountButtonInfo","userSigner","localProvider","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","isContract","cachedProvider","action","marginLeft","shape","constants","BigNumber","Faucet","blockie","setAddress","faucetAddress","setFaucetAddress","listAccounts","_faucetAddress","getFaucetAddress","suffix","icon","GasGauge","role","parseInt","Title","Header","link","subTitle","justifyContent","flexDirection","flex","alignItems","margin","textAlign","children","defaultProps","Ramp","modalUp","setModalUp","allFaucets","networks","DollarCircleOutlined","RampInstantSDK","hostAppName","hostLogoUrl","swapAmount","swapAsset","userAddress","event","show","createProvider","url","p","providers","StaticJsonRpcProvider","ready","useStaticJsonRPC","urlArray","setProvider","handleProviders","race","map","_p","Select","Option","Swap","ThemeSwitcher","isDarkMode","setIsDarkMode","switcher","themes","className","right","bottom","checked","isChecked","dark","light","NetworkDisplay","NETWORKCHECK","localChainId","selectedChainId","targetNetwork","USE_NETWORK_SELECTOR","networkDisplay","networkSelected","networkLocal","closable","ethereum","toString","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","request","method","params","switchTx","FaucetHint","faucetClicked","setFaucetClicked","yourLocalBalance","faucetTx","useGasPrice","faucetHint","Home","src","hat","Subgraph","settings","apiKey","Network","ARB_MAINNET","alchemy","Alchemy","initialNetwork","DEBUG","Web3ModalSetup","App","networkOptions","injectedProvider","setInjectedProvider","selectedNetwork","useLocation","yourCollectibles2","setYourCollectibles2","setMaxLoanString","collectionNumber","setCollectionNumber","NFTid","setNFTid","changeLoan","setLoanAmount","REACT_APP_PROVIDER","mainnetProviderPollingTime","clearCachedProvider","disconnect","setTimeout","useExchangeEthPrice","speed","setGasPrice","loadGasPrice","hasOwnProperty","axios","get","then","response","newGasPrice","catch","usePoller","useUserProviderAndSigner","yourMainnetBalance","contractConfig","deployedContracts","externalContracts","readContracts","useContractLoader","writeContracts","mainnetContracts","ethBalance","loanDays","setNFTDays","loanAmount","updateYourCollectibles2","counter","nft","getNftsForOwner","nfts","totalCount","alert","nftList","collectibleUpdate","contract","tokenId","rawMetadata","image","addr","owner","requestProvider","Web3Provider","code","reason","isSafeApp","checkSafeApp","repayLoanEvent","useEventListener","changeDuration","getLoans","str","FloorLendingV2","getMappingLength","balance2","i","getLoanID","tokenURI","getDueDate","due","concat","getDate","setDisplayLoans","handleClick","marketContract","Contract","berryAbi","marketWithSigner","connect","approve","dt","toLocaleString","lend","useContractReader","toNumber","displayLoans","repayFLOOR","calculateBorrowFee","repayAmount","repayLoan","faucetAvailable","connection","useBurner","lte","from","selectedKeys","pathname","Item","exact","path","defaultValue","label","dataSource","renderItem","item","class","min","max","step","backgroundColor","border","marginBottom","args","align","gutter","span","prevTheme","subgraphUri","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","themeMap","defaultTheme","getElementById","module","exports","contracts","DAI","abi","inputs","internalType","payable","stateMutability","anonymous","indexed","constant","outputs","UNI"],"mappings":"mhBACO,IAAMA,EAAS,UAAGC,oIAAYC,4BAAf,QAAuC,mCAEhDC,EAAW,UAAGF,oIAAYG,6BAAf,QAAwC,mCAGnDC,EAAa,UAAGJ,oIAAYK,mCAAf,QAA8C,qCAG3DC,EAAkB,UAAGN,oIAAYO,qCAAf,QAAgD,uCAWlEC,GARY,EAAGR,oIAAYS,uBAQX,KAMhBC,EAAW,CACtBC,UAAW,CACTC,KAAM,YACNC,MAAO,UACPC,QAAS,MACTC,cAAe,GACfC,OAVgBhB,oIAAYiB,qBAAZ,kBACLC,OAAOC,SAASC,SAASC,QAAQ,OAAQ,SACpD,WAAaC,EAAOJ,OAASA,OAAOC,SAASC,SAAW,aAAe,SAUzEG,QAAS,CACPX,KAAM,UACNC,MAAO,UACPC,QAAS,EACTE,OAAO,gCAAD,OAAkCjB,GACxCgB,cAAe,yBAEjBS,OAAQ,CACNZ,KAAM,SACNC,MAAO,UACPC,QAAS,EACTW,OAAQ,kCACRV,cAAe,+BACfC,OAAO,+BAAD,OAAiCjB,IAEzC2B,QAAS,CACPd,KAAM,UACNC,MAAO,UACPC,QAAS,SACTW,OAAQ,8BACRV,cAAe,gCACfC,OAAO,gCAAD,OAAkCjB,IAE1C4B,OAAQ,CACNf,KAAM,SACNC,MAAO,UACPC,QAAS,IACTc,MAAO,EACPC,SAAU,IACVb,OAAQ,8BACRS,OAAQ,2BACRV,cAAe,yBAEjBe,YAAa,CACXlB,KAAM,cACNC,MAAO,UACPC,QAAS,IACTE,OAAQ,qCACRD,cAAe,qCACfc,SAAU,KAEZE,OAAQ,CACNnB,KAAM,SACNC,MAAO,UACPC,QAAS,MACTc,MAAO,EACPC,SAAU,IACVb,OAAQ,8BACRS,OAAQ,2BACRV,cAAe,sCAEjBiB,QAAS,CACPpB,KAAM,UACNC,MAAO,UACPC,QAAS,IACTc,MAAO,EACPC,SAAU,IACVb,OAAQ,2BACRD,cAAe,4BAEjBkB,OAAQ,CACNrB,KAAM,SACNC,MAAO,UACPC,QAAS,MACTc,MAAO,EACPC,SAAU,IACVb,OAAQ,oCACRS,OAAQ,qCACRV,cAAe,mCAEjBmB,gBAAiB,CACftB,KAAM,kBACNC,MAAO,UACPC,QAAS,MACTC,cAAe,GACfC,OAAQ,WAAaM,EAAOJ,OAASA,OAAOC,SAASC,SAAW,aAAe,SAEjFe,cAAe,CACbvB,KAAM,gBACNC,MAAO,UACPC,QAAS,IACTC,cAAe,GACfC,OAAQ,WAAaM,EAAOJ,OAASA,OAAOC,SAASC,SAAW,aAAe,QAC/ES,SAAU,GAEZO,eAAgB,CACdxB,KAAM,iBACNC,MAAO,UACPC,QAAS,IACTC,cAAe,sBACfC,OAAO,8BACPa,SAAU,GAEZQ,SAAU,CACRzB,KAAM,WACNC,MAAO,UACPC,QAAS,GACTC,cAAe,mCACfC,OAAO,+BAETsB,eAAgB,CACd1B,KAAM,iBACNC,MAAO,UACPC,QAAS,OACTC,cAAe,6CACfC,OAAQ,0CAEVuB,SAAU,CACR3B,KAAM,WACNC,MAAO,UACPC,QAAS,MACTC,cAAe,uBACfC,OAAQ,gCAEVwB,eAAgB,CACd5B,KAAM,iBACNC,MAAO,UACPC,QAAS,OACTC,cAAe,6CACfC,OAAQ,wCAEVyB,eAAgB,CACd7B,KAAM,iBACNC,MAAO,UACPC,QAAS,MACTC,cAAe,GACfC,OAAO,qCACPa,SAAU,OAEZa,cAAe,CACb9B,KAAM,gBACNC,MAAO,UACPC,QAAS,MACTC,cAAe,6CACfC,OAAO,6CACPa,SAAU,OAEZc,iBAAkB,CAChB/B,KAAM,mBACNC,MAAO,UACPC,QAAS,MACTC,cAAe,wCACfC,OAAO,wCACPa,SAAU,OAEZe,eAAgB,CACdhC,KAAM,iBACNC,MAAO,UACPC,QAAS,QACTC,cAAe,6BACfC,OAAO,2BACPa,SAAU,KAEZgB,eAAgB,CACdjC,KAAM,iBACNC,MAAO,UACPC,QAAS,QACTC,cAAe,gCACfC,OAAO,0BACPa,SAAU,KAEZiB,OAAQ,CACNlC,KAAM,SACNC,MAAO,UACPC,QAAS,IACTC,cAAe,uBACfC,OAAO,gCACPa,SAAU,KAEZkB,cAAe,CACbnC,KAAM,gBACNC,MAAO,UACPC,QAAS,KACTC,cAAe,+BACfC,OAAO,qCACPa,SAAU,IACVJ,OAAQ,kCAEVuB,SAAU,CACRpC,KAAM,WACNC,MAAO,UACPC,QAAS,KACTC,cAAe,sBACfC,OAAQ,oCAEViC,UAAW,CACTrC,KAAM,YACNC,MAAO,UACPC,QAAS,KACTC,cAAe,iCACfC,OAAQ,8CAEVkC,cAAe,CACbtC,KAAM,gBACNC,MAAO,UACPC,QAAS,KACTC,cAAe,gCACfC,OAAQ,4CACRS,OAAQ,iCAEV0B,gBAAiB,CACfvC,KAAM,kBACNC,MAAO,UACPC,QAAS,KACTC,cAAe,yCACfC,OAAQ,0BAICoC,EAAU,SAAAtC,GACrB,IAAK,IAAMuC,KAAK3C,EACd,GAAIA,EAAS2C,GAAGvC,UAAYA,EAC1B,OAAOJ,EAAS2C,M,mtBC9OdC,EAASC,IAATD,KA2BO,SAASE,EAAQC,GAC9B,IAAQC,EAAiBC,cAAjBD,aACFE,EAAUH,EAAMI,OAASJ,EAAMG,QAC/BE,EAAMC,YAAiBN,EAAMO,YAAaJ,GAC1CK,EAAWH,GAAOA,EAAII,MAAM,KAC5BC,EAAgBF,GAA8C,QAAlCA,EAASA,EAASG,OAAS,GACvDC,EARkB,SAACT,EAAS7C,GAAV,gBAA+BA,GAAiB,wBAAhD,mBAAkF6C,GAQpFU,CAAkBV,EAASH,EAAM1C,eACnDwD,GAAwB,OAAPX,QAAO,IAAPA,OAAA,EAAAA,EAASY,OAAO,EAAG,IAAK,OAAxB,OAAgCZ,QAAhC,IAAgCA,OAAhC,EAAgCA,EAASY,QAAQ,IAUtE,OARIL,EACFI,EAAiBT,EACO,UAAfL,EAAMgB,KACfF,GAAkB,MAAQX,EAAQY,QAAQ,GAClB,SAAff,EAAMgB,OACfF,EAAiBX,GAGdA,EAQDH,EAAMiB,UAEN,sBAAMC,MAAO,CAAEC,cAAe,UAA9B,SACE,mBACED,MAAO,CAAE9D,MAAwB,UAAjB6C,EAA2B,UAAY,QACvDmB,OAAO,SACPC,KAAMT,EACNU,IAAI,sBAJN,SAME,cAAC,IAAD,CAAUC,KAAMpB,EAAQqB,cAAeR,KAAM,EAAGS,MAAO,QAO7D,iCACE,sBAAMP,MAAO,CAAEC,cAAe,UAA9B,SACE,cAAC,IAAD,CAAUI,KAAMpB,EAAQqB,cAAeR,KAAM,EAAGS,MAAOzB,EAAM0B,SAAW1B,EAAM0B,SAAW,EAAI,MAE/F,sBAAMR,MAAO,CAAEC,cAAe,SAAUQ,YAAa,EAAGD,SAAU1B,EAAM0B,SAAW1B,EAAM0B,SAAW,IAApG,SACG1B,EAAM4B,SACL,cAAC/B,EAAD,CAAMgC,SAAU,CAAED,SAAU5B,EAAM4B,UAAYE,SAAU,CAAEC,KAAM5B,GAAhE,SACE,mBACEe,MAAO,CAAE9D,MAAwB,UAAjB6C,EAA2B,UAAY,QACvDmB,OAAO,SACPC,KAAMT,EACNU,IAAI,sBAJN,SAMGR,MAIL,cAACjB,EAAD,CAAMiC,SAAU,CAAEC,KAAM5B,GAAxB,SACE,mBACEe,MAAO,CAAE9D,MAAwB,UAAjB6C,EAA2B,UAAY,QACvDmB,OAAO,SACPC,KAAMT,EACNU,IAAI,sBAJN,SAMGR,WA9CT,+BACE,cAAC,IAAD,CAAUkB,QAAM,EAACC,UAAW,CAAEC,KAAM,O,wCCnDpCC,EAAWC,EAAQ,IAAnBD,OAKFE,EAAY,GAIH,SAASC,EAAWC,EAAkBnE,EAAUoE,GAC7D,GAAgC,qBAArBD,EAET,8CAAO,WAAOE,EAAIC,GAAX,yCAAAC,EAAA,0DAI4C,IAA7CR,EAAOS,OAAOC,SAASN,GAJtB,oBAKHO,EAAWP,EAAiBO,SAC5BC,EAASR,EANN,KAOOA,EAAiBO,UAPxB,qCAO2CP,EAAiBO,SAASE,aAPrE,0BAOHC,EAPG,iCAQMV,EAAiBW,YARvB,wBASHJ,EAAWP,EACXQ,EAASR,EAAiBY,YAVvB,UAWaZ,EAAiBS,aAX9B,QAWHC,EAXG,kBAcLG,QAAQC,IAAI,UAAWJ,GACT,KACVK,EAAS,KACbC,EAAU,CACRC,OAAQ3G,IACR4G,OAAQ,WACRC,UAAWT,EAAQ5F,QAEnBsG,mBAAoB,SAAAC,GACPR,QAAQC,IAAI,YAAaO,GACpC,IAAMC,EAAmBxB,EAAUuB,EAAcE,YAAYC,MAC7B,oBAArBF,GACTA,EAAiBD,EAAcE,eAKrCR,EAASU,YAAOT,GAEZU,EAAmB,GACnBhB,EAAQ9F,MAAQ8F,EAAQ5F,QAAU,IACpC4G,EAAmBhB,EAAQ9F,KAAO,KAGhC+G,EAAiB,WAAaD,EAAmB,mBAC7B,MAApBhB,EAAQ5F,UACV6G,EAAiB,uCAxCd,YA6CCzB,aAAc0B,SA7Cf,wBA8CUf,QAAQC,IAAI,cAAeZ,GA9CrC,UA+CcA,EA/Cd,QA+CD2B,EA/CC,sCAiDI3B,EAAGrE,WACNqE,EAAGrE,SAAWA,GAAY+D,EAAOkC,MAAMC,WAAW,MAAO,SAEtD7B,EAAG8B,WACN9B,EAAG8B,SAAWpC,EAAOkC,MAAMG,QAAQ,OAE1BpB,QAAQC,IAAI,aAAcZ,GAvDpC,UAwDcM,EAAO0B,gBAAgBhC,GAxDrC,QAwDD2B,EAxDC,kBA0DQhB,QAAQC,IAAI,UAAWe,GAG9B1B,IACFL,EAAU+B,EAAOL,MAAQrB,KAIvBY,GAAU,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,KAAKoB,QAAQzB,EAAQ5F,UAAY,GAlE7D,mBAmEmBiG,EAAOS,KAAKK,EAAOL,MAnEtC,EAmEOY,QACAC,GAAG,OAAO,SAAAd,GAChB,MAAO,CACLe,QAAS,kBAAMpH,OAAOqH,MAAMtC,GAAa0B,GAAkBJ,EAAYC,WAtE1E,2BA0EDgB,IAAaC,KAAK,CAChBC,QAAS,yBACTC,YAAad,EAAOL,KACpBoB,UAAW,iBAITzC,EAjFH,kCAkFwBD,EAlFxB,QAkFO2C,EAlFP,OAmFOC,EAAoBC,YAAW,sBAAC,4BAAA3C,EAAA,6DACpCS,QAAQC,IAAI,qBAAsB+B,EAAUtC,GADR,SAEIA,EAASyC,sBAAsBH,EAASrB,MAF5C,QAE9ByB,EAF8B,SAGHA,EAA0BC,gBACzD/C,EAAS,2BAAK0C,GAAaI,IAC3BE,cAAcL,IALoB,2CAOnC,KA1FJ,WA8FwB,oBAAhBjB,EAAOuB,KA9Ff,kCA+FKvB,EAAOuB,OA/FZ,iCAkGIvB,GAlGJ,mCAoGQhB,QAAQC,IAAR,MAEP4B,EACF,KAAEW,MAAQ,KAAEA,KAAKX,QACb,KAAEW,KAAKX,QACP,KAAEY,OAASC,KAAKC,MAAMD,KAAKE,UAAU,KAAEH,QAAQI,KAC/CH,KAAKC,MAAMD,KAAKC,MAAMD,KAAKE,UAAU,KAAEH,QAAQI,MAAMJ,MAAMZ,QAC3D,KAAEW,KACF,KAAEA,KACFE,KAAKE,UAAL,OACD,KAAEH,OAAS,KAAEZ,UAChBA,EAAU,KAAEA,SAGd7B,QAAQC,IAAI,uBAAwB4B,GACpC,KACMiB,EAAMJ,KAAKC,MAAMd,KACViB,EAAID,OACTE,EAAWL,KAAKC,MAAMG,EAAID,QACdE,EAASN,OAASM,EAASN,MAAMZ,UAC/CA,EAAUkB,EAASN,MAAMZ,SAG7B,MAAOmB,IAITrB,IAAac,MAAM,CACjBZ,QAAS,oBACTC,YAAaD,IAEXvC,GAAgC,oBAAbA,GACrBA,EAAS,EAAD,IApIP,2DAAP,wD,+FCFE2D,EALa,IAAIC,IAAW,CAChCC,QAAS,aAI2BC,iBAAX,+CAAoE/J,KAAe,GA4E/FgK,EAtEQ,kBACrB,IAAIC,mBAAiB,CACnBzD,QAAS,UACT0D,eAAe,EACfC,MAAO,QACPC,gBAAiB,CACfC,cAAe,CACbC,QAASC,IACTzD,QAAS,CACP0D,OAAQ,2CACRC,SAAU5K,IACV6K,IAAK,CACH,GAAI,8BACJ,IAAK,8BACL,IAAK,0BACL,MAAO,wBACP,MAAO,+BACP,MAAO,oCACP,MAAO,4CAIbC,OAAQ,CACNC,QAAS,CACPC,KAAM,uGACNnK,KAAM,SACN+H,YAAa,yBAEf6B,QAASQ,IACThE,QAAS,CACPiE,GAAI,yCAGRC,UAAW,CACTV,QAASW,IACTnE,QAAS,CACPoE,IAAK,6BAgBT,oBAAqB,CACnBN,QAAS,CACPC,KAAM,4GACNnK,KAAM,WACN+H,YAAa,iDAEf6B,QAASV,EACTuB,UAAU,WAAD,4BAAE,WAAO9E,EAAU+E,GAAjB,SAAAlF,EAAA,sEACHG,EAASgF,SADN,gCAEFhF,GAFE,2CAAF,qDAAC,IAKZiF,UAAW,CACThB,QAASiB,S,yBCnFGC,iBAAO,CAAEC,KAAM,iBAAkBC,KAAM,OAAQC,SAAU,UCCtE,IAAMC,GAAiB,SAAAvF,GAAa,IAAD,EAExC,OAAoC,SAAxB,OAARA,QAAQ,IAARA,GAAA,UAAAA,EAAUwF,gBAAV,eAAoBjL,SACf,EAEAN,KCJHsH,GAAUjC,EAAQ,IAAlBiC,MA4BO,SAASkE,GAAQvI,GAC9B,MAAoCwI,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAEIC,EAA2BN,GAAerI,EAAM8C,UAE9C8F,EAAUC,YAAW7I,EAAM8C,SAAU9C,EAAMG,QAASwI,GACtDG,EAAeC,WAAW,QAC1BC,EAAeJ,EAKnB,GAH6B,qBAAlB5I,EAAM4I,UAAyBI,EAAehJ,EAAM4I,SACpC,qBAAhB5I,EAAMI,QAAuB4I,EAAehJ,EAAMI,OAEzD4I,EAAc,CAChB,IAAMC,EAAe5E,GAAM6E,YAAYF,GACvCD,WAAWE,GAAcE,QAAQ,GACjCL,EAAeC,WAAWE,GAG5B,IAAIG,EAAiBN,EAAaK,QAAQ,GAEpChL,EAAQ6B,EAAM7B,OAAS6B,EAAMqJ,kBAAoB,EAMvD,OAJIZ,IACFW,EAAiB,KAAON,EAAe3K,GAAOgL,QAAQ,IAItD,sBACEjI,MAAO,CACLC,cAAe,SACfO,SAAU1B,EAAMgB,KAAOhB,EAAMgB,KAAO,GACpCsI,QAAS,EACTC,OAAQ,WAEVC,QAAS,WACPd,GAAeD,IARnB,SAWGW,I,8KCjEQ,SAASK,GAAQzJ,GAC9B,OAAKA,EAAMG,SAAgD,oBAA9BH,EAAMG,QAAQqB,YAIpC,cAAC,IAAD,aAAUD,KAAMvB,EAAMG,QAAQqB,eAAmBxB,IAH/C,yBCEX,IAAM0J,GAAQ,eAACvJ,EAAD,uDAAW,GAAX,OAAkBA,EAAQwJ,SAAS,SAAWxJ,EAAQwJ,SAAS,SA4B9D,SAASC,GAAa5J,GACnC,IAAQO,EAA0BP,EAA1BO,YAAaqB,EAAa5B,EAAb4B,SACrB,EAA0B4G,mBAASxI,EAAMI,OAAzC,mBAAOA,EAAP,KAAcyJ,EAAd,KACA,EAAwBrB,oBAAS,GAAjC,mBAAOsB,EAAP,KAAaC,EAAb,KAEMC,EAAsC,qBAAhBhK,EAAMI,MAAwBJ,EAAMI,MAAQA,EAClEC,EAAMC,YAAiBN,EAAMO,YAAayJ,GAE1CC,EAAgBC,sBAAW,uCAC/B,WAAMC,GAAN,iBAAAxH,EAAA,yDAC0B,qBAAbwH,EADb,qBAGQT,GADAvJ,EAAUgK,GAFlB,0CAKsC5J,EAAY6J,YAAYjK,GAL9D,QAKckK,EALd,UAOUlK,EAAUkK,GAPpB,0DAYIR,EAAS1J,GACe,oBAAbyB,GACTA,EAASzB,GAdf,0DAD+B,sDAmB/B,CAACI,EAAaqB,IAGhB,OACE,gCACGkI,EACC,qBACE5I,MAAO,CACLoJ,OAAQ,IACRC,SAAU,WACVC,KAAM,EACNC,IAAK,EACLC,MAAO,QAETlB,QAAS,WACPO,GAAQ,IATZ,SAYE,cAAC,KAAD,CACEY,MAAO,IACPC,WAAY,KACZC,QAAS,SAAAzE,GACPhD,QAAQC,IAAI,aAAc+C,GAC1B2D,GAAQ,IAEVe,OAAQ,SAAAX,GACN,GAAIA,EAAU,CACZ/G,QAAQC,IAAI,aAAc8G,GAC1B,IAAIY,EAAmBZ,EACnBY,EAAiBrG,QAAQ,MAAQ,IACnCqG,EAAmBA,EAAiBhK,OAAOgK,EAAiBC,YAAY,OACxE5H,QAAQC,IAAI,gBAAiB0H,IAE/BhB,GAAQ,GACRE,EAAcc,KAGlB7J,MAAO,CAAEwJ,MAAO,YAIpB,GAEF,cAAC,KAAD,CACElD,GAAG,YACHrK,KAAK,YACL8N,aAAa,MACbC,UAAWlL,EAAMkL,UACjBC,YAAanL,EAAMmL,YAAcnL,EAAMmL,YAAc,UACrDC,OAAQ,cAAC3B,GAAD,CAAStJ,QAAS6J,EAAchJ,KAAM,EAAGS,MAAO,IACxDrB,MAAO+B,UAAOkC,MAAMgH,UAAUrB,KAAkBN,GAAMM,IAAiBN,GAAMrJ,GAAOA,EAAM2J,EAC1FsB,WACE,sBACEpK,MAAO,CAAEqK,UAAW,EAAGhC,OAAQ,WAC/BC,QAAS,WACPO,GAASD,IAHb,UAME,cAAC,KAAD,CAAO0B,MAAO,cAACC,GAAA,EAAD,CAAgBvK,MAAO,CAAEQ,SAAU,KAAjD,SACE,cAACgK,GAAA,EAAD,CAAgBxK,MAAO,CAAEQ,SAAU,QAC5B,IARX,UAYFE,SAAU,SAAAwE,GACR6D,EAAc7D,EAAEhF,OAAOhB,aCnGlB,SAASuL,GAAW3L,GACjC,MAAwBwI,mBAASxI,EAAM7B,MAAQ,MAAQ,OAAvD,mBAAOyN,EAAP,KAAaC,EAAb,KACA,EAA8BrD,qBAA9B,mBAAOnB,EAAP,KAAgByE,EAAhB,KACA,EAA0BtD,qBAA1B,mBAAOpI,EAAP,KAAcyJ,EAAd,KAEMG,EAAsC,qBAAhBhK,EAAMI,MAAwBJ,EAAMI,MAAQA,EAQxE,OANA2L,qBAAU,WACH/B,GACH8B,EAAW,MAEZ,CAAC9B,IAGF,cAAC,KAAD,CACEmB,YAAanL,EAAMmL,YAAcnL,EAAMmL,YAAc,aAAeS,EACpEV,UAAWlL,EAAMkL,UACjBE,OAAiB,QAATQ,EAAiB,IAAM,SAC/BxL,MAAOiH,EACPiE,WACGtL,EAAM7B,MAGL,qBACE+C,MAAO,CAAEqI,OAAQ,WACjBC,QAAS,WACP,GAAa,QAAToC,EACFC,EAAQ,OACRC,EAAW9B,QAGX,GADA6B,EAAQ,OACJ7B,EAAc,CAChB,IAAMgC,EAAW,IAAMjD,WAAWiB,GAAgBhK,EAAM7B,OAAOgL,QAAQ,GACvE2C,EAAWE,QAEXF,EAAW9B,IAZnB,SAiBY,QAAT4B,EAAiB,mBAAW,qBAnB/B,GAuBJhK,SAAQ,uCAAE,WAAMwE,GAAN,mBAAAzD,EAAA,sDACFwH,EAAW/D,EAAEhF,OAAOhB,MACb,QAATwL,GACIb,EAAmBhC,WAAWoB,KAE5B8B,EAAWlB,EAAmB/K,EAAM7B,MAC1C0L,EAASoC,GACqB,oBAAnBjM,EAAM4B,UACf5B,EAAM4B,SAASqK,GAEjBH,EAAW3B,IAEX2B,EAAW3B,IAGbN,EAASM,GACqB,oBAAnBnK,EAAM4B,UACf5B,EAAM4B,SAASuI,GAEjB2B,EAAW3B,IAnBL,2CAAF,wDCpEC,SAAS+B,GAAT,GAA0C,IAAlBC,EAAiB,EAAjBA,cACrC,EAA4C3D,qBAA5C,mBAAO4D,EAAP,KAAuBC,EAAvB,KACA,EAAsD7D,mBAAS,KAA/D,mBAAO8D,EAAP,KAA4BC,EAA5B,KACA,EAAgC/D,mBAAS,IAAzC,mBAAOgE,EAAP,KAAiBC,EAAjB,KACA,EAAgDjE,qBAAhD,mBAAOkE,EAAP,KAAyBC,EAAzB,KACA,EAA0CnE,qBAA1C,mBAAOoE,EAAP,KAAsBC,EAAtB,KAsCA,OApCAd,qBAAU,YACS,uCAAG,oCAAApJ,EAAA,sDACdyJ,GACIU,EAAa3K,UAAOkC,MAAM0I,eAAeX,EAAgBI,GACzDQ,EAAe7K,UAAOkC,MAAM4I,OAAOC,SAASJ,GAE5B,kBAChBK,EADgB,kBACWb,EAE3Bc,EAAsBJ,EAAaK,WAAWF,GAC9CG,EAAmBF,EAAoBG,WAE7CZ,EAAoBW,IAEpBX,IAbgB,2CAAH,qDAgBjBa,KACC,CAACpB,EAAgBE,EAAqBE,IAEzCT,qBAAU,YACc,uCAAG,4BAAApJ,EAAA,sDACvB,GAAI+J,EACF,IACQe,EAAuB,IAAItL,UAAOuL,OAAOhB,GAC/CtJ,QAAQC,IAAIoK,GACZZ,EAAiBY,EAAqBtN,SACtC,MAAOiG,GACPhD,QAAQC,IAAI+C,GACZyG,EAAiB,IARE,2CAAH,qDAYtBc,KACC,CAACjB,IAGF,gCACE,qBAAKxL,MAAO,CAAEqK,UAAW,GAAIb,MAAO,KAApC,SACE,0CAGF,qBAAKxJ,MAAO,CAAE0M,QAAS,IAAvB,sBACA,cAAC,KAAMC,SAAP,CACE3M,MAAO,CAAEwJ,MAAO,KAChB1J,KAAK,QACLmK,YAAY,oBACZvJ,SAAQ,uCAAE,WAAMwE,GAAN,SAAAzD,EAAA,sDACR0J,EAAkBjG,EAAEhF,OAAOhB,OADnB,2CAAF,wDAKV,cAAC,KAAD,CACEc,MAAO,CAAEwJ,MAAO,IAChBtK,MAAOkM,EACP1K,SAAU,SAAAwE,GACRmG,EAAuBnG,EAAEhF,OAAOhB,QAElCY,KAAK,UAGP,cAAC,KAAM6M,SAAP,CACE3M,MAAO,CAAEwJ,MAAO,KAChB1J,KAAK,QACLmK,YAAY,oBACZvJ,SAAQ,uCAAE,WAAMwE,GAAN,SAAAzD,EAAA,sDACR8J,EAAYrG,EAAEhF,OAAOhB,OADb,2CAAF,wDAKV,qBAAKc,MAAO,CAAEqK,UAAW,GAAIb,MAAO,KAApC,SACE,sCAGF,qBAAKxJ,MAAO,CAAE0M,QAAS,IAAvB,yBACA,cAAC,KAAMC,SAAP,CACEC,SAAU1B,EACVlL,MAAO,CAAEwJ,MAAO,KAChB1J,KAAK,QACLZ,MAAOsM,EACPvB,YAAY,QACZvJ,SAAU,SAAAwE,GACRuG,EAAoBvG,EAAEhF,OAAOhB,UAIjC,uBAECwM,EACC,sBAAK1L,MAAO,CAAEwJ,MAAO,IAAKqD,OAAQ,KAAlC,UACE,qBAAK7M,MAAO,CAAE8M,MAAO,QAASzC,UAAW,IAAzC,SACE,cAACxL,EAAD,CAASK,MAAOwM,MAElB,0BAGF,GAGF,qBAAK1L,MAAO,CAAE8M,MAAO,SAArB,SACE,eAAC,IAAD,CACE9M,MAAO,CAAEqK,UAAW,IACpBuC,UAAWpB,GAAqBN,GAAkBA,EAAezL,OAAS,EAC1E6I,QAAS,WACP,IAAMyE,EAAoBxQ,OAAOyQ,aAAaC,QAAQ,kBAClDF,GACFxQ,OAAOyQ,aAAaE,QAAQ,wBAA0BC,KAAKC,MAAOL,GAGpE,IACE,IAAMR,EAAuB,IAAItL,UAAOuL,OAAOhB,EAAiB6B,QAChEnL,QAAQC,IAAIoK,GACZZ,EAAiBY,EAAqBtN,SACtC1C,OAAOyQ,aAAaE,QAAQ,iBAAkB1B,GAC9CjP,OAAOC,SAAS8Q,SAEhB,MAAOpI,GACPhD,QAAQC,IAAI+C,KAjBlB,UAqBE,sBAAMlF,MAAO,CAAEuN,YAAa,GAA5B,0BArBF,YAyBF,eAAC,IAAD,CACEvN,MAAO,CAAEqK,UAAW,IACpB/B,QAAS,WACP2C,GAAc,IAHlB,UAME,sBAAMjL,MAAO,CAAEuN,YAAa,GAA5B,oBANF,eC7HN,IAAQ5O,GAASC,IAATD,KA8BO,SAAS6N,GAAO1N,GAC7B,MAA0CwI,qBAA1C,mBAAOkG,EAAP,KAAsBC,EAAtB,KACA5C,qBAAU,WAAM,4CACd,4BAAApJ,EAAA,0DACM3C,EAAM+C,OADZ,gCAE6B/C,EAAM+C,OAAO6L,aAF1C,OAEUC,EAFV,OAGIF,EAAiBE,GAHrB,4CADc,uBAAC,WAAD,wBAOdD,KACC,CAAC5O,EAAM+C,SAEV,IAyCIsE,EACAyH,EACAC,EA3CEC,EAAkBhP,EAAMG,SAAWuO,EAEzC,EAAwBlG,qBAAxB,mBAAO1D,EAAP,KAAamK,EAAb,KACA,EAAoBzG,qBAApB,mBAAO0G,EAAP,KAAWC,EAAX,KACA,EAA4B3G,qBAA5B,mBAAO4G,EAAP,KAAeC,EAAf,KACA,EAAkC7G,qBAAlC,mBAAO8G,EAAP,KAAkBC,EAAlB,KACA,EAAoB/G,qBAApB,mBAAOgH,EAAP,KAAWC,EAAX,KAEA,EAAoCjH,qBAApC,mBAAOkH,EAAP,KAAmBvD,EAAnB,KAEMwD,EAAe3P,EAAM8C,SACzB,cAAC,KAAD,CAAS8M,MAAM,SAAf,SACE,cAACC,GAAA,EAAD,CACErG,QAAS,WACPyF,GAASnK,IAEXgL,QAAS,GACT5O,MAAO,CACLoI,QAAStJ,EAAMsJ,QAAUtJ,EAAMsJ,QAAU,EACzClM,MAAO4C,EAAM5C,MAAQ4C,EAAM5C,MAAQ,GACnCmM,OAAQ,UACR7H,SAAU1B,EAAMgB,KAAOhB,EAAMgB,KAAO,GACpCG,cAAe,cAKrB,GAGI4O,EACJ,eAAC,IAAD,CACE7O,MAAO,CAAEqK,UAAW,IACpB/B,QAAS,WACP2C,GAAc,IAHlB,UAME,sBAAMjL,MAAO,CAAEuN,YAAa,GAA5B,0BANF,YAaF,GAAIS,EACF7H,EACE,gCACE,8BACE,cAAC,GAAD,CAAMvF,UAAQ,EAAd,SAAgBkN,MAElB,cAAC,KAAD,CACE5O,MAAO4O,EACPhO,KAAK,MACLgP,MAAM,IACNC,eAAa,EACbC,SAAS,MACTC,cAAe,CAAEC,UAAU,QAIjCtB,EACE,eAAC,IAAD,CAEEtF,QAAS,WACP2F,EAAM,KAHV,UAME,cAACzD,GAAA,EAAD,IANF,UACM,QAQRqD,EACE,eAAC,IAAD,CAEEvF,QAAS,WACPiG,EAAMT,GACNG,EAAM,KAJV,UAOE,cAACkB,GAAA,EAAD,IAPF,iBACM,aASH,GAAIb,EAAI,CACb,IAAMA,EAAKtB,aAAaC,QAAQ,kBAC1BmC,EAAS,IAAInO,UAAOuL,OAAO8B,GAEjC,GAAIc,EAAOnQ,UAAY6O,EACrB3H,EACE,8BACE,8EAGC,CACL,IAAMkJ,EAAsB,GACtBC,EAAiB,GASvB,IAAK,IAAM7I,KARX4I,EAAoBD,EAAOnQ,UAAW,EACtCqQ,EAAeC,KACb,qBAAKvP,MAAO,CAAEQ,SAAU,GAAI4H,QAAS,EAAGoH,gBAAiB,WAAzD,SACE,oBAAGrP,KAAM,OAASmO,EAAlB,UACE,cAACzP,EAAD,CAASkB,WAAS,EAACd,QAASmQ,EAAOnQ,QAASI,YAAaP,EAAMO,cADjE,IACkF+P,EAAOnQ,QAAQY,OAAO,EAAG,SAI7FmN,aAChB,GAAIvG,EAAIjD,QAAQ,0BAA4B,EAAG,CAC7C,IAAMiM,EAASzC,aAAaC,QAAQxG,GAC9BiJ,EAAa,IAAIzO,UAAOuL,OAAOiD,GAChCJ,EAAoBK,EAAWzQ,WAClCoQ,EAAoBK,EAAWzQ,UAAW,EAC1CqQ,EAAeC,KACb,qBAAKvP,MAAO,CAAEQ,SAAU,IAAxB,SACE,oBAAGL,KAAM,OAASsP,EAAlB,UACE,cAAC5Q,EAAD,CAASkB,WAAS,EAACd,QAASyQ,EAAWzQ,QAASI,YAAaP,EAAMO,cAAgB,IAClFqQ,EAAWzQ,QAAQY,OAAO,EAAG,UAQ1C,IAAM8P,EAAW,4BAA8BrB,EAE/CnI,EACE,gCACE,gCACE,6CACA,8BACE,cAAC,GAAD,CAAMnG,MAAO,CAAEQ,SAAU,IAAMI,UAAQ,EAAvC,SACG0N,MAIL,sBAAKtO,MAAO,CAAEqK,UAAW,IAAzB,UACE,8BACE,+CAEF,cAAC,GAAD,CAAMrK,MAAO,CAAEQ,SAAU,IAAMI,UAAQ,EAAvC,SACG+O,OAIL,uBACA,mFAEE,mBAAGzP,OAAO,SAASC,KAAMwP,EAAUvP,IAAI,sBAAvC,yBAFF,OAQA,qBACEJ,MAAO,CAAEqI,OAAQ,WACjBC,QAAS,WACP,IAAMsH,EAAKC,SAASC,cAAc,YAClCF,EAAG1Q,MAAQyQ,EACXE,SAAS9K,KAAKgL,YAAYH,GAC1BA,EAAGI,SACHH,SAASI,YAAY,QACrBJ,SAAS9K,KAAKmL,YAAYN,GAC1B7L,KAAQoM,QAAQ,sBAAMnQ,MAAO,CAAEqJ,SAAU,YAAzB,uCATpB,SAYE,cAAC,KAAD,CAAInK,MAAOyQ,EAAU7P,KAAK,MAAMgP,MAAM,IAAIC,eAAa,EAACC,SAAS,aAIpEM,EACC,gCACE,qDACCA,EACD,cAAC,IAAD,CACEhH,QAAS,WACP,IAAMyE,EAAoBxQ,OAAOyQ,aAAaC,QAAQ,kBAClDF,GACFxQ,OAAOyQ,aAAaE,QAAQ,wBAA0BC,KAAKC,MAAOL,GAEpE,IACMV,EADepL,UAAOuL,OAAO4D,eACHC,cAAchE,WAC9C9P,OAAOyQ,aAAaE,QAAQ,iBAAkBb,GAC9C9P,OAAOC,SAAS8Q,UATpB,yBAgBF,MAMRM,EACE,eAAC,IAAD,CAEEtF,QAAS,WACP2F,EAAMH,GACNS,EAAM,KAJV,UAOE,cAAC/D,GAAA,EAAD,IAPF,aACM,WASRqD,EACE,eAAC,IAAD,CAEEvF,QAAS,WACPiG,EAAM,IACNN,EAAM,KAJV,UAOE,cAACkB,GAAA,EAAD,IAPF,UACM,YASH,CACL,IAAMmB,EAAa,CACjBlI,QAAS,IAGXjC,EACE,gCACE,qBAAKnG,MAAOsQ,EAAZ,SACE,cAAC5H,GAAD,CACEsB,WAAS,EACT3K,YAAaP,EAAMO,YACnB4K,YAAY,aACZhL,QAASmP,EACT1N,SAAU2N,MAGd,qBAAKrO,MAAOsQ,EAAZ,SACE,cAAC7F,GAAD,CACExN,MAAO6B,EAAM7B,MACbiC,MAAOgP,EACPxN,SAAU,SAAAxB,GACRiP,EAAUjP,WAMpB0O,EACE,eAAC,IAAD,CAEEtF,QAAS,WACP2F,EAAMH,GACNS,EAAM,KAJV,UAOE,cAAC/D,GAAA,EAAD,IAPF,aACM,WASRqD,EACE,eAAC,IAAD,CAEEvF,QAAS,WACPiG,EAAMT,GACNG,EAAM,KAJV,UAOE,cAACkB,GAAA,EAAD,IAPF,iBACM,QAWV,OACE,iCACGV,EACD,cAAC,KAAD,CACE8B,QAAS3M,EACT8K,MACE,gCACGZ,EAAkB,cAACjP,EAAD,CAASI,QAAS6O,EAAiBzO,YAAaP,EAAMO,cAAkB,cAAC,KAAD,IAC3F,qBAAKW,MAAO,CAAE8M,MAAO,QAAS0D,aAAc,IAA5C,SACE,cAACnJ,GAAD,CAASpI,QAAS6O,EAAiBlM,SAAU9C,EAAM8C,SAAUuG,iBAAkBrJ,EAAM7B,aAI3FwT,KAAM,WACJxC,IACAM,IACAR,GAASnK,IAEX8M,SAAU,WACRzC,IACAM,IACAR,GAASnK,IAEX+M,OACEnC,EACI,KACA,CACEK,EACAhB,EACAD,EACA,eAAC,IAAD,CAEEgD,KAAK,UACLhE,UAAWsB,IAAWE,GAAaJ,EACnC6C,SAAS,EACTvI,QAAS,WACP,IAEIpJ,EAFEqC,EAAKH,EAAWtC,EAAM+C,QAAU/C,EAAM8C,UAG5C,IACE1C,EAAQ+B,UAAOkC,MAAM2N,WAAW,GAAK5C,GACrC,MAAOhJ,GAEPhG,EAAQ+B,UAAOkC,MAAM2N,WAAW,GAAKjJ,WAAWqG,GAAQjG,QAAQ,IAGlE1G,EAAG,CACDwP,GAAI3C,EACJlP,UAEF6O,GAASnK,GACTqK,KArBJ,UAwBE,cAAC+C,GAAA,EAAD,IAxBF,UACM,WA5BhB,SAwDGxC,EAAa,cAACxD,GAAD,CAAcC,cAAeA,IAAoB9E,OChVxD,SAAS8K,GAAT,GAYX,IAGEC,EAdJjS,EAWC,EAXDA,QACAkS,EAUC,EAVDA,WACAC,EASC,EATDA,cACAC,EAQC,EARDA,gBACApU,EAOC,EAPDA,MACA8C,EAMC,EANDA,UACAuR,EAKC,EALDA,UACAC,EAIC,EAJDA,cACAC,EAGC,EAHDA,kBACApV,EAEC,EAFDA,cACAqV,EACC,EADDA,WAEQ1S,EAAiBC,cAAjBD,aAINmS,GADF,OAAII,QAAJ,IAAIA,OAAJ,EAAIA,EAAWI,gBACO,CAAEzV,KAAM,SAAU0V,OAAQH,GAE1B,CAAEvV,KAAM,UAAW0V,OAAQJ,GAGjD,IAAMpL,GAAWpG,GACf,iCACGd,GACC,cAACJ,EAAD,CAASI,QAASA,EAASI,YAAagS,EAAiBjV,cAAeA,EAAeoE,SAAU,KAEnG,cAAC6G,GAAD,CAASpI,QAASA,EAAS2C,SAAUwP,EAAenU,MAAOA,EAAO6C,KAAM,MACtE2R,GACA,cAACjF,GAAD,CACEvN,QAASA,EACT2C,SAAUwP,EACVvP,OAAQsP,EACR9R,YAAagS,EACbpU,MAAOA,EACPf,MAAwB,UAAjB6C,EAA2B,UAAY,UAC9Ce,KAAM,GACNsI,QAAS,WAMjB,OACE,sBAAKpI,MAAO,CAAEmG,QAAS,QAAvB,UACGA,EACAmL,GACC,cAAC,IAAD,CAAQtR,MAAO,CAAE4R,WAAY,GAAKC,MAAM,QAAQvJ,QAAS4I,EAAkBS,OAA3E,SACGT,EAAkBjV,UCxF7B,OAA6BiF,EAAQ,IAArC,GAAQiC,MAAR,GAAe2O,U,uBCIf,ICHkB5Q,EAAQ,IAAlBiC,M,MDGqBjC,EAAQ,KAArC,GAAQiC,MAAR,GAAe4O,U,cEAf,IAAQ5O,GAAUjC,EAAQ,IAAlBiC,MA8BO,SAAS6O,GAAOlT,GAC7B,IAeImT,EAfJ,EAA8B3K,qBAA9B,mBAAOrI,EAAP,KAAgBiT,EAAhB,KACA,EAA0C5K,qBAA1C,mBAAO6K,EAAP,KAAsBC,EAAtB,KAEQnV,EAAmD6B,EAAnD7B,MAAOgN,EAA4CnL,EAA5CmL,YAAamH,EAA+BtS,EAA/BsS,cAAe/R,EAAgBP,EAAhBO,YAE3CwL,qBAAU,YACc,uCAAG,4BAAApJ,EAAA,0DACnB2P,EADmB,gCAEQA,EAAciB,eAFtB,OAEfC,EAFe,OAGrBF,EAAiBE,EAAe,IAHX,2CAAH,qDAMtBC,KACC,CAACnB,IAIFa,EADEhT,GAA0C,oBAAxBA,EAAQqB,YAClB,cAAC,IAAD,CAAUD,KAAMpB,EAAQqB,cAAeR,KAAM,EAAGS,MAAO,IAEvD,wBAGZ,IAMMgB,EAAKH,EAAWgQ,GAEtB,OACE,+BACE,cAAC,KAAD,CACEtR,KAAK,QACLmK,YAAaA,GAA4B,eACzCC,OAAQ+H,EACR/S,MAAOD,EACPyB,SAAU,SAAAwE,GAfM,IAAA+D,EACI,qBADJA,EAea/D,EAAEhF,OAAOhB,QAdHiE,GAAMgH,UAAUlB,IACrDiJ,EAAWjJ,IAcTuJ,OACE,eAAC,KAAD,CAAS9D,MAAM,0CAAf,UACE,cAAC,IAAD,CACEpG,QAAS,WACP/G,EAAG,CACDwP,GAAI9R,EACJC,MAAOiE,GAAM2N,WAAW,SAE1BoB,EAAW,KAEbL,MAAM,SACNY,KAAM,cAACzB,GAAA,EAAD,MAER,cAACxE,GAAD,CACEtQ,MAAM,UACN0F,SAAUwP,EACV/R,YAAaA,EACbpC,MAAOA,EACPgC,QAASkT,WCzER,SAASO,GAAS5T,GAC/B,OACE,eAAC,IAAD,CACEwJ,QAAS,WACP/L,OAAOqH,KAAK,gCAEd9D,KAAK,QACL+R,MAAM,QALR,UAOE,sBAAM7R,MAAO,CAAEuN,YAAa,GAA5B,SACE,sBAAMoF,KAAK,MAAM,aAAW,WAA5B,4BAIyB,qBAAnB7T,EAAM5B,SAA2B,EAAI0V,SAAS9T,EAAM5B,SAAU,IAAzB,SAA+B,GAAM,GAZpF,O,6CCpBI2V,GAAgBjU,IAAhBiU,MAAOlU,GAASC,IAATD,KAIA,SAASmU,GAAT,GAAqD,EAAnCC,KAAmC,EAA7BrE,MAA6B,EAAtBsE,SAAuB,IAAVlU,EAAS,mBAClE,OACE,sBAAKkB,MAAO,CAAEmG,QAAS,OAAQ8M,eAAgB,gBAAiB7K,QAAS,UAAzE,UACE,sBAAKpI,MAAO,CAAEmG,QAAS,OAAQ+M,cAAe,SAAUC,KAAM,EAAGC,WAAY,SAA7E,UACI,cAACP,GAAD,CAAO/D,MAAO,EAAG9O,MAAO,CAAEqT,OAAQ,gBAAlC,uBAGF,cAAC,GAAD,CAAMzC,KAAK,YAAY5Q,MAAO,CAAEsT,UAAW,QAA3C,4BAIDxU,EAAMyU,YAKbT,GAAOU,aAAe,CACpBT,KAAM,+CACNrE,MAAO,4BACPsE,SAAU,iE,yBCCG,SAASS,GAAK3U,GAC3B,MAA8BwI,mBAAS,QAAvC,mBAAOoM,EAAP,KAAgBC,EAAhB,KAEM/C,EAAO,UAEPgD,EAAa,GALe,WAMvBlV,GACyB,QAA9BI,EAAM+U,SAASnV,GAAGvC,SAAmD,IAA9B2C,EAAM+U,SAASnV,GAAGvC,SAC3DyX,EAAWrE,KACT,4BACE,cAAC,IAAD,CACEvP,MAAO,CAAE9D,MAAO4C,EAAM+U,SAASnV,GAAGxC,OAClC0U,KAAMA,EACN9Q,KAAK,QACL+R,MAAM,QACNvJ,QAAS,WACP/L,OAAOqH,KAAK9E,EAAM+U,SAASnV,GAAG5B,SANlC,SASGgC,EAAM+U,SAASnV,GAAGzC,QAVf6C,EAAM+U,SAASnV,GAAGvC,WAHhC,IAAK,IAAMuC,KAAKI,EAAM+U,SAAW,EAAtBnV,GAoBX,OACE,gCACE,eAAC,IAAD,CACEoB,KAAK,QACL+R,MAAM,QACNvJ,QAAS,WACPqL,EAAW,OAJf,UAOE,cAACG,GAAA,EAAD,CAAsB9T,MAAO,CAAE9D,MAAO,aAAgB,IAC9B,qBAAhB4C,EAAM7B,MAAwB,EAAI6B,EAAM7B,MAAMgL,QAAQ,MAEhE,eAAC,KAAD,CACEyG,MAAM,UACN6B,QAAqB,OAAZmD,EACThD,SAAU,WACRiD,EAAW,SAEbhD,OAAQ,CACN,cAAC,IAAD,CAEErI,QAAS,WACPqL,EAAW,SAHf,mBACM,SARV,UAiBE,4BACE,eAAC,IAAD,CACE/C,KAAMA,EACN9Q,KAAK,QACL+R,MAAM,QACNvJ,QAAS,WACP/L,OAAOqH,KAAK,2EAA6E9E,EAAMG,UALnG,UAQE,sBAAMe,MAAO,CAAEwQ,aAAc,IAAMmC,KAAK,MAAxC,SACE,sBAAMA,KAAK,MAAM,aAAW,UAA5B,wCATJ,YAgBF,8BACG,IACD,eAAC,IAAD,CACE/B,KAAMA,EACN9Q,KAAK,QACL+R,MAAM,QACNvJ,QAAS,WACP,IAAIyL,KAAe,CACjBC,YAAa,eACbC,YAAa,0CACbC,WAAY,qBACZC,UAAW,MACXC,YAAatV,EAAMG,UAElByE,GAAG,KAAK,SAAA2Q,GAAK,OAAInS,QAAQC,IAAIkS,MAC7BC,QAbP,UAgBE,sBAAMtU,MAAO,CAAEwQ,aAAc,IAAMmC,KAAK,MAAxC,SACE,sBAAMA,KAAK,MAAM,aAAW,UAA5B,wCAjBJ,aAyBF,4BACE,eAAC,IAAD,CACE/B,KAAMA,EACN9Q,KAAK,QACL+R,MAAM,QACNvJ,QAAS,WACP/L,OAAOqH,KAAK,0CALhB,UAQE,sBAAM5D,MAAO,CAAEwQ,aAAc,IAAMmC,KAAK,MAAM,aAAW,OAAzD,0BARF,gBAeF,cAAC,KAAD,IAEA,6CAECiB,Q,sDC/IT,IAAMW,GAAc,uCAAG,WAAMC,GAAN,eAAA/S,EAAA,6DACfgT,EAAI,IAAIxT,UAAOyT,UAAUC,sBAAsBH,GADhC,SAGfC,EAAEG,MAHa,gCAKdH,GALc,2CAAH,sDAQL,SAASI,GAAiBC,GAAiC,IAAvB1D,EAAsB,uDAAN,KACjE,EAAgC9J,mBAAS,MAAzC,mBAAO1F,EAAP,KAAiBmT,EAAjB,KAEMC,EAAkBhM,sBAAW,sBAAC,8BAAAvH,EAAA,+EAEhBwB,QAAQgS,KAAKH,EAASI,IAAIX,KAFV,cAE1BE,EAF0B,gBAGfA,EAHe,OAG1BU,EAH0B,OAKhCJ,EAAYI,GALoB,kDAQhCjT,QAAQC,IAAR,MARgC,0DAUjC,CAAC2S,IAcJ,OAZAjK,qBAAU,WAEJuG,GAAqD,KAAvB,OAAbA,QAAa,IAAbA,OAAA,EAAAA,EAAehK,SAASjL,SAC3C4Y,EAAY3D,GAId4D,MAGC,CAACpQ,KAAKE,UAAUgQ,GAAW1D,IAEvBxP,E,yBCtCmB,6CAEK,6CCsBdwT,IAAXC,OACSzW,IAATD,KA2pBO2W,I,WChrBA,SAASC,KACtB,IAAM7P,EAAQnJ,OAAOyQ,aAAaC,QAAQ,SAC1C,EAAoC3F,sBAAY5B,GAAmB,UAAVA,IAAzD,mBAAO8P,EAAP,KAAmBC,EAAnB,KACA,EAA2CzW,cAAnC0W,EAAR,EAAQA,SAAU3W,EAAlB,EAAkBA,aAAc4W,EAAhC,EAAgCA,OAEhC9K,qBAAU,WACRtO,OAAOyQ,aAAaE,QAAQ,QAASnO,KACpC,CAACA,IAOJ,OACE,sBAAK6W,UAAU,eAAe5V,MAAO,CAAEqJ,SAAU,QAASwM,MAAO,EAAGC,OAAQ,GAA5E,UACE,sBAAM9V,MAAO,CAAEoI,QAAS,GAAxB,SAA+C,UAAjBrJ,EAA2B,eAAO,iBAChE,cAAC,KAAD,CAAQgX,QAASP,EAAY9U,SARb,SAAAsV,GAClBP,EAAcO,GACdN,EAAS,CAAEhQ,MAAOsQ,EAAYL,EAAOM,KAAON,EAAOO,c,wBCVtCtX,IAATD,K,qCC8NR,I,WC5HewX,OAlGf,YAOI,IANFC,EAMC,EANDA,aACAC,EAKC,EALDA,aACAC,EAIC,EAJDA,gBACAC,EAGC,EAHDA,cACAC,EAEC,EAFDA,qBAGIC,GADH,EADDjF,kBAEqB,IACrB,GAAI4E,GAAgBC,GAAgBC,GAAmBD,IAAiBC,EAAiB,CACvF,IAAMI,EAAkBjY,YAAQ6X,GAC1BK,EAAelY,YAAQ4X,GAE3BI,EADsB,OAApBH,GAA6C,QAAjBD,EAE5B,qBAAKrW,MAAO,CAAEoJ,OAAQ,EAAGC,SAAU,WAAYwM,MAAO,EAAGtM,IAAK,GAAInB,QAAS,IAA3E,SACE,cAAC,KAAD,CACErE,QAAQ,gCACRC,YACE,4CACW,8CADX,+CAC2E,sCAD3E,yBAGE,6FAGJ4M,KAAK,QACLgG,UAAU,MAMd,qBAAK5W,MAAO,CAAEoJ,OAAQ,EAAGC,SAAU,WAAYwM,MAAO,EAAGtM,IAAK,GAAInB,QAAS,IAA3E,SACE,cAAC,KAAD,CACErE,QAAQ,6BACRC,YACE,4CACW,4BAAI0S,GAAmBA,EAAgBza,OADlD,kCAC2F,IACzF,cAAC,IAAD,CACEqM,QAAO,sBAAE,gCAAA7G,EAAA,6DACDoV,EAAWta,OAAOsa,SAClBnS,EAAO,CACX,CACEvI,QAAS,KAAOoa,EAAcpa,QAAQ2a,SAAS,IAC/CC,UAAWR,EAActa,KACzB+a,eAAgBT,EAAcS,eAC9BC,QAAS,CAACV,EAAcla,QACxB6a,kBAAmB,CAACX,EAAcna,iBAGtC8F,QAAQC,IAAI,OAAQuC,GAXb,kBAgBYmS,EAASM,QAAQ,CAChCC,OAAQ,6BACRC,OAAQ,CAAC,CAAElb,QAASuI,EAAK,GAAGvI,YAlBzB,OAgBLmb,EAhBK,kFAuBcT,EAASM,QAAQ,CAChCC,OAAQ,0BACRC,OAAQ3S,IAzBP,QAuBH4S,EAvBG,kEAgCHA,GACFpV,QAAQC,IAAImV,GAjCP,iEADX,SAsCE,4BAAIX,GAAgBA,EAAa1a,YAIvC2U,KAAK,QACLgG,UAAU,WAMlBH,EAAiBD,EAAuB,KACtC,qBAAKxW,MAAO,CAAEoJ,QAAS,EAAGC,SAAU,WAAYwM,MAAO,IAAKtM,IAAK,GAAInB,QAAS,GAAIlM,MAAOqa,EAAcra,OAAvG,SACGqa,EAActa,OAOrB,OAFAiG,QAAQC,IAAI,CAAEsU,mBAEPA,GChDMc,OA7Cf,YAAgE,IAA1CnG,EAAyC,EAAzCA,cAAemF,EAA0B,EAA1BA,cAAetX,EAAW,EAAXA,QAClD,EAA0CqI,oBAAS,GAAnD,mBAAOkQ,EAAP,KAAsBC,EAAtB,KAEMhQ,EAA2BN,GAAeiK,GAG1CsG,EAAmB/P,YAAWyJ,EAAenS,EAASwI,GAMtDkQ,EAAWvW,EAAWgQ,EAHXwG,YAAYrB,EAAe,OAAQ9O,IAKhDoQ,EAAa,GA4BjB,OAzBGL,GACDpG,GACAA,EAAchK,UACqB,QAAnCgK,EAAchK,SAASjL,SACvBub,GACAzW,UAAOkC,MAAM6E,YAAY0P,IAAqB,IAE9CG,EACE,qBAAK7X,MAAO,CAAEqJ,SAAU,WAAYwM,MAAO,GAAItM,IAAK,IAApD,SACE,cAAC,IAAD,CACEqH,KAAK,UACLtI,QAAS,WACPqP,EAAS,CACP5G,GAAI9R,EACJC,MAAO+B,UAAOkC,MAAM2N,WAAW,UAEjC2G,GAAiB,IAPrB,qEAgBCI,G,iDCjDM,OAA0B,gCCmC1BC,OA3Bf,WAIE,OACE,gCAEJ,+CACC,gFAAkD,uBAAlD,qCACqC,uBADrC,sCAEsC,uBAFtC,oEAGoE,uBAHpE,qGAIqG,uBAJrG,wDAKwD,uBALxD,gEAQG,iDACA,qBAAKC,IAAKC,GAAKxO,MAAO,MAAW,uBATpC,0BAU0B,mBAAGrJ,KAAK,gCAAR,sBAAoD,uBAV9E,uEAYG,2CACA,mBAAGA,KAAK,yEAAR,qC,gCCxBeiV,IAAXC,OACWnU,EAAQ,IAAnBD,O,uCCmMOgX,I,WCpKTC,GAAW,CACfC,OAAQ,mCACRpW,QAASqW,KAAQC,aAGbC,GAAU,IAAIC,KAAQL,IAEpBjX,GAAWC,EAAQ,IAAnBD,OAqBFuX,GAAiBzc,IAAS6B,SAG1B6a,IAAQ,EAKRnH,GAAYoH,IAGZhE,GAAY,CAChB,0EADgB,+CAEwBnZ,KACxC,oCAwdaod,OArdf,SAAa7Z,GAGX,IAAM8Z,EAAiB,CAACJ,GAAevc,KAAM,UAAW,UAExD,EAAgDqL,qBAAhD,mBAAOuR,EAAP,KAAyBC,EAAzB,KACA,EAA8BxR,qBAA9B,mBAAOrI,EAAP,KAAgBiT,EAAhB,KACA,EAA8C5K,mBAASsR,EAAe,IAAtE,mBAAOG,EAAP,KACMvc,GADN,KACiBwc,eACjB,EAAkD1R,qBAAlD,mBAAO2R,EAAP,KAA0BC,EAA1B,KACM3C,EAAgBxa,IAASgd,GAC/B,EAA2CzR,mBAAS,oDAApD,mBAAuB6R,GAAvB,WACA,EAAgD7R,mBAAS,GAAzD,mBAAO8R,EAAP,KAAyBC,EAAzB,KACA,EAA0B/R,mBAAS,KAAnC,mBAAOgS,EAAP,KAAcC,EAAd,KAGMC,EAAa,SAAAta,GACjBua,GAAcva,IAmBV9C,EAAgBma,EAAcna,cAG9BgV,EAAgByD,GAAiB,CACrCxZ,oIAAYqe,mBAAqBre,oIAAYqe,mBAAqBnD,EAAcla,SAG5EgV,EAAkBwD,GAAiBH,GAAWtD,GAG9C3J,EAA2BN,GAAeiK,GAC1CuI,GAA6BxS,GAAekK,GAO5CG,GAAiB,uCAAG,sBAAA/P,EAAA,sEAClB6P,GAAUsI,sBADQ,WAEpBf,IAAoBA,EAAiBjX,UAA2D,mBAAxCiX,EAAiBjX,SAASiY,WAF9D,gCAGhBhB,EAAiBjX,SAASiY,aAHV,OAKxBC,YAAW,WACTvd,OAAOC,SAAS8Q,WACf,GAPqB,2CAAH,qDAWjBrQ,GAAQ8c,YAAoBxD,EAAelF,EAAiBsI,IAG5Dzc,GCjJO,SAAqBqZ,EAAeyD,GAA0B,IAC3E,EAAgC1S,qBAAhC,mBAAOpK,EAAP,KAAiB+c,EAAjB,KACMC,EAAY,uCAAG,sBAAAzY,EAAA,sDACf8U,EAAc4D,eAAe,YAC/BF,EAAY1D,EAAcrZ,UAE1Bkd,KACGC,IAAI,0EAA4E5e,KAChF6e,MAAK,SAAAC,GACJrY,QAAQC,IAAI,iBAAkBoY,GAC9B,IAAMC,EAA8D,IAAhDD,EAAS7V,KAAKxB,OAAO8W,GAAS,gBAC9CQ,IAAgBtd,GAClB+c,EAAYO,MAGfC,OAAM,SAAA9V,GAAK,OAAIzC,QAAQC,IAAIwC,MAbb,2CAAH,qDAkBlB,OADA+V,YAAUR,EAAc,OACjBhd,ED6HU0a,CAAYrB,EAAe,gBAGtCpF,GADwBwJ,YAAyB9B,EAAkBzH,EAlFjD,MAmFiBvP,OAEzCgJ,qBAAU,WAAM,4CACd,4BAAApJ,EAAA,0DACM0P,GADN,gCAE6BA,GAAWzD,aAFxC,OAEUC,EAFV,OAGIuE,EAAWvE,GAHf,4CADc,uBAAC,WAAD,wBAOdD,KACC,CAACyD,KAGJ,IAAMkF,GAAejF,GAAiBA,EAAchK,UAAYgK,EAAchK,SAASjL,QACjFma,GACJnF,IAAcA,GAAWvP,UAAYuP,GAAWvP,SAASwF,UAAY+J,GAAWvP,SAASwF,SAASjL,QAK9FoF,GAAKH,EAAW+P,GAAYjU,IAG5Bwa,GAAmB/P,YAAWyJ,EAAenS,EAASwI,GAGtDmT,GAAqBjT,YAAW0J,EAAiBpS,EAAS0a,IAI1DkB,GAAiB,CAAEC,kBAAmBA,IAAqB,GAAIC,kBAAmBA,MAAqB,IAGvGC,GAAgBC,YAAkB7J,EAAeyJ,IAGjDK,GAAiBD,YAAkB9J,GAAY0J,GAAgBxE,IAK/D8E,GAAmBF,YAAkB5J,EAAiBwJ,IAQtDO,GAAazT,YAAWyJ,EADZ,8CAElB,GAA+B9J,mBAAS,GAAxC,qBAAO+T,GAAP,MAAiBC,GAAjB,MACA,GAAoChU,mBAAS,KAA7C,qBAAOiU,GAAP,MAAmB9B,GAAnB,MAGM+B,GAAuB,uCAAG,0CAAA/Z,EAAA,6DAC9BS,QAAQC,IAAI,wDACRsZ,EAAU,EAFgB,SAGXnD,GAAQoD,IAAIC,gBAAgB1c,GAHjB,UAIN,IADlB2c,EAHwB,QAIpBC,WAJoB,uBAK1BC,MAAM,mCALoB,0BAMxBC,EAAUH,EAAI,UACdI,EAAoB,GAPI,cAQdD,GARc,IAQ9B,2BAC8B,+CADrBL,EAAgB,SACfO,SAAShd,UACfiD,QAAQC,IAAR,WAAgBuZ,EAAIQ,QAApB,aAAgCR,EAAIS,YAAYC,QAC7CC,EAAO,uEAAyEX,EAAIQ,QAAU,OAClGF,EAAkBzM,KAAK,CAAEjJ,GAAIoV,EAAIQ,QAASE,MAAOC,EAAMC,MAAOrd,KAE3Dwc,EAAU,GACdvZ,QAAQC,IAAI,uCAfgB,8BAkB9B+W,EAAqB8C,GAlBS,4CAAH,qDA4B7BnR,qBAAU,WAEN4N,KAqBD,CACDpH,EACApS,EACAqX,GACAoB,GACAkD,GACAI,GACAE,GACAC,GACA9E,KAGF,IAAM9E,GAAgBvI,sBAAW,sBAAC,4BAAAvH,EAAA,sEAET6P,GAAUiL,kBAFD,OAE1B3a,EAF0B,OAGhCkX,EAAoB,IAAI7X,GAAOyT,UAAU8H,aAAa5a,IAEtDA,EAAS8B,GAAG,gBAAgB,SAAAvH,GAC1B+F,QAAQC,IAAR,2BAAgChG,EAAhC,yBACA2c,EAAoB,IAAI7X,GAAOyT,UAAU8H,aAAa5a,OAGxDA,EAAS8B,GAAG,mBAAmB,WAC7BxB,QAAQC,IAAR,oBACA2W,EAAoB,IAAI7X,GAAOyT,UAAU8H,aAAa5a,OAIxDA,EAAS8B,GAAG,cAAc,SAAC+Y,EAAMC,GAC/Bxa,QAAQC,IAAIsa,EAAMC,GAClBlL,QAlB8B,2CAqB/B,CAACsH,IAEJjO,qBAAU,WACJyG,GAAUI,gBACZH,KAGgB,uCAAG,sBAAA9P,EAAA,sEACT6P,GAAUqL,YADD,kCAEjBpL,KAFiB,2CAAH,oDAKlBqL,KACC,CAACrL,KAEJ,IAAMsL,GAAiBC,aAAiB9B,GAAe,iBAAkB,iBAAkB5J,EAAe,GACvG3P,GAAG,EAGGsb,GAAiB,SAAA7d,GACtB,IACCoc,GAAWpc,GACXuC,IAAK,IAAc,KAARvC,GAAe+I,QAAQ,GAClC/F,QAAQC,IAAI,gBAAkBV,IAC9BgY,GAAchY,IACb,MAAOyD,GAAIhD,QAAQC,IAAI+C,KAIvB8X,GAAQ,uCAAE,oCAAAvb,EAAA,6DACVwb,EAAM,GADI,SAEOjC,GAAckC,eAAeC,iBAAiBle,EAAS,GAF9D,OAEVme,EAFU,OAGLC,EAAI,EAHC,YAGEA,EAAID,GAHN,iCAIUpC,GAAckC,eAAeI,UAAUre,EAAS,EAAGoe,GAJ7D,cAIPE,EAJO,iBAKKvC,GAAckC,eAAeM,WAAWD,EAAU,GALvD,QAKPE,EALO,OAMVR,EAAIA,EAAIS,OAAO,YAAaH,EAAW,SAAUI,GAAQF,IAN/C,QAGgBJ,IAHhB,uBAQdO,GAAgBX,GARF,4CAAF,qDAWRY,GAAW,uCAAG,WAAOxJ,EAAOtQ,GAAd,qBAAAtC,EAAA,6DACZG,EAAW,IAAIX,GAAOyT,UAAU8H,aAAajgB,OAAOsa,UACpDhV,EAASD,EAASK,YAClB6b,EAAiB,IAAI7c,GAAO8c,SAAS,6CAA8CC,GAAUpc,GAC7Fqc,EAAmBH,EAAeI,QAAQrc,GAJ9B,kBAMVoc,EAAiBE,QAAQ,6CAA8Cpa,GAN7D,uDAOP+X,MAAK,KAAK,iBAAkB5Z,QAAQC,IAAR,MAPrB,yDAAH,wDAUjB,SAASwb,GAAQS,GAIf,OAFmB,IAAIjR,KADG,IAALiR,GAEYC,iBAInC,IAAMC,GAAI,uCAAG,sBAAA7c,EAAA,6DACXS,QAAQC,IAAI,cAAeoZ,GAAY,aAAcF,GAAW,qBAAsBjC,GAD3E,SAEL7X,GAAI2Z,GAAegC,eAAeoB,KAAKhF,EAAO+B,GAAUjC,EAAiBnY,GAAOkC,MAAM2N,WAAWyK,GAAa,MAFzG,2CAAH,qDAMJ7T,GAAU6W,YAAkBvD,GAAe,WAAY,YAAa,CAAC/b,IAE3E,IADoByI,IAAWA,GAAQ8W,UAAY9W,GAAQ8W,WACXlX,sBAAhD,qBACA,IADA,YACwCA,sBAAxC,qBAAOmX,GAAP,MAAqBb,GAArB,MAEMI,GAAW,CACf,kDAQIU,GAAU,uCAAG,4BAAAjd,EAAA,sEACSuZ,GAAckC,eAAeyB,mBAAmBrF,EAAM,GAD/D,cACXsF,EADW,OAEjB9C,MAAM8C,GAFW,SAGXrd,GAAI2Z,GAAegC,eAAe2B,UAAUvF,EAAM,EAAE,CAACpa,MAAO0f,KAHjD,2CAAH,qDAMVE,GAAkB1N,GAAiBA,EAAc2N,aAAuD,IAAzCxI,EAActa,KAAKuH,QAAQ,SAEhG,OACE,sBAAKoS,UAAU,MAAf,UAEE,cAAC9C,GAAD,UAEE,qBAAK9S,MAAO,CAAEqJ,SAAU,WAAYlD,QAAS,OAAQ+M,cAAe,UAApE,SACE,sBAAKlT,MAAO,CAAEmG,QAAS,OAAQgN,KAAM,GAArC,UAvTmB,MAiUjB,cAAClC,GAAD,CACE+N,UAnUY,KAoUZ/f,QAASA,EACTmS,cAAeA,EACfD,WAAYA,GACZE,gBAAiBA,EACjBpU,MAAOA,GACPqU,UAAWA,GACXC,cAAeA,GACfC,kBAAmBA,GACnBpV,cAAeA,WAKtBsb,GAAiBuH,IAAIhe,GAAO8Q,UAAUmN,KAAK,OAC1C,cAAC,GAAD,CAAY9N,cAAeA,EAAemF,cAAeA,EAAetX,QAASA,IAEnF,cAAC,GAAD,CACEmX,aAtVa,KAuVbC,aAAcA,GACdC,gBAAiBA,GACjBC,cAAeA,EACf/E,kBAAmBA,GACnBgF,qBAzVqB,QA2VvB,eAAC,IAAD,CAAMxW,MAAO,CAAEsT,UAAW,SAAUjJ,UAAW,IAAM8U,aAAc,CAAC3iB,EAAS4iB,UAAW1U,KAAK,aAA7F,UACE,cAAC,IAAK2U,KAAN,UACE,cAAC,IAAD,CAAMtO,GAAG,IAAT,mBADa,KAGf,cAAC,IAAKsO,KAAN,UACE,cAAC,IAAD,CAAMtO,GAAG,SAAT,yBADa,UAGf,cAAC,IAAKsO,KAAN,UACE,cAAC,IAAD,CAAMtO,GAAG,QAAT,oBADa,aAKjB,eAAC,IAAD,WACE,eAAC,IAAD,CAAOuO,OAAK,EAACC,KAAK,IAAlB,UAEA,yDACJ,cAAC,IAAD,CAAQC,aAAa,qBAAqBxf,MAAO,CAACwJ,MAAO,KAAO9I,SAvU7C,SAACxB,GAEpBma,EAAoBna,GACpBgD,QAAQC,IAAI,4BAA6BjD,GAExCia,EADS,GAAPja,EACe,mDAEA,8CAiUhBmD,QAAS,CACP,CAACnD,MAAO,6CAA8CugB,MAAO,sBAC7D,CAACvgB,MAAO,GAAGugB,MAAO,cAAe7S,UAAU,MAG/C,6DAA+B,mBAAGzM,KAAK,UAAR,2BAT3B,gBAUSlB,EAAQ,uBACtB,yEAA4CgC,GAAOkC,MAAM6E,YAAYoT,OACrE,gCACH,cAAC,IAAD,CAAQxK,KAAK,UAAUiB,MAAM,QAAQvJ,QAAS,WAAMkT,MAApD,0CAEA,cAAC,IAAD,CAAMlV,GAAG,2BAA2BoZ,WAAYzG,EAAmB0G,WAAY,SAAAC,GAC3D,OACpB,eAAC,IAAKP,KAAN,sBACWO,EAAKtZ,GAAG,uBAClB,qBAAKyR,IAAM6H,EAAKxD,MAAO5S,MAAO,IAAKqW,MAAM,WAC1C,wBAAOzX,QAAW,GAAlB,UACE,+BAAI,2CAAkB,6BAAI,cAAC,IAAD,CAAa0X,IAAK,EAAGC,IAAK,IAAOP,aAAcI,EAAKtZ,GAAIsG,UAAY,EAAMlM,SAAU6Y,EAAUvZ,MAAO,CAAEwJ,MAAO,YAC1I,+BAAI,kDAAyB,6BAC5B,cAAC,IAAD,CAAasW,IAAK,EAAGC,IAAK,GAAI9V,YAAa,gBAAiBuV,aAAc,EAAG9e,SAAUqc,GAAgB/c,MAAO,CAAEwJ,MAAO,YAEvH,+BAAI,gDAAuB,6BAC3B,cAAC,IAAD,CAAasW,IAAK,GAAIC,IAAK,IAAKC,KAAM,IAAM9gB,MAAOqc,GAAY7a,SAAU8Y,EAAYxZ,MAAO,CAAEwJ,MAAO,eAErG,cAAC,IAAD,CAAQoH,KAAK,UAAUiB,MAAM,QAAQvJ,QAAS,SAAC+L,GAAD,OAAWwJ,GAAYxJ,EAAOuL,EAAKtZ,KAAjF,qBAAwG,IACxG,cAAC,IAAD,CAAQsK,KAAK,UAAUiB,MAAM,QAAQvJ,QAASgW,GAA9C,kBAAiE,mCAS1D,cAAC,IAAD,CAAOiB,KAAK,SAAZ,SACA,sBAAKvf,MAAO,CAAEwJ,MAAO,IAAK6J,OAAQ,OAAQ4M,gBAAiB,YAAaC,OAAO,GAA/E,UACP,4CACA,cAAC,IAAD,CAAQV,aAAa,qBAAqBjP,SAAS,EAAQvQ,MAAO,CAACwJ,MAAO,KACrEnH,QAAS,CACP,CAACnD,MAAO,IAAKugB,MAAO,sBACpB,CAACvgB,MAAO,IAAIugB,MAAO,gBALnB,IAOD,uBACN,cAAC,IAAD,CAAQ7O,KAAK,UAAUiB,MAAM,QAAQvJ,QAAS,WAAM0U,MAApD,2BAAyF,IACzF,4CACCyB,GACD,yGAEA,cAAC,IAAD,CAAaqB,IAAK,EAAGC,IAAK,IAAK9V,YAAa,SAAUvJ,SA5XlC,SAAAxB,GACjBqa,EAASra,IA2X+Dc,MAAO,CAACwJ,MAAO,IAAK2W,aAAc,MAAQ,uBACrH,cAAC,IAAD,CAAQvP,KAAK,UAAUiB,MAAM,QAAQvJ,QAAS,WAAMoW,MAApD,wBACD,uBACA,cAAC,IAAD,CAAMgB,WAAY7C,GACF8C,WAAY,SAAAC,GACV,OACjB,eAAC,IAAKP,KAAN,WACC,sBAAMrf,MAAO,CAAEQ,SAAU,GAAI+M,YAAa,GAA1C,SAA+C,iDAAoBqS,EAAKQ,KAAK,GAAG5B,WAAjC,wBAC/C,uBAAMxe,MAAO,CAAEQ,SAAU,GAAI+M,YAAa,GAA1C,8BAAkEtM,GAAOkC,MAAM6E,YAAa4X,EAAKQ,KAAK,IAAtG,UAAuH,uBAFxH,WAGWR,EAAKQ,KAAK,KAHLR,EAAK,YAYd,cAAC,IAAD,CAAOL,KAAK,QAAZ,SACA,cAAC,GAAD,SAIF,cAAC,GAAD,IAGA,sBAAKvf,MAAO,CAAEqJ,SAAU,QAASiK,UAAW,OAAQhK,KAAM,EAAGwM,OAAQ,GAAI1N,QAAS,IAAlF,UACE,eAAC,IAAD,CAAKiY,MAAM,SAASC,OAAQ,CAAC,EAAG,GAAhC,UACE,cAAC,IAAD,CAAKC,KAAM,EAAX,SACE,cAAC9M,GAAD,CAAMxW,MAAOA,GAAOgC,QAASA,EAAS4U,SAAU9X,QAGlD,cAAC,IAAD,CAAKwkB,KAAM,EAAGvgB,MAAO,CAAEsT,UAAW,SAAU5G,QAAS,IAArD,SACE,cAACgG,GAAD,CAAUxV,SAAUA,OAEtB,cAAC,IAAD,CAAKqjB,KAAM,EAAGvgB,MAAO,CAAEsT,UAAW,SAAU5G,QAAS,GAArD,SACE,eAAC,IAAD,CACEpE,QAAS,WACP/L,OAAOqH,KAAK,iDAEd9D,KAAK,QACL+R,MAAM,QALR,UAOE,sBAAM7R,MAAO,CAAEuN,YAAa,GAAKoF,KAAK,MAAM,aAAW,UAAvD,0BAPF,kBAeJ,cAAC,IAAD,CAAK0N,MAAM,SAASC,OAAQ,CAAC,EAAG,GAAhC,SACE,cAAC,IAAD,CAAKC,KAAM,GAAX,SAGIzB,GACE,cAAC9M,GAAD,CAAQZ,cAAeA,EAAenU,MAAOA,GAAOoC,YAAagS,IAEjE,cErhBVsE,I,QAAS,CACbM,KAAK,GAAD,OAAK5a,IAAL,mBACJ6a,MAAM,GAAD,OAAK7a,IAAL,sBAGDmlB,GAAYjkB,OAAOyQ,aAAaC,QAAQ,SAExCwT,GAAc,kEAEdC,GAAS,IAAIC,IAAa,CAC9BC,IAAKH,GACLI,MAAO,IAAIC,MAGbC,IAASC,OACP,cAACC,EAAA,EAAD,CAAgBP,OAAQA,GAAxB,SACE,cAAC,IAAD,CAAuBQ,SAAUvL,GAAQwL,aAAcX,IAAa,QAApE,SACE,cAAC,IAAD,UACE,cAAC,GAAD,CAAKC,YAAaA,WAIxB5Q,SAASuR,eAAe,U,kBCqvB1BC,EAAOC,QAAU,CACf,EAAG,CACDC,UAAW,CACTC,IAAK,CACHviB,QAAS,6CACTwiB,IA1jBO,CACb,CACEC,OAAQ,CACN,CACEC,aAAc,UACd1lB,KAAM,WACN2U,KAAM,YAGVgR,SAAS,EACTC,gBAAiB,aACjBjR,KAAM,eAER,CACEkR,WAAW,EACXJ,OAAQ,CACN,CACEK,SAAS,EACTJ,aAAc,UACd1lB,KAAM,MACN2U,KAAM,WAER,CACEmR,SAAS,EACTJ,aAAc,UACd1lB,KAAM,MACN2U,KAAM,WAER,CACEmR,SAAS,EACTJ,aAAc,UACd1lB,KAAM,MACN2U,KAAM,YAGV3U,KAAM,WACN2U,KAAM,SAER,CACEkR,WAAW,EACXJ,OAAQ,CACN,CACEK,SAAS,EACTJ,aAAc,SACd1lB,KAAM,MACN2U,KAAM,UAER,CACEmR,SAAS,EACTJ,aAAc,UACd1lB,KAAM,MACN2U,KAAM,WAER,CACEmR,SAAS,EACTJ,aAAc,UACd1lB,KAAM,OACN2U,KAAM,WAER,CACEmR,SAAS,EACTJ,aAAc,UACd1lB,KAAM,OACN2U,KAAM,WAER,CACEmR,SAAS,EACTJ,aAAc,QACd1lB,KAAM,OACN2U,KAAM,UAGV3U,KAAM,UACN2U,KAAM,SAER,CACEkR,WAAW,EACXJ,OAAQ,CACN,CACEK,SAAS,EACTJ,aAAc,UACd1lB,KAAM,MACN2U,KAAM,WAER,CACEmR,SAAS,EACTJ,aAAc,UACd1lB,KAAM,MACN2U,KAAM,WAER,CACEmR,SAAS,EACTJ,aAAc,UACd1lB,KAAM,MACN2U,KAAM,YAGV3U,KAAM,WACN2U,KAAM,SAER,CACEoR,UAAU,EACVN,OAAQ,GACRzlB,KAAM,mBACNgmB,QAAS,CACP,CACEN,aAAc,UACd1lB,KAAM,GACN2U,KAAM,YAGVgR,SAAS,EACTC,gBAAiB,OACjBjR,KAAM,YAER,CACEoR,UAAU,EACVN,OAAQ,GACRzlB,KAAM,kBACNgmB,QAAS,CACP,CACEN,aAAc,UACd1lB,KAAM,GACN2U,KAAM,YAGVgR,SAAS,EACTC,gBAAiB,OACjBjR,KAAM,YAER,CACEoR,UAAU,EACVN,OAAQ,CACN,CACEC,aAAc,UACd1lB,KAAM,GACN2U,KAAM,WAER,CACE+Q,aAAc,UACd1lB,KAAM,GACN2U,KAAM,YAGV3U,KAAM,YACNgmB,QAAS,CACP,CACEN,aAAc,UACd1lB,KAAM,GACN2U,KAAM,YAGVgR,SAAS,EACTC,gBAAiB,OACjBjR,KAAM,YAER,CACEoR,UAAU,EACVN,OAAQ,CACN,CACEC,aAAc,UACd1lB,KAAM,MACN2U,KAAM,WAER,CACE+Q,aAAc,UACd1lB,KAAM,MACN2U,KAAM,YAGV3U,KAAM,UACNgmB,QAAS,CACP,CACEN,aAAc,OACd1lB,KAAM,GACN2U,KAAM,SAGVgR,SAAS,EACTC,gBAAiB,aACjBjR,KAAM,YAER,CACEoR,UAAU,EACVN,OAAQ,CACN,CACEC,aAAc,UACd1lB,KAAM,GACN2U,KAAM,YAGV3U,KAAM,YACNgmB,QAAS,CACP,CACEN,aAAc,UACd1lB,KAAM,GACN2U,KAAM,YAGVgR,SAAS,EACTC,gBAAiB,OACjBjR,KAAM,YAER,CACEoR,UAAU,EACVN,OAAQ,CACN,CACEC,aAAc,UACd1lB,KAAM,MACN2U,KAAM,WAER,CACE+Q,aAAc,UACd1lB,KAAM,MACN2U,KAAM,YAGV3U,KAAM,OACNgmB,QAAS,GACTL,SAAS,EACTC,gBAAiB,aACjBjR,KAAM,YAER,CACEoR,UAAU,EACVN,OAAQ,GACRzlB,KAAM,WACNgmB,QAAS,CACP,CACEN,aAAc,QACd1lB,KAAM,GACN2U,KAAM,UAGVgR,SAAS,EACTC,gBAAiB,OACjBjR,KAAM,YAER,CACEoR,UAAU,EACVN,OAAQ,CACN,CACEC,aAAc,UACd1lB,KAAM,MACN2U,KAAM,YAGV3U,KAAM,OACNgmB,QAAS,GACTL,SAAS,EACTC,gBAAiB,aACjBjR,KAAM,YAER,CACEoR,UAAU,EACVN,OAAQ,CACN,CACEC,aAAc,UACd1lB,KAAM,MACN2U,KAAM,WAER,CACE+Q,aAAc,UACd1lB,KAAM,MACN2U,KAAM,YAGV3U,KAAM,OACNgmB,QAAS,GACTL,SAAS,EACTC,gBAAiB,aACjBjR,KAAM,YAER,CACEoR,UAAU,EACVN,OAAQ,CACN,CACEC,aAAc,UACd1lB,KAAM,MACN2U,KAAM,WAER,CACE+Q,aAAc,UACd1lB,KAAM,MACN2U,KAAM,WAER,CACE+Q,aAAc,UACd1lB,KAAM,MACN2U,KAAM,YAGV3U,KAAM,OACNgmB,QAAS,GACTL,SAAS,EACTC,gBAAiB,aACjBjR,KAAM,YAER,CACEoR,UAAU,EACVN,OAAQ,GACRzlB,KAAM,OACNgmB,QAAS,CACP,CACEN,aAAc,SACd1lB,KAAM,GACN2U,KAAM,WAGVgR,SAAS,EACTC,gBAAiB,OACjBjR,KAAM,YAER,CACEoR,UAAU,EACVN,OAAQ,CACN,CACEC,aAAc,UACd1lB,KAAM,GACN2U,KAAM,YAGV3U,KAAM,SACNgmB,QAAS,CACP,CACEN,aAAc,UACd1lB,KAAM,GACN2U,KAAM,YAGVgR,SAAS,EACTC,gBAAiB,OACjBjR,KAAM,YAER,CACEoR,UAAU,EACVN,OAAQ,CACN,CACEC,aAAc,UACd1lB,KAAM,SACN2U,KAAM,WAER,CACE+Q,aAAc,UACd1lB,KAAM,UACN2U,KAAM,WAER,CACE+Q,aAAc,UACd1lB,KAAM,QACN2U,KAAM,WAER,CACE+Q,aAAc,UACd1lB,KAAM,SACN2U,KAAM,WAER,CACE+Q,aAAc,OACd1lB,KAAM,UACN2U,KAAM,QAER,CACE+Q,aAAc,QACd1lB,KAAM,IACN2U,KAAM,SAER,CACE+Q,aAAc,UACd1lB,KAAM,IACN2U,KAAM,WAER,CACE+Q,aAAc,UACd1lB,KAAM,IACN2U,KAAM,YAGV3U,KAAM,SACNgmB,QAAS,GACTL,SAAS,EACTC,gBAAiB,aACjBjR,KAAM,YAER,CACEoR,UAAU,EACVN,OAAQ,CACN,CACEC,aAAc,UACd1lB,KAAM,MACN2U,KAAM,WAER,CACE+Q,aAAc,UACd1lB,KAAM,MACN2U,KAAM,YAGV3U,KAAM,OACNgmB,QAAS,GACTL,SAAS,EACTC,gBAAiB,aACjBjR,KAAM,YAER,CACEoR,UAAU,EACVN,OAAQ,CACN,CACEC,aAAc,UACd1lB,KAAM,MACN2U,KAAM,WAER,CACE+Q,aAAc,UACd1lB,KAAM,MACN2U,KAAM,YAGV3U,KAAM,OACNgmB,QAAS,GACTL,SAAS,EACTC,gBAAiB,aACjBjR,KAAM,YAER,CACEoR,UAAU,EACVN,OAAQ,CACN,CACEC,aAAc,UACd1lB,KAAM,MACN2U,KAAM,YAGV3U,KAAM,OACNgmB,QAAS,GACTL,SAAS,EACTC,gBAAiB,aACjBjR,KAAM,YAER,CACEoR,UAAU,EACVN,OAAQ,GACRzlB,KAAM,SACNgmB,QAAS,CACP,CACEN,aAAc,SACd1lB,KAAM,GACN2U,KAAM,WAGVgR,SAAS,EACTC,gBAAiB,OACjBjR,KAAM,YAER,CACEoR,UAAU,EACVN,OAAQ,GACRzlB,KAAM,cACNgmB,QAAS,CACP,CACEN,aAAc,UACd1lB,KAAM,GACN2U,KAAM,YAGVgR,SAAS,EACTC,gBAAiB,OACjBjR,KAAM,YAER,CACEoR,UAAU,EACVN,OAAQ,CACN,CACEC,aAAc,UACd1lB,KAAM,MACN2U,KAAM,WAER,CACE+Q,aAAc,UACd1lB,KAAM,MACN2U,KAAM,YAGV3U,KAAM,WACNgmB,QAAS,CACP,CACEN,aAAc,OACd1lB,KAAM,GACN2U,KAAM,SAGVgR,SAAS,EACTC,gBAAiB,aACjBjR,KAAM,YAER,CACEoR,UAAU,EACVN,OAAQ,CACN,CACEC,aAAc,UACd1lB,KAAM,MACN2U,KAAM,WAER,CACE+Q,aAAc,UACd1lB,KAAM,MACN2U,KAAM,WAER,CACE+Q,aAAc,UACd1lB,KAAM,MACN2U,KAAM,YAGV3U,KAAM,eACNgmB,QAAS,CACP,CACEN,aAAc,OACd1lB,KAAM,GACN2U,KAAM,SAGVgR,SAAS,EACTC,gBAAiB,aACjBjR,KAAM,YAER,CACEoR,UAAU,EACVN,OAAQ,GACRzlB,KAAM,UACNgmB,QAAS,CACP,CACEN,aAAc,SACd1lB,KAAM,GACN2U,KAAM,WAGVgR,SAAS,EACTC,gBAAiB,OACjBjR,KAAM,YAER,CACEoR,UAAU,EACVN,OAAQ,CACN,CACEC,aAAc,UACd1lB,KAAM,GACN2U,KAAM,YAGV3U,KAAM,QACNgmB,QAAS,CACP,CACEN,aAAc,UACd1lB,KAAM,GACN2U,KAAM,YAGVgR,SAAS,EACTC,gBAAiB,OACjBjR,KAAM,cAYJsR,IAAK,CACHjjB,QAAS,6CACTwiB,IA5xBS,CACf,CACEO,UAAU,EACVN,OAAQ,GACRzlB,KAAM,OACNgmB,QAAS,CACP,CACEhmB,KAAM,GACN2U,KAAM,WAGVgR,SAAS,EACTC,gBAAiB,OACjBjR,KAAM,YAER,CACEoR,UAAU,EACVN,OAAQ,CACN,CACEzlB,KAAM,WACN2U,KAAM,WAER,CACE3U,KAAM,SACN2U,KAAM,YAGV3U,KAAM,UACNgmB,QAAS,CACP,CACEhmB,KAAM,GACN2U,KAAM,SAGVgR,SAAS,EACTC,gBAAiB,aACjBjR,KAAM,YAER,CACEoR,UAAU,EACVN,OAAQ,GACRzlB,KAAM,cACNgmB,QAAS,CACP,CACEhmB,KAAM,GACN2U,KAAM,YAGVgR,SAAS,EACTC,gBAAiB,OACjBjR,KAAM,YAER,CACEoR,UAAU,EACVN,OAAQ,CACN,CACEzlB,KAAM,QACN2U,KAAM,WAER,CACE3U,KAAM,MACN2U,KAAM,WAER,CACE3U,KAAM,SACN2U,KAAM,YAGV3U,KAAM,eACNgmB,QAAS,CACP,CACEhmB,KAAM,GACN2U,KAAM,SAGVgR,SAAS,EACTC,gBAAiB,aACjBjR,KAAM,YAER,CACEoR,UAAU,EACVN,OAAQ,GACRzlB,KAAM,WACNgmB,QAAS,CACP,CACEhmB,KAAM,GACN2U,KAAM,UAGVgR,SAAS,EACTC,gBAAiB,OACjBjR,KAAM,YAER,CACEoR,UAAU,EACVN,OAAQ,CACN,CACEzlB,KAAM,SACN2U,KAAM,YAGV3U,KAAM,YACNgmB,QAAS,CACP,CACEhmB,KAAM,UACN2U,KAAM,YAGVgR,SAAS,EACTC,gBAAiB,OACjBjR,KAAM,YAER,CACEoR,UAAU,EACVN,OAAQ,GACRzlB,KAAM,SACNgmB,QAAS,CACP,CACEhmB,KAAM,GACN2U,KAAM,WAGVgR,SAAS,EACTC,gBAAiB,OACjBjR,KAAM,YAER,CACEoR,UAAU,EACVN,OAAQ,CACN,CACEzlB,KAAM,MACN2U,KAAM,WAER,CACE3U,KAAM,SACN2U,KAAM,YAGV3U,KAAM,WACNgmB,QAAS,CACP,CACEhmB,KAAM,GACN2U,KAAM,SAGVgR,SAAS,EACTC,gBAAiB,aACjBjR,KAAM,YAER,CACEoR,UAAU,EACVN,OAAQ,CACN,CACEzlB,KAAM,SACN2U,KAAM,WAER,CACE3U,KAAM,WACN2U,KAAM,YAGV3U,KAAM,YACNgmB,QAAS,CACP,CACEhmB,KAAM,GACN2U,KAAM,YAGVgR,SAAS,EACTC,gBAAiB,OACjBjR,KAAM,YAER,CACEgR,SAAS,EACTC,gBAAiB,UACjBjR,KAAM,YAER,CACEkR,WAAW,EACXJ,OAAQ,CACN,CACEK,SAAS,EACT9lB,KAAM,QACN2U,KAAM,WAER,CACEmR,SAAS,EACT9lB,KAAM,UACN2U,KAAM,WAER,CACEmR,SAAS,EACT9lB,KAAM,QACN2U,KAAM,YAGV3U,KAAM,WACN2U,KAAM,SAER,CACEkR,WAAW,EACXJ,OAAQ,CACN,CACEK,SAAS,EACT9lB,KAAM,OACN2U,KAAM,WAER,CACEmR,SAAS,EACT9lB,KAAM,KACN2U,KAAM,WAER,CACEmR,SAAS,EACT9lB,KAAM,QACN2U,KAAM,YAGV3U,KAAM,WACN2U,KAAM,e","file":"static/js/main.def86a07.chunk.js","sourcesContent":["// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\r\nexport const INFURA_ID = process.env.REACT_APP_INFURA_KEY ?? \"460f40a260564ac4a4f4b3fffb032dad\";\r\n// My Alchemy Key, swap in yours from https://dashboard.alchemyapi.io/\r\nexport const ALCHEMY_KEY = process.env.REACT_APP_ALCHEMY_KEY ?? \"lIguUBlNorQF0qVOvhyXc57Tkgk3JynZ\";\r\n\r\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\r\nexport const ETHERSCAN_KEY = process.env.REACT_APP_ETHERSCAN_API_KEY ?? \"DNXJA8RX2Q3VZ4URQIWP7Z68CJXQZSC6AW\";\r\n\r\n// BLOCKNATIVE ID FOR Notify.js:\r\nexport const BLOCKNATIVE_DAPPID = process.env.REACT_APP_BLOCKNATIVE_DAPP_ID ?? \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\r\n\r\n// Docker Hardhat Host\r\nexport const HARDHAT_HOST = process.env.REACT_APP_HARDHAT_HOST ?? \"http://localhost\";\r\n\r\n/*\r\nDecrease the number of RPC calls by passing this value to hooks\r\nwith pollTime (useContractReader, useBalance, etc.).\r\nSet it to 0 to disable it and make RPC calls \"onBlock\".\r\nNote: this is not used when you are in the local hardhat chain.\r\n*/\r\nexport const RPC_POLL_TIME = 30000;\r\n\r\nconst localRpcUrl = process.env.REACT_APP_CODESPACES\r\n  ? `https://${window.location.hostname.replace(\"3000\", \"8545\")}`\r\n  : \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\";\r\n\r\nexport const NETWORKS = {\r\n  localhost: {\r\n    name: \"localhost\",\r\n    color: \"#666666\",\r\n    chainId: 31337,\r\n    blockExplorer: \"\",\r\n    rpcUrl: localRpcUrl,\r\n  },\r\n  mainnet: {\r\n    name: \"mainnet\",\r\n    color: \"#ff8b9e\",\r\n    chainId: 1,\r\n    rpcUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,\r\n    blockExplorer: \"https://etherscan.io/\",\r\n  },\r\n  goerli: {\r\n    name: \"goerli\",\r\n    color: \"#0975F6\",\r\n    chainId: 5,\r\n    faucet: \"https://goerli-faucet.slock.it/\",\r\n    blockExplorer: \"https://goerli.etherscan.io/\",\r\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\r\n  },\r\n  sepolia: {\r\n    name: \"sepolia\",\r\n    color: \"#87ff65\",\r\n    chainId: 11155111,\r\n    faucet: \"https://faucet.sepolia.dev/\",\r\n    blockExplorer: \"https://sepolia.etherscan.io/\",\r\n    rpcUrl: `https://sepolia.infura.io/v3/${INFURA_ID}`,\r\n  },\r\n  gnosis: {\r\n    name: \"gnosis\",\r\n    color: \"#48a9a6\",\r\n    chainId: 100,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://rpc.gnosischain.com\",\r\n    faucet: \"https://gnosisfaucet.com\",\r\n    blockExplorer: \"https://gnosisscan.io\",\r\n  },\r\n  zksyncalpha: {\r\n    name: \"zksyncalpha\",\r\n    color: \"#45488f\",\r\n    chainId: 280,\r\n    rpcUrl: \"https://zksync2-testnet.zksync.dev\",\r\n    blockExplorer: \"https://goerli.explorer.zksync.io/\",\r\n    gasPrice: 100000000,\r\n  },\r\n  chiado: {\r\n    name: \"chiado\",\r\n    color: \"#48a9a6\",\r\n    chainId: 10200,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://rpc.chiadochain.net\",\r\n    faucet: \"https://gnosisfaucet.com\",\r\n    blockExplorer: \"https://blockscout.chiadochain.net\",\r\n  },\r\n  polygon: {\r\n    name: \"polygon\",\r\n    color: \"#2bbdf7\",\r\n    chainId: 137,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://polygon-rpc.com/\",\r\n    blockExplorer: \"https://polygonscan.com/\",\r\n  },\r\n  mumbai: {\r\n    name: \"mumbai\",\r\n    color: \"#92D9FA\",\r\n    chainId: 80001,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\r\n    faucet: \"https://faucet.polygon.technology/\",\r\n    blockExplorer: \"https://mumbai.polygonscan.com/\",\r\n  },\r\n  localOptimismL1: {\r\n    name: \"localOptimismL1\",\r\n    color: \"#f01a37\",\r\n    chainId: 31337,\r\n    blockExplorer: \"\",\r\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":9545\",\r\n  },\r\n  localOptimism: {\r\n    name: \"localOptimism\",\r\n    color: \"#f01a37\",\r\n    chainId: 420,\r\n    blockExplorer: \"\",\r\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\",\r\n    gasPrice: 0,\r\n  },\r\n  goerliOptimism: {\r\n    name: \"goerliOptimism\",\r\n    color: \"#f01a37\",\r\n    chainId: 420,\r\n    blockExplorer: \"https://optimism.io\",\r\n    rpcUrl: `https://goerli.optimism.io/`,\r\n    gasPrice: 0,\r\n  },\r\n  optimism: {\r\n    name: \"optimism\",\r\n    color: \"#f01a37\",\r\n    chainId: 10,\r\n    blockExplorer: \"https://optimistic.etherscan.io/\",\r\n    rpcUrl: `https://mainnet.optimism.io`,\r\n  },\r\n  goerliArbitrum: {\r\n    name: \"goerliArbitrum\",\r\n    color: \"#28a0f0\",\r\n    chainId: 421613,\r\n    blockExplorer: \"https://goerli-rollup-explorer.arbitrum.io\",\r\n    rpcUrl: \"https://goerli-rollup.arbitrum.io/rpc/\",\r\n  },\r\n  arbitrum: {\r\n    name: \"arbitrum\",\r\n    color: \"#28a0f0\",\r\n    chainId: 42161,\r\n    blockExplorer: \"https://arbiscan.io/\",\r\n    rpcUrl: \"https://arb1.arbitrum.io/rpc\",\r\n  },\r\n  devnetArbitrum: {\r\n    name: \"devnetArbitrum\",\r\n    color: \"#28a0f0\",\r\n    chainId: 421612,\r\n    blockExplorer: \"https://nitro-devnet-explorer.arbitrum.io/\",\r\n    rpcUrl: \"https://nitro-devnet.arbitrum.io/rpc\",\r\n  },\r\n  localAvalanche: {\r\n    name: \"localAvalanche\",\r\n    color: \"#666666\",\r\n    chainId: 43112,\r\n    blockExplorer: \"\",\r\n    rpcUrl: `http://localhost:9650/ext/bc/C/rpc`,\r\n    gasPrice: 225000000000,\r\n  },\r\n  fujiAvalanche: {\r\n    name: \"fujiAvalanche\",\r\n    color: \"#666666\",\r\n    chainId: 43113,\r\n    blockExplorer: \"https://cchain.explorer.avax-test.network/\",\r\n    rpcUrl: `https://api.avax-test.network/ext/bc/C/rpc`,\r\n    gasPrice: 225000000000,\r\n  },\r\n  mainnetAvalanche: {\r\n    name: \"mainnetAvalanche\",\r\n    color: \"#666666\",\r\n    chainId: 43114,\r\n    blockExplorer: \"https://cchain.explorer.avax.network/\",\r\n    rpcUrl: `https://api.avax.network/ext/bc/C/rpc`,\r\n    gasPrice: 225000000000,\r\n  },\r\n  testnetHarmony: {\r\n    name: \"testnetHarmony\",\r\n    color: \"#00b0ef\",\r\n    chainId: 1666700000,\r\n    blockExplorer: \"https://explorer.pops.one/\",\r\n    rpcUrl: `https://api.s0.b.hmny.io`,\r\n    gasPrice: 1000000000,\r\n  },\r\n  mainnetHarmony: {\r\n    name: \"mainnetHarmony\",\r\n    color: \"#00b0ef\",\r\n    chainId: 1666600000,\r\n    blockExplorer: \"https://explorer.harmony.one/\",\r\n    rpcUrl: `https://api.harmony.one`,\r\n    gasPrice: 1000000000,\r\n  },\r\n  fantom: {\r\n    name: \"fantom\",\r\n    color: \"#1969ff\",\r\n    chainId: 250,\r\n    blockExplorer: \"https://ftmscan.com/\",\r\n    rpcUrl: `https://rpcapi.fantom.network`,\r\n    gasPrice: 1000000000,\r\n  },\r\n  testnetFantom: {\r\n    name: \"testnetFantom\",\r\n    color: \"#1969ff\",\r\n    chainId: 4002,\r\n    blockExplorer: \"https://testnet.ftmscan.com/\",\r\n    rpcUrl: `https://rpc.testnet.fantom.network`,\r\n    gasPrice: 1000000000,\r\n    faucet: \"https://faucet.fantom.network/\",\r\n  },\r\n  moonbeam: {\r\n    name: \"moonbeam\",\r\n    color: \"#53CBC9\",\r\n    chainId: 1284,\r\n    blockExplorer: \"https://moonscan.io\",\r\n    rpcUrl: \"https://rpc.api.moonbeam.network\",\r\n  },\r\n  moonriver: {\r\n    name: \"moonriver\",\r\n    color: \"#53CBC9\",\r\n    chainId: 1285,\r\n    blockExplorer: \"https://moonriver.moonscan.io/\",\r\n    rpcUrl: \"https://rpc.api.moonriver.moonbeam.network\",\r\n  },\r\n  moonbaseAlpha: {\r\n    name: \"moonbaseAlpha\",\r\n    color: \"#53CBC9\",\r\n    chainId: 1287,\r\n    blockExplorer: \"https://moonbase.moonscan.io/\",\r\n    rpcUrl: \"https://rpc.api.moonbase.moonbeam.network\",\r\n    faucet: \"https://discord.gg/SZNP8bWHZq\",\r\n  },\r\n  moonbeamDevNode: {\r\n    name: \"moonbeamDevNode\",\r\n    color: \"#53CBC9\",\r\n    chainId: 1281,\r\n    blockExplorer: \"https://moonbeam-explorer.netlify.app/\",\r\n    rpcUrl: \"http://127.0.0.1:9933\",\r\n  },\r\n};\r\n\r\nexport const NETWORK = chainId => {\r\n  for (const n in NETWORKS) {\r\n    if (NETWORKS[n].chainId === chainId) {\r\n      return NETWORKS[n];\r\n    }\r\n  }\r\n};\r\n","import { Skeleton, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\nimport Blockies from \"react-blockies\";\r\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\r\n\r\n// changed value={address} to address={address}\r\n\r\nconst { Text } = Typography;\r\n\r\n/** \r\n  ~ What it does? ~\r\n\r\n  Displays an address with a blockie image and option to copy address\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Address\r\n    address={address}\r\n    ensProvider={mainnetProvider}\r\n    blockExplorer={blockExplorer}\r\n    fontSize={fontSize}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\")\r\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\r\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\r\n  - Provide fontSize={fontSize} to change the size of address text\r\n**/\r\n\r\nconst blockExplorerLink = (address, blockExplorer) => `${blockExplorer || \"https://etherscan.io/\"}address/${address}`;\r\n\r\nexport default function Address(props) {\r\n  const { currentTheme } = useThemeSwitcher();\r\n  const address = props.value || props.address;\r\n  const ens = useLookupAddress(props.ensProvider, address);\r\n  const ensSplit = ens && ens.split(\".\");\r\n  const validEnsCheck = ensSplit && ensSplit[ensSplit.length - 1] === \"eth\";\r\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\r\n  let displayAddress = address?.substr(0, 5) + \"...\" + address?.substr(-4);\r\n\r\n  if (validEnsCheck) {\r\n    displayAddress = ens;\r\n  } else if (props.size === \"short\") {\r\n    displayAddress += \"...\" + address.substr(-4);\r\n  } else if (props.size === \"long\") {\r\n    displayAddress = address;\r\n  }\r\n\r\n  if (!address) {\r\n    return (\r\n      <span>\r\n        <Skeleton avatar paragraph={{ rows: 1 }} />\r\n      </span>\r\n    );\r\n  }\r\n\r\n  if (props.minimized) {\r\n    return (\r\n      <span style={{ verticalAlign: \"middle\" }}>\r\n        <a\r\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n          target=\"_blank\"\r\n          href={etherscanLink}\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\r\n        </a>\r\n      </span>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      <span style={{ verticalAlign: \"middle\" }}>\r\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\r\n      </span>\r\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\r\n        {props.onChange ? (\r\n          <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\r\n            <a\r\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n              target=\"_blank\"\r\n              href={etherscanLink}\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              {displayAddress}\r\n            </a>\r\n          </Text>\r\n        ) : (\r\n          <Text copyable={{ text: address }}>\r\n            <a\r\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n              target=\"_blank\"\r\n              href={etherscanLink}\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              {displayAddress}\r\n            </a>\r\n          </Text>\r\n        )}\r\n      </span>\r\n    </span>\r\n  );\r\n}\r\n","import { notification } from \"antd\";\r\nimport Notify from \"bnc-notify\";\r\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\r\n\r\nconst { ethers } = require(\"ethers\");\r\n\r\n// this should probably just be renamed to \"notifier\"\r\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\r\n// https://docs.blocknative.com/notify\r\nconst callbacks = {};\r\n\r\nconst DEBUG = true;\r\n\r\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\r\n  if (typeof providerOrSigner !== \"undefined\") {\r\n    // eslint-disable-next-line consistent-return\r\n    return async (tx, callback) => {\r\n      let signer;\r\n      let network;\r\n      let provider;\r\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\r\n        provider = providerOrSigner.provider;\r\n        signer = providerOrSigner;\r\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\r\n      } else if (providerOrSigner._isProvider) {\r\n        provider = providerOrSigner;\r\n        signer = providerOrSigner.getSigner();\r\n        network = await providerOrSigner.getNetwork();\r\n      }\r\n\r\n      console.log(\"network\", network);\r\n      var options = null;\r\n      var notify = null;\r\n      options = {\r\n        dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\r\n        system: \"ethereum\",\r\n        networkId: network.chainId,\r\n        // darkMode: Boolean, // (default: false)\r\n        transactionHandler: txInformation => {\r\n          if (DEBUG) console.log(\"HANDLE TX\", txInformation);\r\n          const possibleFunction = callbacks[txInformation.transaction.hash];\r\n          if (typeof possibleFunction === \"function\") {\r\n            possibleFunction(txInformation.transaction);\r\n          }\r\n        },\r\n      };\r\n\r\n      notify = Notify(options);\r\n\r\n      let etherscanNetwork = \"\";\r\n      if (network.name && network.chainId > 1) {\r\n        etherscanNetwork = network.name + \".\";\r\n      }\r\n\r\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\r\n      if (network.chainId === 100) {\r\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\r\n      }\r\n\r\n      try {\r\n        let result;\r\n        if (tx instanceof Promise) {\r\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\r\n          result = await tx;\r\n        } else {\r\n          if (!tx.gasPrice) {\r\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\r\n          }\r\n          if (!tx.gasLimit) {\r\n            tx.gasLimit = ethers.utils.hexlify(120000);\r\n          }\r\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\r\n          result = await signer.sendTransaction(tx);\r\n        }\r\n        if (DEBUG) console.log(\"RESULT:\", result);\r\n        // console.log(\"Notify\", notify);\r\n\r\n        if (callback) {\r\n          callbacks[result.hash] = callback;\r\n        }\r\n\r\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\r\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\r\n          const { emitter } = notify.hash(result.hash);\r\n          emitter.on(\"all\", transaction => {\r\n            return {\r\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\r\n            };\r\n          });\r\n        } else {\r\n          notification.info({\r\n            message: \"Local Transaction Sent\",\r\n            description: result.hash,\r\n            placement: \"bottomRight\",\r\n          });\r\n          // on most networks BlockNative will update a transaction handler,\r\n          // but locally we will set an interval to listen...\r\n          if (callback) {\r\n            const txResult = await tx;\r\n            const listeningInterval = setInterval(async () => {\r\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\r\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\r\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\r\n                callback({ ...txResult, ...currentTransactionReceipt });\r\n                clearInterval(listeningInterval);\r\n              }\r\n            }, 500);\r\n          }\r\n        }\r\n\r\n        if (typeof result.wait === \"function\") {\r\n          await result.wait();\r\n        }\r\n\r\n        return result;\r\n      } catch (e) {\r\n        if (DEBUG) console.log(e);\r\n        // Accounts for Metamask and default signer on all networks\r\n        let message =\r\n          e.data && e.data.message\r\n            ? e.data.message\r\n            : e.error && JSON.parse(JSON.stringify(e.error)).body\r\n            ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message\r\n            : e.data\r\n            ? e.data\r\n            : JSON.stringify(e);\r\n        if (!e.error && e.message) {\r\n          message = e.message;\r\n        }\r\n\r\n        console.log(\"Attempt to clean up:\", message);\r\n        try {\r\n          let obj = JSON.parse(message);\r\n          if (obj && obj.body) {\r\n            let errorObj = JSON.parse(obj.body);\r\n            if (errorObj && errorObj.error && errorObj.error.message) {\r\n              message = errorObj.error.message;\r\n            }\r\n          }\r\n        } catch (e) {\r\n          //ignore\r\n        }\r\n\r\n        notification.error({\r\n          message: \"Transaction Error\",\r\n          description: message,\r\n        });\r\n        if (callback && typeof callback === \"function\") {\r\n          callback(e);\r\n        }\r\n      }\r\n    };\r\n  }\r\n}\r\n","import Portis from \"@portis/web3\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport Authereum from \"authereum\";\r\nimport Fortmatic from \"fortmatic\";\r\nimport WalletLink from \"walletlink\";\r\nimport { ALCHEMY_KEY, INFURA_ID } from \"../constants\";\r\nimport { SafeAppWeb3Modal } from \"@gnosis.pm/safe-apps-web3modal\";\r\n\r\n// Coinbase walletLink init\r\nconst walletLink = new WalletLink({\r\n  appName: \"coinbase\",\r\n});\r\n\r\n// WalletLink provider\r\nconst walletLinkProvider = walletLink.makeWeb3Provider(`https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`, 1);\r\n\r\n// Portis ID: 6255fb2b-58c8-433b-a2c9-62098c05ddc9\r\n/**\r\n  Web3 modal helps us \"connect\" external wallets:\r\n**/\r\nconst web3ModalSetup = () =>\r\n  new SafeAppWeb3Modal({\r\n    network: \"mainnet\", // Optional. If using WalletConnect on xDai, change network to \"xdai\" and add RPC info below for xDai chain.\r\n    cacheProvider: true, // optional\r\n    theme: \"light\", // optional. Change to \"dark\" for a dark theme.\r\n    providerOptions: {\r\n      walletconnect: {\r\n        package: WalletConnectProvider, // required\r\n        options: {\r\n          bridge: \"https://polygon.bridge.walletconnect.org\",\r\n          infuraId: INFURA_ID,\r\n          rpc: {\r\n            10: \"https://mainnet.optimism.io\", // xDai\r\n            100: \"https://rpc.gnosischain.com\", // xDai\r\n            137: \"https://polygon-rpc.com\",\r\n            31337: \"http://localhost:8545\",\r\n            42161: \"https://arb1.arbitrum.io/rpc\",\r\n            80001: \"https://rpc-mumbai.maticvigil.com\",\r\n            71401: \"https://godwoken-testnet-v1.ckbapp.dev\",\r\n          },\r\n        },\r\n      },\r\n      portis: {\r\n        display: {\r\n          logo: \"https://user-images.githubusercontent.com/9419140/128913641-d025bc0c-e059-42de-a57b-422f196867ce.png\",\r\n          name: \"Portis\",\r\n          description: \"Connect to Portis App\",\r\n        },\r\n        package: Portis,\r\n        options: {\r\n          id: \"6255fb2b-58c8-433b-a2c9-62098c05ddc9\",\r\n        },\r\n      },\r\n      fortmatic: {\r\n        package: Fortmatic, // required\r\n        options: {\r\n          key: \"pk_live_5A7C91B2FC585A17\", // required\r\n        },\r\n      },\r\n      // torus: {\r\n      //   package: Torus,\r\n      //   options: {\r\n      //     networkParams: {\r\n      //       host: \"https://localhost:8545\", // optional\r\n      //       chainId: 1337, // optional\r\n      //       networkId: 1337 // optional\r\n      //     },\r\n      //     config: {\r\n      //       buildEnv: \"development\" // optional\r\n      //     },\r\n      //   },\r\n      // },\r\n      \"custom-walletlink\": {\r\n        display: {\r\n          logo: \"https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0\",\r\n          name: \"Coinbase\",\r\n          description: \"Connect to Coinbase Wallet (not Coinbase App)\",\r\n        },\r\n        package: walletLinkProvider,\r\n        connector: async (provider, _options) => {\r\n          await provider.enable();\r\n          return provider;\r\n        },\r\n      },\r\n      authereum: {\r\n        package: Authereum, // required\r\n      },\r\n    },\r\n  });\r\n\r\nexport default web3ModalSetup;\r\n","import { create } from \"ipfs-http-client\";\r\nimport { BufferList } from \"bl\";\r\nexport const ipfs = create({ host: \"ipfs.infura.io\", port: \"5001\", protocol: \"https\" });\r\n\r\nexport async function addToIPFS(file) {\r\n  const fileAdded = await ipfs.add(file);\r\n\r\n  return fileAdded;\r\n}\r\n\r\nexport function urlFromCID(cid) {\r\n  return `https://ipfs.infura.io/ipfs/${cid}`;\r\n}\r\n\r\nexport async function getFromIPFS(hashToGet) {\r\n  for await (const file of ipfs.cat(hashToGet)) {\r\n    const content = new BufferList(file).toString();\r\n\r\n    return content;\r\n  }\r\n}\r\n","import { RPC_POLL_TIME } from \"../constants\";\r\n\r\n// Get the appropriate polling time for a given provider.\r\nexport const getRPCPollTime = provider => {\r\n  // No polling interval on local hardhat chain.\r\n  if (provider?._network?.chainId === 31337) {\r\n    return 0;\r\n  } else {\r\n    return RPC_POLL_TIME;\r\n  }\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useBalance } from \"eth-hooks\";\r\nimport { getRPCPollTime } from \"../helpers\";\r\n\r\nconst { utils } = require(\"ethers\");\r\n\r\n/**\r\n  ~ What it does? ~\r\n\r\n  Displays a balance of given address in ether & dollar\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Balance\r\n    address={address}\r\n    provider={mainnetProvider}\r\n    price={price}\r\n  />\r\n\r\n  ~ If you already have the balance as a bignumber ~\r\n  <Balance\r\n    balance={balance}\r\n    price={price}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address={address} and get balance corresponding to given address\r\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\r\n  - Provide price={price} of ether and get your balance converted to dollars\r\n**/\r\n\r\nexport default function Balance(props) {\r\n  const [dollarMode, setDollarMode] = useState(true);\r\n\r\n  let localProviderPollingTime = getRPCPollTime(props.provider);\r\n\r\n  const balance = useBalance(props.provider, props.address, localProviderPollingTime);\r\n  let floatBalance = parseFloat(\"0.00\");\r\n  let usingBalance = balance;\r\n\r\n  if (typeof props.balance !== \"undefined\") usingBalance = props.balance;\r\n  if (typeof props.value !== \"undefined\") usingBalance = props.value;\r\n\r\n  if (usingBalance) {\r\n    const etherBalance = utils.formatEther(usingBalance);\r\n    parseFloat(etherBalance).toFixed(2);\r\n    floatBalance = parseFloat(etherBalance);\r\n  }\r\n\r\n  let displayBalance = floatBalance.toFixed(4);\r\n\r\n  const price = props.price || props.dollarMultiplier || 1;\r\n\r\n  if (dollarMode) {\r\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\r\n  }\r\n\r\n  return (\r\n    <span\r\n      style={{\r\n        verticalAlign: \"middle\",\r\n        fontSize: props.size ? props.size : 24,\r\n        padding: 8,\r\n        cursor: \"pointer\",\r\n      }}\r\n      onClick={() => {\r\n        setDollarMode(!dollarMode);\r\n      }}\r\n    >\r\n      {displayBalance}\r\n    </span>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\n\r\n// provides a blockie image for the address using \"react-blockies\" library\r\n\r\nexport default function Blockie(props) {\r\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\r\n    return <span />;\r\n  }\r\n  // eslint-disable-next-line react/jsx-props-no-spreading\r\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\r\n}\r\n","import { Badge, Input } from \"antd\";\r\nimport React, { useCallback, useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\r\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\r\nimport QrReader from \"react-qr-reader\";\r\n\r\nimport Blockie from \"./Blockie\";\r\n\r\nconst isENS = (address = \"\") => address.endsWith(\".eth\") || address.endsWith(\".xyz\");\r\n\r\n// probably we need to change value={toAddress} to address={toAddress}\r\n\r\n/** \r\n  ~ What it does? ~\r\n\r\n  Displays an address input with QR scan option\r\n\r\n  ~ How can I use? ~\r\n\r\n  <AddressInput\r\n    autoFocus\r\n    ensProvider={mainnetProvider}\r\n    placeholder=\"Enter address\"\r\n    value={toAddress}\r\n    onChange={setToAddress}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n  - Provide placeholder=\"Enter address\" value for the input\r\n  - Value of the address input is stored in value={toAddress}\r\n  - Control input change by onChange={setToAddress}\r\n                          or onChange={address => { setToAddress(address);}}\r\n**/\r\nexport default function AddressInput(props) {\r\n  const { ensProvider, onChange } = props;\r\n  const [value, setValue] = useState(props.value);\r\n  const [scan, setScan] = useState(false);\r\n\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n  const ens = useLookupAddress(props.ensProvider, currentValue);\r\n\r\n  const updateAddress = useCallback(\r\n    async newValue => {\r\n      if (typeof newValue !== \"undefined\") {\r\n        let address = newValue;\r\n        if (isENS(address)) {\r\n          try {\r\n            const possibleAddress = await ensProvider.resolveName(address);\r\n            if (possibleAddress) {\r\n              address = possibleAddress;\r\n            }\r\n            // eslint-disable-next-line no-empty\r\n          } catch (e) {}\r\n        }\r\n        setValue(address);\r\n        if (typeof onChange === \"function\") {\r\n          onChange(address);\r\n        }\r\n      }\r\n    },\r\n    [ensProvider, onChange],\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {scan ? (\r\n        <div\r\n          style={{\r\n            zIndex: 256,\r\n            position: \"absolute\",\r\n            left: 0,\r\n            top: 0,\r\n            width: \"100%\",\r\n          }}\r\n          onClick={() => {\r\n            setScan(false);\r\n          }}\r\n        >\r\n          <QrReader\r\n            delay={250}\r\n            resolution={1200}\r\n            onError={e => {\r\n              console.log(\"SCAN ERROR\", e);\r\n              setScan(false);\r\n            }}\r\n            onScan={newValue => {\r\n              if (newValue) {\r\n                console.log(\"SCAN VALUE\", newValue);\r\n                let possibleNewValue = newValue;\r\n                if (possibleNewValue.indexOf(\"/\") >= 0) {\r\n                  possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\r\n                  console.log(\"CLEANED VALUE\", possibleNewValue);\r\n                }\r\n                setScan(false);\r\n                updateAddress(possibleNewValue);\r\n              }\r\n            }}\r\n            style={{ width: \"100%\" }}\r\n          />\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <Input\r\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\r\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\r\n        autoComplete=\"off\"\r\n        autoFocus={props.autoFocus}\r\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\r\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\r\n        value={ethers.utils.isAddress(currentValue) && !isENS(currentValue) && isENS(ens) ? ens : currentValue}\r\n        addonAfter={\r\n          <div\r\n            style={{ marginTop: 4, cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              setScan(!scan);\r\n            }}\r\n          >\r\n            <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\r\n              <QrcodeOutlined style={{ fontSize: 18 }} />\r\n            </Badge>{\" \"}\r\n            Scan\r\n          </div>\r\n        }\r\n        onChange={e => {\r\n          updateAddress(e.target.value);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import { Input } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n// small change in useEffect, display currentValue if it's provided by user\r\n\r\n/**\r\n  ~ What it does? ~\r\n\r\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\r\n\r\n  ~ How can I use? ~\r\n\r\n  <EtherInput\r\n    autofocus\r\n    price={price}\r\n    value=100\r\n    placeholder=\"Enter amount\"\r\n    onChange={value => {\r\n      setAmount(value);\r\n    }}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide price={price} of ether and easily convert between USD and ETH\r\n  - Provide value={value} to specify initial amount of ether\r\n  - Provide placeholder=\"Enter amount\" value for the input\r\n  - Control input change by onChange={value => { setAmount(value);}}\r\n**/\r\n\r\nexport default function EtherInput(props) {\r\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\r\n  const [display, setDisplay] = useState();\r\n  const [value, setValue] = useState();\r\n\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n\r\n  useEffect(() => {\r\n    if (!currentValue) {\r\n      setDisplay(\"\");\r\n    }\r\n  }, [currentValue]);\r\n\r\n  return (\r\n    <Input\r\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\r\n      autoFocus={props.autoFocus}\r\n      prefix={mode === \"USD\" ? \"$\" : \"Ξ\"}\r\n      value={display}\r\n      addonAfter={\r\n        !props.price ? (\r\n          \"\"\r\n        ) : (\r\n          <div\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              if (mode === \"USD\") {\r\n                setMode(\"ETH\");\r\n                setDisplay(currentValue);\r\n              } else {\r\n                setMode(\"USD\");\r\n                if (currentValue) {\r\n                  const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\r\n                  setDisplay(usdValue);\r\n                } else {\r\n                  setDisplay(currentValue);\r\n                }\r\n              }\r\n            }}\r\n          >\r\n            {mode === \"USD\" ? \"USD 🔀\" : \"ETH 🔀\"}\r\n          </div>\r\n        )\r\n      }\r\n      onChange={async e => {\r\n        const newValue = e.target.value;\r\n        if (mode === \"USD\") {\r\n          const possibleNewValue = parseFloat(newValue);\r\n          if (possibleNewValue) {\r\n            const ethValue = possibleNewValue / props.price;\r\n            setValue(ethValue);\r\n            if (typeof props.onChange === \"function\") {\r\n              props.onChange(ethValue);\r\n            }\r\n            setDisplay(newValue);\r\n          } else {\r\n            setDisplay(newValue);\r\n          }\r\n        } else {\r\n          setValue(newValue);\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(newValue);\r\n          }\r\n          setDisplay(newValue);\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import { ethers } from \"ethers\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport { Button, Input } from \"antd\";\r\nimport Address from \"./Address\";\r\n\r\nexport default function WalletImport({ setShowImport }) {\r\n  const [importMnemonic, setImportMnemonic] = useState();\r\n  const [importMnemonicIndex, setImportMnemonicIndex] = useState(\"0\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [importPrivatekey, setImportPrivatekey] = useState();\r\n  const [importAddress, setImportAddress] = useState();\r\n\r\n  useEffect(() => {\r\n    const calculatePK = async () => {\r\n      if (importMnemonic) {\r\n        const ethersSeed = ethers.utils.mnemonicToSeed(importMnemonic, password);\r\n        const ethersHDNode = ethers.utils.HDNode.fromSeed(ethersSeed);\r\n\r\n        const wallet_hdpath = \"m/44'/60'/0'/0/\";\r\n        const fullPath = wallet_hdpath + importMnemonicIndex;\r\n\r\n        const ethersDerivedHDNode = ethersHDNode.derivePath(fullPath);\r\n        const ethersPrivateKey = ethersDerivedHDNode.privateKey;\r\n\r\n        setImportPrivatekey(ethersPrivateKey);\r\n      } else {\r\n        setImportPrivatekey();\r\n      }\r\n    };\r\n    calculatePK();\r\n  }, [importMnemonic, importMnemonicIndex, password]);\r\n\r\n  useEffect(() => {\r\n    const calculateAddress = async () => {\r\n      if (importPrivatekey) {\r\n        try {\r\n          const officialEthersWallet = new ethers.Wallet(importPrivatekey);\r\n          console.log(officialEthersWallet);\r\n          setImportAddress(officialEthersWallet.address);\r\n        } catch (e) {\r\n          console.log(e);\r\n          setImportAddress(\"\");\r\n        }\r\n      }\r\n    };\r\n    calculateAddress();\r\n  }, [importPrivatekey]);\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ marginTop: 21, width: 420 }}>\r\n        <h2>IMPORT</h2>\r\n      </div>\r\n\r\n      <div style={{ opacity: 0.5 }}>mnemonic</div>\r\n      <Input.Password\r\n        style={{ width: 380 }}\r\n        size=\"large\"\r\n        placeholder=\"word1 word2 word3\"\r\n        onChange={async e => {\r\n          setImportMnemonic(e.target.value);\r\n        }}\r\n      />\r\n\r\n      <Input\r\n        style={{ width: 69 }}\r\n        value={importMnemonicIndex}\r\n        onChange={e => {\r\n          setImportMnemonicIndex(e.target.value);\r\n        }}\r\n        size=\"large\"\r\n      />\r\n\r\n      <Input.Password\r\n        style={{ width: 380 }}\r\n        size=\"large\"\r\n        placeholder=\"optional password\"\r\n        onChange={async e => {\r\n          setPassword(e.target.value);\r\n        }}\r\n      />\r\n\r\n      <div style={{ marginTop: 21, width: 420 }}>\r\n        <h4>OR</h4>\r\n      </div>\r\n\r\n      <div style={{ opacity: 0.5 }}>private key</div>\r\n      <Input.Password\r\n        disabled={importMnemonic}\r\n        style={{ width: 420 }}\r\n        size=\"large\"\r\n        value={importPrivatekey}\r\n        placeholder=\"0x...\"\r\n        onChange={e => {\r\n          setImportPrivatekey(e.target.value);\r\n        }}\r\n      />\r\n\r\n      <hr />\r\n\r\n      {importAddress ? (\r\n        <div style={{ width: 420, height: 200 }}>\r\n          <div style={{ float: \"right\", marginTop: 64 }}>\r\n            <Address value={importAddress} />\r\n          </div>\r\n          <hr />\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n\r\n      <div style={{ float: \"right\" }}>\r\n        <Button\r\n          style={{ marginTop: 16 }}\r\n          disabled={!importPrivatekey || (importMnemonic && importMnemonic.length < 7)} //safety third!\r\n          onClick={() => {\r\n            const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\r\n            if (currentPrivateKey) {\r\n              window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\r\n            }\r\n\r\n            try {\r\n              const officialEthersWallet = new ethers.Wallet(importPrivatekey.trim());\r\n              console.log(officialEthersWallet);\r\n              setImportAddress(officialEthersWallet.address);\r\n              window.localStorage.setItem(\"metaPrivateKey\", importPrivatekey);\r\n              window.location.reload();\r\n              //setShowImport(!showImport)\r\n            } catch (e) {\r\n              console.log(e);\r\n            }\r\n          }}\r\n        >\r\n          <span style={{ marginRight: 8 }}>💾</span>Save\r\n        </Button>\r\n      </div>\r\n\r\n      <Button\r\n        style={{ marginTop: 16 }}\r\n        onClick={() => {\r\n          setShowImport(false);\r\n        }}\r\n      >\r\n        <span style={{ marginRight: 8 }}>⏪</span>Cancel\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","import { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\r\nimport { Button, message, Modal, Spin, Tooltip, Typography } from \"antd\";\r\nimport { ethers } from \"ethers\";\r\nimport QR from \"qrcode.react\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport { Transactor } from \"../helpers\";\r\nimport Address from \"./Address\";\r\nimport AddressInput from \"./AddressInput\";\r\nimport Balance from \"./Balance\";\r\nimport EtherInput from \"./EtherInput\";\r\nimport WalletImport from \"./WalletImport\";\r\n\r\nconst { Text } = Typography;\r\n\r\n/**\r\n  ~ What it does? ~\r\n\r\n  Displays a wallet where you can specify address and send USD/ETH, with options to\r\n  scan address, to convert between USD and ETH, to see and generate private keys,\r\n  to send, receive and extract the burner wallet\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Wallet\r\n    provider={userProvider}\r\n    address={address}\r\n    ensProvider={mainnetProvider}\r\n    price={price}\r\n    color='red'\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide provider={userProvider} to display a wallet\r\n  - Provide address={address} if you want to specify address, otherwise\r\n                                                    your default address will be used\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n  - Provide price={price} of ether and easily convert between USD and ETH\r\n  - Provide color to specify the color of wallet icon\r\n**/\r\n\r\nexport default function Wallet(props) {\r\n  const [signerAddress, setSignerAddress] = useState();\r\n  useEffect(() => {\r\n    async function getAddress() {\r\n      if (props.signer) {\r\n        const newAddress = await props.signer.getAddress();\r\n        setSignerAddress(newAddress);\r\n      }\r\n    }\r\n    getAddress();\r\n  }, [props.signer]);\r\n\r\n  const selectedAddress = props.address || signerAddress;\r\n\r\n  const [open, setOpen] = useState();\r\n  const [qr, setQr] = useState();\r\n  const [amount, setAmount] = useState();\r\n  const [toAddress, setToAddress] = useState();\r\n  const [pk, setPK] = useState();\r\n\r\n  const [showImport, setShowImport] = useState();\r\n\r\n  const providerSend = props.provider ? (\r\n    <Tooltip title=\"Wallet\">\r\n      <WalletOutlined\r\n        onClick={() => {\r\n          setOpen(!open);\r\n        }}\r\n        rotate={-90}\r\n        style={{\r\n          padding: props.padding ? props.padding : 7,\r\n          color: props.color ? props.color : \"\",\r\n          cursor: \"pointer\",\r\n          fontSize: props.size ? props.size : 28,\r\n          verticalAlign: \"middle\",\r\n        }}\r\n      />\r\n    </Tooltip>\r\n  ) : (\r\n    \"\"\r\n  );\r\n\r\n  const showImportButton = (\r\n    <Button\r\n      style={{ marginTop: 16 }}\r\n      onClick={() => {\r\n        setShowImport(true);\r\n      }}\r\n    >\r\n      <span style={{ marginRight: 8 }}>💾</span>Import\r\n    </Button>\r\n  );\r\n\r\n  let display;\r\n  let receiveButton;\r\n  let privateKeyButton;\r\n  if (qr) {\r\n    display = (\r\n      <div>\r\n        <div>\r\n          <Text copyable>{selectedAddress}</Text>\r\n        </div>\r\n        <QR\r\n          value={selectedAddress}\r\n          size=\"450\"\r\n          level=\"H\"\r\n          includeMargin\r\n          renderAs=\"svg\"\r\n          imageSettings={{ excavate: false }}\r\n        />\r\n      </div>\r\n    );\r\n    receiveButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Hide\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(selectedAddress);\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Private Key\r\n      </Button>\r\n    );\r\n  } else if (pk) {\r\n    const pk = localStorage.getItem(\"metaPrivateKey\");\r\n    const wallet = new ethers.Wallet(pk);\r\n\r\n    if (wallet.address !== selectedAddress) {\r\n      display = (\r\n        <div>\r\n          <b>*injected account*, private key unknown</b>\r\n        </div>\r\n      );\r\n    } else {\r\n      const extraPkDisplayAdded = {};\r\n      const extraPkDisplay = [];\r\n      extraPkDisplayAdded[wallet.address] = true;\r\n      extraPkDisplay.push(\r\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\r\n          <a href={\"/pk#\" + pk}>\r\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\r\n          </a>\r\n        </div>,\r\n      );\r\n      for (const key in localStorage) {\r\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\r\n          const pastpk = localStorage.getItem(key);\r\n          const pastwallet = new ethers.Wallet(pastpk);\r\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\r\n            extraPkDisplayAdded[pastwallet.address] = true;\r\n            extraPkDisplay.push(\r\n              <div style={{ fontSize: 16 }}>\r\n                <a href={\"/pk#\" + pastpk}>\r\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\r\n                  {pastwallet.address.substr(0, 6)}\r\n                </a>\r\n              </div>,\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      const fullLink = \"https://punkwallet.io/pk#\" + pk;\r\n\r\n      display = (\r\n        <div>\r\n          <div>\r\n            <b>Private Key:</b>\r\n            <div>\r\n              <Text style={{ fontSize: 11 }} copyable>\r\n                {pk}\r\n              </Text>\r\n            </div>\r\n\r\n            <div style={{ marginTop: 16 }}>\r\n              <div>\r\n                <b>Punk Wallet:</b>\r\n              </div>\r\n              <Text style={{ fontSize: 11 }} copyable>\r\n                {fullLink}\r\n              </Text>\r\n            </div>\r\n\r\n            <br />\r\n            <i>\r\n              Point your camera phone at qr code to open in &nbsp;\r\n              <a target=\"_blank\" href={fullLink} rel=\"noopener noreferrer\">\r\n                Punk Wallet\r\n              </a>\r\n              :\r\n            </i>\r\n\r\n            <div\r\n              style={{ cursor: \"pointer\" }}\r\n              onClick={() => {\r\n                const el = document.createElement(\"textarea\");\r\n                el.value = fullLink;\r\n                document.body.appendChild(el);\r\n                el.select();\r\n                document.execCommand(\"copy\");\r\n                document.body.removeChild(el);\r\n                message.success(<span style={{ position: \"relative\" }}>Copied Private Key Link</span>);\r\n              }}\r\n            >\r\n              <QR value={fullLink} size=\"450\" level=\"H\" includeMargin renderAs=\"svg\" />\r\n            </div>\r\n          </div>\r\n\r\n          {extraPkDisplay ? (\r\n            <div>\r\n              <h3>Known Private Keys:</h3>\r\n              {extraPkDisplay}\r\n              <Button\r\n                onClick={() => {\r\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\r\n                  if (currentPrivateKey) {\r\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\r\n                  }\r\n                  const randomWallet = ethers.Wallet.createRandom();\r\n                  const privateKey = randomWallet._signingKey().privateKey;\r\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\r\n                  window.location.reload();\r\n                }}\r\n              >\r\n                Generate\r\n              </Button>\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    receiveButton = (\r\n      <Button\r\n        key=\"receive\"\r\n        onClick={() => {\r\n          setQr(selectedAddress);\r\n          setPK(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Receive\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(\"\");\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Hide\r\n      </Button>\r\n    );\r\n  } else {\r\n    const inputStyle = {\r\n      padding: 10,\r\n    };\r\n\r\n    display = (\r\n      <div>\r\n        <div style={inputStyle}>\r\n          <AddressInput\r\n            autoFocus\r\n            ensProvider={props.ensProvider}\r\n            placeholder=\"to address\"\r\n            address={toAddress}\r\n            onChange={setToAddress}\r\n          />\r\n        </div>\r\n        <div style={inputStyle}>\r\n          <EtherInput\r\n            price={props.price}\r\n            value={amount}\r\n            onChange={value => {\r\n              setAmount(value);\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n    receiveButton = (\r\n      <Button\r\n        key=\"receive\"\r\n        onClick={() => {\r\n          setQr(selectedAddress);\r\n          setPK(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Receive\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(selectedAddress);\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Private Key\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      {providerSend}\r\n      <Modal\r\n        visible={open}\r\n        title={\r\n          <div>\r\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\r\n            <div style={{ float: \"right\", paddingRight: 25 }}>\r\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\r\n            </div>\r\n          </div>\r\n        }\r\n        onOk={() => {\r\n          setQr();\r\n          setPK();\r\n          setOpen(!open);\r\n        }}\r\n        onCancel={() => {\r\n          setQr();\r\n          setPK();\r\n          setOpen(!open);\r\n        }}\r\n        footer={\r\n          showImport\r\n            ? null\r\n            : [\r\n                showImportButton,\r\n                privateKeyButton,\r\n                receiveButton,\r\n                <Button\r\n                  key=\"submit\"\r\n                  type=\"primary\"\r\n                  disabled={!amount || !toAddress || qr}\r\n                  loading={false}\r\n                  onClick={() => {\r\n                    const tx = Transactor(props.signer || props.provider);\r\n\r\n                    let value;\r\n                    try {\r\n                      value = ethers.utils.parseEther(\"\" + amount);\r\n                    } catch (e) {\r\n                      // failed to parseEther, try something else\r\n                      value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\r\n                    }\r\n\r\n                    tx({\r\n                      to: toAddress,\r\n                      value,\r\n                    });\r\n                    setOpen(!open);\r\n                    setQr();\r\n                  }}\r\n                >\r\n                  <SendOutlined /> Send\r\n                </Button>,\r\n              ]\r\n        }\r\n      >\r\n        {showImport ? <WalletImport setShowImport={setShowImport} /> : display}\r\n      </Modal>\r\n    </span>\r\n  );\r\n}\r\n","import { Button } from \"antd\";\r\nimport React from \"react\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\n\r\nimport Address from \"./Address\";\r\nimport Balance from \"./Balance\";\r\nimport Wallet from \"./Wallet\";\r\n\r\n/** \r\n  ~ What it does? ~\r\n\r\n  Displays an Address, Balance, and Wallet as one Account component,\r\n  also allows users to log in to existing accounts and log out\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Account\r\n    address={address}\r\n    localProvider={localProvider}\r\n    userProvider={userProvider}\r\n    mainnetProvider={mainnetProvider}\r\n    price={price}\r\n    web3Modal={web3Modal}\r\n    loadWeb3Modal={loadWeb3Modal}\r\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n    blockExplorer={blockExplorer}\r\n    isContract={boolean}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address={address} and get balance corresponding to the given address\r\n  - Provide localProvider={localProvider} to access balance on local network\r\n  - Provide userProvider={userProvider} to display a wallet\r\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\")\r\n  - Provide price={price} of ether and get your balance converted to dollars\r\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n              to be able to log in/log out to/from existing accounts\r\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\r\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\r\n**/\r\n\r\nexport default function Account({\r\n  address,\r\n  userSigner,\r\n  localProvider,\r\n  mainnetProvider,\r\n  price,\r\n  minimized,\r\n  web3Modal,\r\n  loadWeb3Modal,\r\n  logoutOfWeb3Modal,\r\n  blockExplorer,\r\n  isContract,\r\n}) {\r\n  const { currentTheme } = useThemeSwitcher();\r\n\r\n  let accountButtonInfo;\r\n  if (web3Modal?.cachedProvider) {\r\n    accountButtonInfo = { name: \"Logout\", action: logoutOfWeb3Modal };\r\n  } else {\r\n    accountButtonInfo = { name: \"Connect\", action: loadWeb3Modal };\r\n  }\r\n\r\n  const display = !minimized && (\r\n    <span>\r\n      {address && (\r\n        <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} fontSize={20} />\r\n      )}\r\n      <Balance address={address} provider={localProvider} price={price} size={20} />\r\n      {!isContract && (\r\n        <Wallet\r\n          address={address}\r\n          provider={localProvider}\r\n          signer={userSigner}\r\n          ensProvider={mainnetProvider}\r\n          price={price}\r\n          color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\r\n          size={22}\r\n          padding={\"0px\"}\r\n        />\r\n      )}\r\n    </span>\r\n  );\r\n\r\n  return (\r\n    <div style={{ display: \"flex\" }}>\r\n      {display}\r\n      {web3Modal && (\r\n        <Button style={{ marginLeft: 8 }} shape=\"round\" onClick={accountButtonInfo.action}>\r\n          {accountButtonInfo.name}\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { Input } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst { utils, constants } = require(\"ethers\");\r\n\r\n/** \r\n  ~ What it does? ~\r\n\r\n  Displays input field with options to convert between STRING and BYTES32\r\n\r\n  ~ How can I use? ~\r\n\r\n  <BytesStringInput\r\n    autofocus\r\n    value={\"scaffold-eth\"}\r\n    placeholder=\"Enter value...\"\r\n    onChange={value => {\r\n      setValue(value);\r\n    }}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide value={value} to specify initial string\r\n  - Provide placeholder=\"Enter value...\" value for the input\r\n  - Control input change by onChange={value => { setValue(value);}}\r\n\r\n**/\r\n\r\nexport default function BytesStringInput(props) {\r\n  const [mode, setMode] = useState(\"STRING\");\r\n  const [display, setDisplay] = useState();\r\n  const [value, setValue] = useState(constants.HashZero);\r\n\r\n  // current value is the value in bytes32\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n\r\n  const option = title => {\r\n    return (\r\n      <div\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={() => {\r\n          if (mode === \"STRING\") {\r\n            setMode(\"BYTES32\");\r\n            if (!utils.isHexString(currentValue)) {\r\n              /* in case user enters invalid bytes32 number,\r\n                   it considers it as string and converts to bytes32 */\r\n              const changedValue = utils.formatBytes32String(currentValue);\r\n              setDisplay(changedValue);\r\n            } else {\r\n              setDisplay(currentValue);\r\n            }\r\n          } else {\r\n            setMode(\"STRING\");\r\n            if (currentValue && utils.isHexString(currentValue)) {\r\n              setDisplay(utils.parseBytes32String(currentValue));\r\n            } else {\r\n              setDisplay(currentValue);\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        {title}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  let addonAfter;\r\n  if (mode === \"STRING\") {\r\n    addonAfter = option(\"STRING 🔀\");\r\n  } else {\r\n    addonAfter = option(\"BYTES32 🔀\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!currentValue) {\r\n      setDisplay(\"\");\r\n    }\r\n  }, [currentValue]);\r\n\r\n  return (\r\n    <Input\r\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\r\n      autoFocus={props.autoFocus}\r\n      value={display}\r\n      addonAfter={addonAfter}\r\n      onChange={async e => {\r\n        const newValue = e.target.value;\r\n        if (mode === \"STRING\") {\r\n          // const ethValue = parseFloat(newValue) / props.price;\r\n          // setValue(ethValue);\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(utils.formatBytes32String(newValue));\r\n          }\r\n          setValue(utils.formatBytes32String(newValue));\r\n          setDisplay(newValue);\r\n        } else {\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(newValue);\r\n          }\r\n          setValue(newValue);\r\n          setDisplay(newValue);\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport Blockies from \"react-blockies\";\r\n\r\nimport { Transactor } from \"../../helpers\";\r\nimport { tryToDisplay, tryToDisplayAsText } from \"./utils\";\r\n\r\nconst { utils, BigNumber } = require(\"ethers\");\r\n\r\nconst getFunctionInputKey = (functionInfo, input, inputIndex) => {\r\n  const name = input?.name ? input.name : \"input_\" + inputIndex + \"_\";\r\n  return functionInfo.name + \"_\" + name + \"_\" + input.type;\r\n};\r\n\r\nconst isReadable = fn => fn.stateMutability === \"view\" || fn.stateMutability === \"pure\";\r\n\r\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\r\n  const [form, setForm] = useState({});\r\n  const [txValue, setTxValue] = useState();\r\n  const [returnValue, setReturnValue] = useState();\r\n\r\n  const tx = Transactor(provider, gasPrice);\r\n\r\n  const inputs = functionInfo.inputs.map((input, inputIndex) => {\r\n    const key = getFunctionInputKey(functionInfo, input, inputIndex);\r\n\r\n    let buttons = \"\";\r\n    if (input.type === \"bytes32\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"to bytes32\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              if (utils.isHexString(form[key])) {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.parseBytes32String(form[key]);\r\n                setForm(formUpdate);\r\n              } else {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.formatBytes32String(form[key]);\r\n                setForm(formUpdate);\r\n              }\r\n            }}\r\n          >\r\n            #️⃣\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"bytes\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"to hex\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              if (utils.isHexString(form[key])) {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.toUtf8String(form[key]);\r\n                setForm(formUpdate);\r\n              } else {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\r\n                setForm(formUpdate);\r\n              }\r\n            }}\r\n          >\r\n            #️⃣\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"uint256\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              const formUpdate = { ...form };\r\n              formUpdate[key] = utils.parseEther(form[key]);\r\n              setForm(formUpdate);\r\n            }}\r\n          >\r\n            ✴️\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"address\") {\r\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\r\n      if (possibleAddress && possibleAddress.length === 42) {\r\n        buttons = (\r\n          <Tooltip placement=\"right\" title=\"blockie\">\r\n            <Blockies seed={possibleAddress} scale={3} />\r\n          </Tooltip>\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div style={{ margin: 2 }} key={key}>\r\n        <Input\r\n          size=\"large\"\r\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\r\n          autoComplete=\"off\"\r\n          value={form[key]}\r\n          name={key}\r\n          onChange={event => {\r\n            const formUpdate = { ...form };\r\n            formUpdate[event.target.name] = event.target.value;\r\n            setForm(formUpdate);\r\n          }}\r\n          suffix={buttons}\r\n        />\r\n      </div>\r\n    );\r\n  });\r\n\r\n  const txValueInput = (\r\n    <div style={{ margin: 2 }} key=\"txValueInput\">\r\n      <Input\r\n        placeholder=\"transaction value\"\r\n        onChange={e => setTxValue(e.target.value)}\r\n        value={txValue}\r\n        addonAfter={\r\n          <div>\r\n            <Row>\r\n              <Col span={16}>\r\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\r\n                  <div\r\n                    type=\"dashed\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={async () => {\r\n                      const floatValue = parseFloat(txValue);\r\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\r\n                    }}\r\n                  >\r\n                    ✳️\r\n                  </div>\r\n                </Tooltip>\r\n              </Col>\r\n              <Col span={16}>\r\n                <Tooltip placement=\"right\" title=\"number to hex\">\r\n                  <div\r\n                    type=\"dashed\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={async () => {\r\n                      setTxValue(BigNumber.from(txValue).toHexString());\r\n                    }}\r\n                  >\r\n                    #️⃣\r\n                  </div>\r\n                </Tooltip>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n\r\n  if (functionInfo.payable) {\r\n    inputs.push(txValueInput);\r\n  }\r\n\r\n  const handleForm = returned => {\r\n    if (returned) {\r\n      setForm({});\r\n    }\r\n  };\r\n\r\n  const buttonIcon = isReadable(functionInfo) ? (\r\n    <Button style={{ marginLeft: -32 }}>Read📡</Button>\r\n  ) : (\r\n    <Button style={{ marginLeft: -32 }}>Send💸</Button>\r\n  );\r\n  inputs.push(\r\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\r\n      <Input\r\n        onChange={e => setReturnValue(e.target.value)}\r\n        defaultValue=\"\"\r\n        bordered={false}\r\n        disabled\r\n        value={returnValue}\r\n        suffix={\r\n          <div\r\n            style={{ width: 50, height: 30, margin: 0 }}\r\n            type=\"default\"\r\n            onClick={async () => {\r\n              const args = functionInfo.inputs.map((input, inputIndex) => {\r\n                const key = getFunctionInputKey(functionInfo, input, inputIndex);\r\n                let value = form[key];\r\n                if ([\"array\", \"tuple\"].includes(input.baseType)) {\r\n                  value = JSON.parse(value);\r\n                } else if (input.type === \"bool\") {\r\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\r\n                    value = 1;\r\n                  } else {\r\n                    value = 0;\r\n                  }\r\n                }\r\n                return value;\r\n              });\r\n\r\n              let result;\r\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\r\n                try {\r\n                  const returned = await contractFunction(...args);\r\n                  handleForm(returned);\r\n                  result = tryToDisplayAsText(returned);\r\n                } catch (err) {\r\n                  console.error(err);\r\n                }\r\n              } else {\r\n                const overrides = {};\r\n                if (txValue) {\r\n                  overrides.value = txValue; // ethers.utils.parseEther()\r\n                }\r\n                if (gasPrice) {\r\n                  overrides.gasPrice = gasPrice;\r\n                }\r\n                // Uncomment this if you want to skip the gas estimation for each transaction\r\n                // overrides.gasLimit = hexlify(1200000);\r\n\r\n                // console.log(\"Running with extras\",extras)\r\n                const returned = await tx(contractFunction(...args, overrides));\r\n                handleForm(returned);\r\n                result = tryToDisplay(returned);\r\n              }\r\n\r\n              console.log(\"SETTING RESULT:\", result);\r\n              setReturnValue(result);\r\n              triggerRefresh(true);\r\n            }}\r\n          >\r\n            {buttonIcon}\r\n          </div>\r\n        }\r\n      />\r\n    </div>,\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col\r\n          span={8}\r\n          style={{\r\n            textAlign: \"right\",\r\n            opacity: 0.333,\r\n            paddingRight: 6,\r\n            fontSize: 24,\r\n          }}\r\n        >\r\n          {functionInfo.name}\r\n        </Col>\r\n        <Col span={16}>{inputs}</Col>\r\n      </Row>\r\n      <Divider />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport Address from \"../Address\";\r\n\r\nconst { utils } = require(\"ethers\");\r\n\r\nconst tryToDisplay = (thing, asText = false, blockExplorer) => {\r\n  if (thing && thing.toNumber) {\r\n    try {\r\n      return thing.toNumber();\r\n    } catch (e) {\r\n      const displayable = \"Ξ\" + utils.formatUnits(thing, \"ether\");\r\n      return asText ? displayable : <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable}</span>;\r\n    }\r\n  }\r\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\r\n    return asText ? thing : <Address address={thing} fontSize={22} blockExplorer={blockExplorer} />;\r\n  }\r\n  if (thing && thing.constructor && thing.constructor.name === \"Array\") {\r\n    const mostReadable = v => ([\"number\", \"boolean\"].includes(typeof v) ? v : tryToDisplayAsText(v));\r\n    const displayable = JSON.stringify(thing.map(mostReadable));\r\n    return asText ? (\r\n      displayable\r\n    ) : (\r\n      <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable.replaceAll(\",\", \",\\n\")}</span>\r\n    );\r\n  }\r\n  return JSON.stringify(thing);\r\n};\r\n\r\nconst tryToDisplayAsText = thing => tryToDisplay(thing, true);\r\n\r\nexport { tryToDisplay, tryToDisplayAsText };\r\n","import { Button, Input, Tooltip } from \"antd\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { SendOutlined } from \"@ant-design/icons\";\r\nimport { Transactor } from \"../helpers\";\r\nimport Wallet from \"./Wallet\";\r\n\r\nconst { utils } = require(\"ethers\");\r\n\r\n// improved a bit by converting address to ens if it exists\r\n// added option to directly input ens name\r\n// added placeholder option\r\n\r\n/**\r\n  ~ What it does? ~\r\n\r\n  Displays a local faucet to send ETH to given address, also wallet is provided\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Faucet\r\n    price={price}\r\n    localProvider={localProvider}\r\n    ensProvider={mainnetProvider}\r\n    placeholder={\"Send local faucet\"}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\r\n  - Provide localProvider={localProvider} to be able to send ETH to given address\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n              works both in input field & wallet\r\n  - Provide placeholder=\"Send local faucet\" value for the input\r\n**/\r\n\r\nexport default function Faucet(props) {\r\n  const [address, setAddress] = useState();\r\n  const [faucetAddress, setFaucetAddress] = useState();\r\n\r\n  const { price, placeholder, localProvider, ensProvider } = props;\r\n\r\n  useEffect(() => {\r\n    const getFaucetAddress = async () => {\r\n      if (localProvider) {\r\n        const _faucetAddress = await localProvider.listAccounts();\r\n        setFaucetAddress(_faucetAddress[0]);\r\n      }\r\n    };\r\n    getFaucetAddress();\r\n  }, [localProvider]);\r\n\r\n  let blockie;\r\n  if (address && typeof address.toLowerCase === \"function\") {\r\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\r\n  } else {\r\n    blockie = <div />;\r\n  }\r\n\r\n  const updateAddress = newValue => {\r\n    if (typeof newValue !== \"undefined\" && utils.isAddress(newValue)) {\r\n      setAddress(newValue);\r\n    }\r\n  };\r\n\r\n  const tx = Transactor(localProvider);\r\n\r\n  return (\r\n    <span>\r\n      <Input\r\n        size=\"large\"\r\n        placeholder={placeholder ? placeholder : \"local faucet\"}\r\n        prefix={blockie}\r\n        value={address}\r\n        onChange={e => updateAddress(e.target.value)}\r\n        suffix={\r\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\r\n            <Button\r\n              onClick={() => {\r\n                tx({\r\n                  to: address,\r\n                  value: utils.parseEther(\"0.5\"),\r\n                });\r\n                setAddress(\"\");\r\n              }}\r\n              shape=\"circle\"\r\n              icon={<SendOutlined />}\r\n            />\r\n            <Wallet\r\n              color=\"#888888\"\r\n              provider={localProvider}\r\n              ensProvider={ensProvider}\r\n              price={price}\r\n              address={faucetAddress}\r\n            />\r\n          </Tooltip>\r\n        }\r\n      />\r\n    </span>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Button } from \"antd\";\r\n\r\n// added display of 0 instead of NaN if gas price is not provided\r\n\r\n/**\r\n  ~ What it does? ~\r\n\r\n  Displays gas gauge\r\n\r\n  ~ How can I use? ~\r\n\r\n  <GasGauge\r\n    gasPrice={gasPrice}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide gasPrice={gasPrice} and get current gas gauge\r\n**/\r\n\r\nexport default function GasGauge(props) {\r\n  return (\r\n    <Button\r\n      onClick={() => {\r\n        window.open(\"https://ethgasstation.info/\");\r\n      }}\r\n      size=\"large\"\r\n      shape=\"round\"\r\n    >\r\n      <span style={{ marginRight: 8 }}>\r\n        <span role=\"img\" aria-label=\"fuelpump\">\r\n          ⛽️\r\n        </span>\r\n      </span>\r\n      {typeof props.gasPrice === \"undefined\" ? 0 : parseInt(props.gasPrice, 10) / 10 ** 9}g\r\n    </Button>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Typography } from \"antd\";\r\n\r\nconst { Title, Text } = Typography;\r\n\r\n// displays a page header\r\n\r\nexport default function Header({ link, title, subTitle, ...props }) {\r\n  return (\r\n    <div style={{ display: \"flex\", justifyContent: \"space-between\", padding: \"1.2rem\" }}>\r\n      <div style={{ display: \"flex\", flexDirection: \"column\", flex: 1, alignItems: \"start\" }}>\r\n          <Title level={4} style={{ margin: \"0 0.5rem 0 0\" }}>\r\n           Floor 101\r\n          </Title>\r\n        <Text type=\"secondary\" style={{ textAlign: \"left\" }}>\r\n          NFT Lending\r\n        </Text>\r\n      </div>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nHeader.defaultProps = {\r\n  link: \"https://github.com/scaffold-eth/scaffold-eth\",\r\n  title: \"🏗 Scaffold-Eth\",\r\n  subTitle: \"Forkable Ethereum dev stack focused on fast product iteration\",\r\n};\r\n","import { Button, Divider, Modal } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport { DollarCircleOutlined } from \"@ant-design/icons\";\r\nimport { RampInstantSDK } from \"@ramp-network/ramp-instant-sdk\";\r\n\r\n// added display of 0 if price={price} is not provided\r\n\r\n/**\r\n  ~ What it does? ~\r\n\r\n  Displays current ETH price and gives options to buy ETH through Wyre/Ramp/Coinbase\r\n                            or get through Rinkeby/Ropsten/Kovan/Goerli\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Ramp\r\n    price={price}\r\n    address={address}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Ramp opens directly in the application, component uses RampInstantSDK\r\n  - Provide price={price} and current ETH price will be displayed\r\n  - Provide address={address} and your address will be pasted into Wyre/Ramp instantly\r\n**/\r\n\r\nexport default function Ramp(props) {\r\n  const [modalUp, setModalUp] = useState(\"down\");\r\n\r\n  const type = \"default\";\r\n\r\n  const allFaucets = [];\r\n  for (const n in props.networks) {\r\n    if (props.networks[n].chainId !== 31337 && props.networks[n].chainId !== 1) {\r\n      allFaucets.push(\r\n        <p key={props.networks[n].chainId}>\r\n          <Button\r\n            style={{ color: props.networks[n].color }}\r\n            type={type}\r\n            size=\"large\"\r\n            shape=\"round\"\r\n            onClick={() => {\r\n              window.open(props.networks[n].faucet);\r\n            }}\r\n          >\r\n            {props.networks[n].name}\r\n          </Button>\r\n        </p>,\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        size=\"large\"\r\n        shape=\"round\"\r\n        onClick={() => {\r\n          setModalUp(\"up\");\r\n        }}\r\n      >\r\n        <DollarCircleOutlined style={{ color: \"#52c41a\" }} />{\" \"}\r\n        {typeof props.price === \"undefined\" ? 0 : props.price.toFixed(2)}\r\n      </Button>\r\n      <Modal\r\n        title=\"Buy ETH\"\r\n        visible={modalUp === \"up\"}\r\n        onCancel={() => {\r\n          setModalUp(\"down\");\r\n        }}\r\n        footer={[\r\n          <Button\r\n            key=\"back\"\r\n            onClick={() => {\r\n              setModalUp(\"down\");\r\n            }}\r\n          >\r\n            cancel\r\n          </Button>,\r\n        ]}\r\n      >\r\n        <p>\r\n          <Button\r\n            type={type}\r\n            size=\"large\"\r\n            shape=\"round\"\r\n            onClick={() => {\r\n              window.open(\"https://pay.sendwyre.com/purchase?destCurrency=ETH&sourceAmount=25&dest=\" + props.address);\r\n            }}\r\n          >\r\n            <span style={{ paddingRight: 15 }} role=\"img\">\r\n              <span role=\"img\" aria-label=\"flag-us\">\r\n                🇺🇸\r\n              </span>\r\n            </span>\r\n            Wyre\r\n          </Button>\r\n        </p>\r\n        <p>\r\n          {\" \"}\r\n          <Button\r\n            type={type}\r\n            size=\"large\"\r\n            shape=\"round\"\r\n            onClick={() => {\r\n              new RampInstantSDK({\r\n                hostAppName: \"scaffold-eth\",\r\n                hostLogoUrl: \"https://scaffoldeth.io/scaffold-eth.png\",\r\n                swapAmount: \"100000000000000000\", // 0.1 ETH in wei  ?\r\n                swapAsset: \"ETH\",\r\n                userAddress: props.address,\r\n              })\r\n                .on(\"*\", event => console.log(event))\r\n                .show();\r\n            }}\r\n          >\r\n            <span style={{ paddingRight: 15 }} role=\"img\">\r\n              <span role=\"img\" aria-label=\"flag-gb\">\r\n                🇬🇧\r\n              </span>\r\n            </span>\r\n            Ramp\r\n          </Button>\r\n        </p>\r\n\r\n        <p>\r\n          <Button\r\n            type={type}\r\n            size=\"large\"\r\n            shape=\"round\"\r\n            onClick={() => {\r\n              window.open(\"https://www.coinbase.com/buy-ethereum\");\r\n            }}\r\n          >\r\n            <span style={{ paddingRight: 15 }} role=\"img\" aria-label=\"bank\">\r\n              🏦\r\n            </span>\r\n            Coinbase\r\n          </Button>\r\n        </p>\r\n\r\n        <Divider />\r\n\r\n        <h2>Testnet ETH</h2>\r\n\r\n        {allFaucets}\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\n\r\nconst createProvider = async url => {\r\n  const p = new ethers.providers.StaticJsonRpcProvider(url);\r\n\r\n  await p.ready;\r\n\r\n  return p;\r\n};\r\n\r\nexport default function useStaticJsonRPC(urlArray, localProvider = null) {\r\n  const [provider, setProvider] = useState(null);\r\n\r\n  const handleProviders = useCallback(async () => {\r\n    try {\r\n      const p = await Promise.race(urlArray.map(createProvider));\r\n      const _p = await p;\r\n\r\n      setProvider(_p);\r\n    } catch (error) {\r\n      // todo: show notification error about provider issues\r\n      console.log(error);\r\n    }\r\n  }, [urlArray]);\r\n\r\n  useEffect(() => {\r\n    // Re-use the localProvider if it's mainnet (to use only one instance of it)\r\n    if (localProvider && localProvider?._network.chainId === 1) {\r\n      setProvider(localProvider);\r\n      return;\r\n    }\r\n\r\n    handleProviders();\r\n\r\n    // eslint-disable-next-line\r\n  }, [JSON.stringify(urlArray), localProvider]);\r\n\r\n  return provider;\r\n}\r\n","const contractListPromise = import(\"../contracts/hardhat_contracts.json\");\r\n// @ts-ignore\r\nconst externalContractsPromise = import(\"../contracts/external_contracts\");\r\n\r\nexport const loadAppContracts = async () => {\r\n  const config = {};\r\n  config.deployedContracts = (await contractListPromise).default ?? {};\r\n  config.externalContracts = (await externalContractsPromise).default ?? {};\r\n  return config;\r\n};\r\n","import {\r\n  Button,\r\n  Card,\r\n  Descriptions,\r\n  Divider,\r\n  Drawer,\r\n  InputNumber,\r\n  Modal,\r\n  notification,\r\n  Row,\r\n  Select,\r\n  Space,\r\n  Tooltip,\r\n  Typography,\r\n} from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\r\nimport { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\r\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\r\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\r\n\r\nimport { useDebounce } from \"../hooks\";\r\n\r\nconst { Option } = Select;\r\nconst { Text } = Typography;\r\n\r\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\r\n\r\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\r\n\r\nconst erc20Abi = [\r\n  \"function balanceOf(address owner) view returns (uint256)\",\r\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\r\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\r\n];\r\n\r\nconst makeCall = async (callName, contract, args, metadata = {}) => {\r\n  if (contract[callName]) {\r\n    let result;\r\n    if (args) {\r\n      result = await contract[callName](...args, metadata);\r\n    } else {\r\n      result = await contract[callName]();\r\n    }\r\n    return result;\r\n  }\r\n  console.log(\"no call of that name!\");\r\n  return undefined;\r\n};\r\n\r\nconst defaultToken = \"ETH\";\r\nconst defaultTokenOut = \"DAI\";\r\nconst defaultSlippage = \"0.5\";\r\nconst defaultTimeLimit = 60 * 10;\r\n\r\nconst tokenListToObject = array =>\r\n  array.reduce((obj, item) => {\r\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\r\n    return obj;\r\n  }, {});\r\n\r\nfunction Swap({ selectedProvider, tokenListURI }) {\r\n  const [tokenIn, setTokenIn] = useState(defaultToken);\r\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\r\n  const [exact, setExact] = useState();\r\n  const [amountIn, setAmountIn] = useState();\r\n  const [amountInMax, setAmountInMax] = useState();\r\n  const [amountOut, setAmountOut] = useState();\r\n  const [amountOutMin, setAmountOutMin] = useState();\r\n  const [trades, setTrades] = useState();\r\n  const [routerAllowance, setRouterAllowance] = useState();\r\n  const [balanceIn, setBalanceIn] = useState();\r\n  const [balanceOut, setBalanceOut] = useState();\r\n  const [slippageTolerance, setSlippageTolerance] = useState(\r\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\r\n  );\r\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\r\n  const [swapping, setSwapping] = useState(false);\r\n  const [approving, setApproving] = useState(false);\r\n  const [settingsVisible, setSettingsVisible] = useState(false);\r\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\r\n\r\n  const [tokenList, setTokenList] = useState([]);\r\n  const [tokens, setTokens] = useState();\r\n  const [invertPrice, setInvertPrice] = useState(false);\r\n\r\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\r\n\r\n  const signer = selectedProvider.getSigner();\r\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\r\n\r\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\r\n\r\n  const debouncedAmountIn = useDebounce(amountIn, 500);\r\n  const debouncedAmountOut = useDebounce(amountOut, 500);\r\n\r\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\r\n\r\n  useEffect(() => {\r\n    const getTokenList = async () => {\r\n      console.log(_tokenListUri);\r\n      try {\r\n        const tokenListResponse = await fetch(_tokenListUri);\r\n        const tokenListJson = await tokenListResponse.json();\r\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\r\n          return t.chainId === activeChainId;\r\n        });\r\n        const ethToken = WETH[activeChainId];\r\n        ethToken.name = \"Ethereum\";\r\n        ethToken.symbol = \"ETH\";\r\n        ethToken.logoURI =\r\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\r\n        const _tokenList = [ethToken, ...filteredTokens];\r\n        setTokenList(_tokenList);\r\n        const _tokens = tokenListToObject(_tokenList);\r\n        setTokens(_tokens);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    };\r\n    getTokenList();\r\n  }, [tokenListURI, _tokenListUri, activeChainId]);\r\n\r\n  const getTrades = async () => {\r\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\r\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\r\n\r\n      const baseTokens = tokenList\r\n        .filter(function (t) {\r\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\r\n        })\r\n        .map(el => {\r\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\r\n        });\r\n\r\n      const listOfPairwiseTokens = pairs(baseTokens);\r\n\r\n      const getPairs = async list => {\r\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\r\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\r\n      };\r\n\r\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\r\n\r\n      let bestTrade;\r\n\r\n      if (exact === \"in\") {\r\n        setAmountInMax();\r\n        bestTrade = Trade.bestTradeExactIn(\r\n          listOfPairs.filter(item => item),\r\n          new TokenAmount(tokens[tokenIn], ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\r\n          tokens[tokenOut],\r\n          { maxNumResults: 3, maxHops: 1 },\r\n        );\r\n        if (bestTrade[0]) {\r\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\r\n        } else {\r\n          setAmountOut();\r\n        }\r\n      } else if (exact === \"out\") {\r\n        setAmountOutMin();\r\n        bestTrade = Trade.bestTradeExactOut(\r\n          listOfPairs.filter(item => item),\r\n          tokens[tokenIn],\r\n          new TokenAmount(tokens[tokenOut], ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\r\n          { maxNumResults: 3, maxHops: 1 },\r\n        );\r\n        if (bestTrade[0]) {\r\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\r\n        } else {\r\n          setAmountIn();\r\n        }\r\n      }\r\n\r\n      setTrades(bestTrade);\r\n\r\n      console.log(bestTrade);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTrades();\r\n    // eslint-disable-next-line\r\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\r\n\r\n  useEffect(() => {\r\n    if (trades && trades[0]) {\r\n      if (exact === \"in\") {\r\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\r\n      } else if (exact === \"out\") {\r\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\r\n      }\r\n    }\r\n  }, [slippageTolerance, amountIn, amountOut, trades, exact]);\r\n\r\n  const getBalance = async (_token, _account, _contract) => {\r\n    let newBalance;\r\n    if (_token === \"ETH\") {\r\n      newBalance = await selectedProvider.getBalance(_account);\r\n    } else {\r\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\r\n    }\r\n    return newBalance;\r\n  };\r\n\r\n  const getAccountInfo = async () => {\r\n    if (tokens) {\r\n      const accountList = await selectedProvider.listAccounts();\r\n\r\n      if (tokenIn) {\r\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\r\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\r\n        setBalanceIn(newBalanceIn);\r\n\r\n        let allowance;\r\n\r\n        if (tokenIn === \"ETH\") {\r\n          setRouterAllowance();\r\n        } else {\r\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\r\n          setRouterAllowance(allowance);\r\n        }\r\n      }\r\n\r\n      if (tokenOut) {\r\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\r\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\r\n        setBalanceOut(newBalanceOut);\r\n      }\r\n    }\r\n  };\r\n\r\n  usePoller(getAccountInfo, 6000);\r\n\r\n  const route = trades\r\n    ? trades.length > 0\r\n      ? trades[0].route.path.map(function (item) {\r\n          return item.symbol;\r\n        })\r\n      : []\r\n    : [];\r\n\r\n  const updateRouterAllowance = async newAllowance => {\r\n    setApproving(true);\r\n    try {\r\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\r\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\r\n      console.log(result);\r\n      setApproving(false);\r\n      return true;\r\n    } catch (e) {\r\n      notification.open({\r\n        message: \"Approval unsuccessful\",\r\n        description: `Error: ${e.message}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const approveRouter = async () => {\r\n    const approvalAmount =\r\n      exact === \"in\"\r\n        ? ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\r\n        : amountInMax.raw.toString();\r\n    console.log(approvalAmount);\r\n    const approval = updateRouterAllowance(approvalAmount);\r\n    if (approval) {\r\n      notification.open({\r\n        message: \"Token transfer approved\",\r\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const removeRouterAllowance = async () => {\r\n    const approvalAmount = ethers.utils.hexlify(0);\r\n    console.log(approvalAmount);\r\n    const removal = updateRouterAllowance(approvalAmount);\r\n    if (removal) {\r\n      notification.open({\r\n        message: \"Token approval removed\",\r\n        description: `The router is no longer approved for ${tokenIn}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const executeSwap = async () => {\r\n    setSwapping(true);\r\n    try {\r\n      let args;\r\n      const metadata = {};\r\n\r\n      let call;\r\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\r\n      const path = trades[0].route.path.map(function (item) {\r\n        return item.address;\r\n      });\r\n      console.log(path);\r\n      const accountList = await selectedProvider.listAccounts();\r\n      const address = accountList[0];\r\n\r\n      if (exact === \"in\") {\r\n        const _amountIn = ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\r\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\r\n        if (tokenIn === \"ETH\") {\r\n          call = \"swapExactETHForTokens\";\r\n          args = [_amountOutMin, path, address, deadline];\r\n          metadata.value = _amountIn;\r\n        } else {\r\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\r\n          args = [_amountIn, _amountOutMin, path, address, deadline];\r\n        }\r\n      } else if (exact === \"out\") {\r\n        const _amountOut = ethers.utils.hexlify(\r\n          ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals),\r\n        );\r\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\r\n        if (tokenIn === \"ETH\") {\r\n          call = \"swapETHForExactTokens\";\r\n          args = [_amountOut, path, address, deadline];\r\n          metadata.value = _amountInMax;\r\n        } else {\r\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\r\n          args = [_amountOut, _amountInMax, path, address, deadline];\r\n        }\r\n      }\r\n      console.log(call, args, metadata);\r\n      const result = await makeCall(call, routerContract, args, metadata);\r\n      console.log(result);\r\n      notification.open({\r\n        message: \"Swap complete 🦄\",\r\n        description: (\r\n          <>\r\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\r\n            <Text copyable>{result.hash}</Text>\r\n          </>\r\n        ),\r\n      });\r\n      setSwapping(false);\r\n    } catch (e) {\r\n      console.log(e);\r\n      setSwapping(false);\r\n      notification.open({\r\n        message: \"Swap unsuccessful\",\r\n        description: `Error: ${e.message}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const showSwapModal = () => {\r\n    setSwapModalVisible(true);\r\n  };\r\n\r\n  const handleSwapModalOk = () => {\r\n    setSwapModalVisible(false);\r\n    executeSwap();\r\n  };\r\n\r\n  const handleSwapModalCancel = () => {\r\n    setSwapModalVisible(false);\r\n  };\r\n\r\n  const insufficientBalance = balanceIn\r\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\r\n    : null;\r\n  const inputIsToken = tokenIn !== \"ETH\";\r\n  const insufficientAllowance = !inputIsToken\r\n    ? false\r\n    : routerAllowance\r\n    ? parseFloat(ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\r\n    : null;\r\n  const formattedBalanceIn = balanceIn\r\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\r\n    : null;\r\n  const formattedBalanceOut = balanceOut\r\n    ? parseFloat(ethers.utils.formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\r\n    : null;\r\n\r\n  const metaIn =\r\n    tokens && tokenList && tokenIn\r\n      ? tokenList.filter(function (t) {\r\n          return t.address === tokens[tokenIn].address;\r\n        })[0]\r\n      : null;\r\n  const metaOut =\r\n    tokens && tokenList && tokenOut\r\n      ? tokenList.filter(function (t) {\r\n          return t.address === tokens[tokenOut].address;\r\n        })[0]\r\n      : null;\r\n\r\n  const cleanIpfsURI = uri => {\r\n    try {\r\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\r\n    } catch (e) {\r\n      console.log(e, uri);\r\n      return uri;\r\n    }\r\n  };\r\n\r\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\r\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\r\n\r\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\r\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\r\n  const priceDescription = rawPrice\r\n    ? invertPrice\r\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\r\n      : `${price} ${tokenOut} per ${tokenIn}`\r\n    : null;\r\n\r\n  const priceWidget = (\r\n    <Space>\r\n      <Text type=\"secondary\">{priceDescription}</Text>\r\n      <Button\r\n        type=\"text\"\r\n        onClick={() => {\r\n          setInvertPrice(!invertPrice);\r\n        }}\r\n      >\r\n        <RetweetOutlined />\r\n      </Button>\r\n    </Space>\r\n  );\r\n\r\n  const swapModal = (\r\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\r\n      <Row>\r\n        <Space>\r\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\r\n          {amountIn}\r\n          {tokenIn}\r\n        </Space>\r\n      </Row>\r\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\r\n        <span>↓</span>\r\n      </Row>\r\n      <Row>\r\n        <Space>\r\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\r\n          {amountOut}\r\n          {tokenOut}\r\n        </Space>\r\n      </Row>\r\n      <Divider />\r\n      <Row>{priceWidget}</Row>\r\n      <Row>\r\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\r\n          ? exact === \"in\"\r\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\r\n                6,\r\n              )} ${tokenOut} or the transaction will revert.`\r\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\r\n                6,\r\n              )} ${tokenIn} or the transaction will revert.`\r\n          : null}\r\n      </Row>\r\n    </Modal>\r\n  );\r\n\r\n  return (\r\n    <Card\r\n      title={\r\n        <Space>\r\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\r\n          <Typography>Uniswapper</Typography>\r\n        </Space>\r\n      }\r\n      extra={\r\n        <Button\r\n          type=\"text\"\r\n          onClick={() => {\r\n            setSettingsVisible(true);\r\n          }}\r\n        >\r\n          <SettingOutlined />\r\n        </Button>\r\n      }\r\n    >\r\n      <Space direction=\"vertical\">\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Card\r\n            size=\"small\"\r\n            type=\"inner\"\r\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\r\n            extra={\r\n              <>\r\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\r\n                <Button\r\n                  type=\"link\"\r\n                  onClick={() => {\r\n                    setAmountOut();\r\n                    setAmountIn(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals));\r\n                    setAmountOutMin();\r\n                    setAmountInMax();\r\n                    setExact(\"in\");\r\n                  }}\r\n                >\r\n                  {formattedBalanceIn}\r\n                </Button>\r\n              </>\r\n            }\r\n            style={{ width: 400, textAlign: \"left\" }}\r\n          >\r\n            <InputNumber\r\n              style={{ width: \"160px\" }}\r\n              min={0}\r\n              size=\"large\"\r\n              value={amountIn}\r\n              onChange={e => {\r\n                setAmountOut();\r\n                setTrades();\r\n                setAmountIn(e);\r\n                setExact(\"in\");\r\n              }}\r\n            />\r\n            <Select\r\n              showSearch\r\n              value={tokenIn}\r\n              style={{ width: \"120px\" }}\r\n              size=\"large\"\r\n              bordered={false}\r\n              defaultValue={defaultToken}\r\n              onChange={value => {\r\n                console.log(value);\r\n                if (value === tokenOut) {\r\n                  console.log(\"switch!\", tokenIn);\r\n                  setTokenOut(tokenIn);\r\n                  setAmountOut(amountIn);\r\n                  setBalanceOut(balanceIn);\r\n                }\r\n                setTokenIn(value);\r\n                setTrades();\r\n                setAmountIn();\r\n                setExact(\"out\");\r\n                setBalanceIn();\r\n              }}\r\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n              optionFilterProp=\"children\"\r\n            >\r\n              {tokenList.map(token => (\r\n                <Option key={token.symbol} value={token.symbol}>\r\n                  {token.symbol}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </Card>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Tooltip title={route.join(\"->\")}>\r\n            <span>↓</span>\r\n          </Tooltip>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Card\r\n            size=\"small\"\r\n            type=\"inner\"\r\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\r\n            extra={\r\n              <>\r\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\r\n                <Button type=\"text\">{formattedBalanceOut}</Button>\r\n              </>\r\n            }\r\n            style={{ width: 400, textAlign: \"left\" }}\r\n          >\r\n            <InputNumber\r\n              style={{ width: \"160px\" }}\r\n              size=\"large\"\r\n              min={0}\r\n              value={amountOut}\r\n              onChange={e => {\r\n                setAmountOut(e);\r\n                setAmountIn();\r\n                setTrades();\r\n                setExact(\"out\");\r\n              }}\r\n            />\r\n            <Select\r\n              showSearch\r\n              value={tokenOut}\r\n              style={{ width: \"120px\" }}\r\n              size=\"large\"\r\n              bordered={false}\r\n              onChange={value => {\r\n                console.log(value, tokenIn, tokenOut);\r\n                if (value === tokenIn) {\r\n                  console.log(\"switch!\", tokenOut);\r\n                  setTokenIn(tokenOut);\r\n                  setAmountIn(amountOut);\r\n                  setBalanceIn(balanceOut);\r\n                }\r\n                setTokenOut(value);\r\n                setExact(\"in\");\r\n                setAmountOut();\r\n                setTrades();\r\n                setBalanceOut();\r\n              }}\r\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n              optionFilterProp=\"children\"\r\n            >\r\n              {tokenList.map(token => (\r\n                <Option key={token.symbol} value={token.symbol}>\r\n                  {token.symbol}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </Card>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          {priceDescription ? priceWidget : null}\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Space>\r\n            {inputIsToken ? (\r\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\r\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\r\n              </Button>\r\n            ) : null}\r\n            <Button\r\n              size=\"large\"\r\n              loading={swapping}\r\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\r\n              onClick={showSwapModal}\r\n            >\r\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\r\n            </Button>\r\n            {swapModal}\r\n          </Space>\r\n        </Row>\r\n      </Space>\r\n      <Drawer\r\n        visible={settingsVisible}\r\n        onClose={() => {\r\n          setSettingsVisible(false);\r\n        }}\r\n        width={500}\r\n      >\r\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\r\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\r\n          <Descriptions.Item label=\"routerAllowance\">\r\n            <Space>\r\n              {routerAllowance ? ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\r\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\r\n            </Space>\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\r\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\r\n          <Descriptions.Item label=\"bestPrice\">\r\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"nextMidPrice\">\r\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"priceImpact\">\r\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"slippageTolerance\">\r\n            <InputNumber\r\n              defaultValue={defaultSlippage}\r\n              min={0}\r\n              max={100}\r\n              precision={2}\r\n              formatter={value => `${value}%`}\r\n              parser={value => value.replace(\"%\", \"\")}\r\n              onChange={value => {\r\n                console.log(value);\r\n\r\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\r\n                setSlippageTolerance(slippagePercent);\r\n              }}\r\n            />\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\r\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\r\n          <Descriptions.Item label=\"timeLimitInSeconds\">\r\n            <InputNumber\r\n              min={0}\r\n              max={3600}\r\n              defaultValue={defaultTimeLimit}\r\n              onChange={value => {\r\n                console.log(value);\r\n                setTimeLimit(value);\r\n              }}\r\n            />\r\n          </Descriptions.Item>\r\n        </Descriptions>\r\n      </Drawer>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Swap;\r\n","import { Switch } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\n\r\nexport default function ThemeSwitcher() {\r\n  const theme = window.localStorage.getItem(\"theme\");\r\n  const [isDarkMode, setIsDarkMode] = useState(!(!theme || theme === \"light\"));\r\n  const { switcher, currentTheme, themes } = useThemeSwitcher();\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(\"theme\", currentTheme);\r\n  }, [currentTheme]);\r\n\r\n  const toggleTheme = isChecked => {\r\n    setIsDarkMode(isChecked);\r\n    switcher({ theme: isChecked ? themes.dark : themes.light });\r\n  };\r\n\r\n  return (\r\n    <div className=\"main fade-in\" style={{ position: \"fixed\", right: 8, bottom: 8 }}>\r\n      <span style={{ padding: 8 }}>{currentTheme === \"light\" ? \"☀️\" : \"🌜\"}</span>\r\n      <Switch checked={isDarkMode} onChange={toggleTheme} />\r\n    </div>\r\n  );\r\n}\r\n","import { Timeline, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\r\n\r\nconst { Text } = Typography;\r\n\r\n// displays a timeline for scaffold-eth usage\r\n\r\nexport default function TimelineDisplay(props) {\r\n  return (\r\n    <Timeline mode=\"right\">\r\n      <Timeline.Item dot=\"💾\">\r\n        <Text delete>\r\n          Clone and Install from the{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\r\n            github repo\r\n          </a>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"⚛️\">\r\n        <Text delete>\r\n          Start your frontend app with: <Text strong>yarn start</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"⛓\">\r\n        <Text delete={props.chainIsUp}>\r\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"📝\">\r\n        <Text delete={props.hasOwner}>\r\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🤡\">\r\n        <Text delete={props.isNotSmoort}>\r\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\r\n        <Text delete={props.hasEther}>\r\n          Send test ether to your{\" \"}\r\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\r\n          (bottom left) faucet\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item\r\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\r\n        color={props.contractHasEther ? \"green\" : \"blue\"}\r\n      >\r\n        <Text delete={props.contractHasEther}>\r\n          Deposit some funds into your{\" \"}\r\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\r\n          smart contract wallet\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item\r\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\r\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\r\n      >\r\n        <Text delete={props.amOwnerOfContract}>\r\n          Set <b>owner</b> of your{\" \"}\r\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\r\n          smart contract wallet to your{\" \"}\r\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"☢️\">\r\n        <Text>\r\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🔬\">\r\n        <Text>\r\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\r\n          <Text strong>yarn run test</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🚀\">\r\n        <Text>\r\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\r\n            @ me\r\n          </a>\r\n          !\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"📖\">\r\n        <Text>\r\n          Read more about{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\r\n            Ethereum\r\n          </a>\r\n          ,{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\r\n            Solidity\r\n          </a>\r\n          , and{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\r\n            Buidler\r\n          </a>\r\n        </Text>\r\n      </Timeline.Item>\r\n    </Timeline>\r\n  );\r\n}\r\n","import { Button, Input, Form, Select, InputNumber, Table, Radio } from \"antd\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { utils, ethers } from \"ethers\";\r\nimport { useContractLoader, useOnBlock } from \"eth-hooks\";\r\n\r\nimport { NETWORKS } from \"../constants\";\r\nimport { Transactor } from \"../helpers\";\r\n\r\n/** \r\nThis is a component for bridging between L1 & L2\r\nCurrently it supports Testnet deposits for Arbitrum & Optimism\r\n\r\n __          _______ _____\r\n \\ \\        / /_   _|  __ \\\r\n  \\ \\  /\\  / /  | | | |__) |\r\n   \\ \\/  \\/ /   | | |  ___/\r\n    \\  /\\  /   _| |_| |\r\n     \\/  \\/   |_____|_|\r\n\r\n\r\n**/\r\n\r\nexport default function L2ArbitrumBridge({ address, userSigner }) {\r\n  const [L1EthBalance, setL1EthBalance] = useState(\"...\");\r\n  const [L2EthBalance, setL2EthBalance] = useState(\"...\");\r\n  const [L1Provider, setL1Provider] = useState(\"\");\r\n  const [L2Provider, setL2Provider] = useState(\"\");\r\n  const [rollup, setRollup] = useState(\"arbitrum\");\r\n  const [environment] = useState(\"test\");\r\n\r\n  const rollupConfig = {\r\n    arbitrum: {\r\n      test: { L1: NETWORKS.rinkeby, L2: NETWORKS.rinkebyArbitrum },\r\n      main: { L1: NETWORKS.mainnet, L2: NETWORKS.arbitrum },\r\n      local: { L1: NETWORKS.localArbitrumL1, L2: NETWORKS.localArbitrum },\r\n    },\r\n    optimism: {\r\n      test: { L1: NETWORKS.kovan, L2: NETWORKS.kovanOptimism },\r\n      local: { L1: NETWORKS.localOptimismL1, L2: NETWORKS.localOptimism },\r\n    },\r\n  };\r\n\r\n  const activeConfig = rollupConfig[rollup][environment];\r\n\r\n  const selectedChainId =\r\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\r\n\r\n  const tx = Transactor(userSigner);\r\n\r\n  useEffect(() => {\r\n    async function setProviders() {\r\n      const L1 = activeConfig.L1;\r\n      const L2 = activeConfig.L2;\r\n      setL1Provider(new ethers.providers.StaticJsonRpcProvider(L1.rpcUrl));\r\n      setL2Provider(new ethers.providers.StaticJsonRpcProvider(L2.rpcUrl));\r\n      setL1EthBalance(\"...\");\r\n      setL2EthBalance(\"...\");\r\n    }\r\n    setProviders();\r\n  }, [rollup, activeConfig.L1, activeConfig.L2]);\r\n\r\n  const contracts = useContractLoader(userSigner, { externalContracts: L1BridgeMetadata, hardhatContracts: {} });\r\n\r\n  useOnBlock(L1Provider, async () => {\r\n    console.log(`⛓ A new mainnet block is here: ${L1Provider._lastBlockNumber}`);\r\n    const yourL1Balance = await L1Provider.getBalance(address);\r\n    setL1EthBalance(yourL1Balance ? ethers.utils.formatEther(yourL1Balance) : \"...\");\r\n    const yourL2Balance = await L2Provider.getBalance(address);\r\n    setL2EthBalance(yourL2Balance ? ethers.utils.formatEther(yourL2Balance) : \"...\");\r\n  });\r\n\r\n  const { Option } = Select;\r\n  const formItemLayout = {\r\n    labelCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 8 },\r\n    },\r\n    wrapperCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 12 },\r\n    },\r\n  };\r\n  const tailFormItemLayout = {\r\n    wrapperCol: {\r\n      xs: {\r\n        span: 24,\r\n        offset: 0,\r\n      },\r\n      sm: {\r\n        span: 12,\r\n        offset: 8,\r\n      },\r\n    },\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"\",\r\n      dataIndex: \"token\",\r\n      key: \"token\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: `${activeConfig.L1.name} L1 Balance`,\r\n      dataIndex: \"l1\",\r\n      key: \"l1\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: `${activeConfig.L1.name} ${rollup} Balance`,\r\n      dataIndex: \"l2\",\r\n      key: \"l2\",\r\n      align: \"center\",\r\n    },\r\n  ];\r\n\r\n  const data = [\r\n    {\r\n      key: \"1\",\r\n      token: \"ETH\",\r\n      l1: \"Ξ\" + L1EthBalance,\r\n      l2: \"Ξ\" + L2EthBalance,\r\n    },\r\n  ];\r\n\r\n  const [form] = Form.useForm();\r\n\r\n  const onAssetChange = value => {\r\n    console.log(value);\r\n  };\r\n\r\n  async function onFinish(values) {\r\n    console.log(contracts);\r\n    console.log(values.amount.toString());\r\n    console.log(rollup);\r\n    let newTx;\r\n    try {\r\n      if (rollup === \"arbitrum\") {\r\n        newTx = await tx(\r\n          contracts.Inbox.depositEth(1_300_000, {\r\n            value: utils.parseEther(values.amount.toString()),\r\n            gasLimit: 300000,\r\n          }),\r\n        );\r\n      } else if (rollup === \"optimism\") {\r\n        newTx = await tx(\r\n          contracts.OVM_L1StandardBridge.depositETH(1_300_000, \"0x\", {\r\n            value: utils.parseEther(values.amount.toString()),\r\n          }),\r\n        );\r\n      }\r\n      await newTx.wait();\r\n      console.log(\"woop!\");\r\n    } catch (e) {\r\n      console.log(e);\r\n      console.log(\"something went wrong!\");\r\n    }\r\n  }\r\n\r\n  const wrongNetwork = selectedChainId !== activeConfig.L1.chainId;\r\n\r\n  return (\r\n    <div style={{ padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\r\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\r\n        <h2>Welcome to the L2 Deposit Bridge!</h2>\r\n        <Radio.Group\r\n          value={rollup}\r\n          onChange={e => {\r\n            setRollup(e.target.value);\r\n          }}\r\n          style={{ marginBottom: 10 }}\r\n        >\r\n          <Radio.Button value=\"arbitrum\">Arbitrum</Radio.Button>\r\n          <Radio.Button value=\"optimism\">Optimism</Radio.Button>\r\n        </Radio.Group>\r\n\r\n        <Table columns={columns} dataSource={data} pagination={false} style={{ marginBottom: 20 }} />\r\n\r\n        <Form\r\n          {...formItemLayout}\r\n          form={form}\r\n          name=\"control-hooks\"\r\n          onFinish={onFinish}\r\n          initialValues={{ assetType: \"eth\" }}\r\n        >\r\n          <Form.Item\r\n            name=\"assetType\"\r\n            label=\"Select Asset Type\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n              },\r\n            ]}\r\n          >\r\n            <Select placeholder=\"Select an asset type\" onChange={onAssetChange} allowClear>\r\n              <Option value=\"eth\">ETH</Option>\r\n              <Option disabled value=\"erc20\">\r\n                ERC-20\r\n              </Option>\r\n            </Select>\r\n          </Form.Item>\r\n          <Form.Item name=\"address\" label=\"Address\">\r\n            <Input disabled placeholder={address} />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"amount\"\r\n            label=\"Amount to bridge\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n              },\r\n            ]}\r\n          >\r\n            <InputNumber />\r\n          </Form.Item>\r\n          <Form.Item {...tailFormItemLayout}>\r\n            <Button type=\"primary\" htmlType=\"submit\" disabled={wrongNetwork}>\r\n              {wrongNetwork ? `Switch wallet to ${activeConfig.L1.name}` : \"Deposit\"}\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Arbitrum Inbox https://rinkeby.etherscan.io/address/0xa157dc79ca26d69c3b1282d03ec42bdee2790a8f#code\r\nconst ArbitrumInboxABI = [\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      { indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" },\r\n      { indexed: false, internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"InboxMessageDelivered\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [{ indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" }],\r\n    name: \"InboxMessageDeliveredFromOrigin\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [{ indexed: false, internalType: \"address\", name: \"newSource\", type: \"address\" }],\r\n    name: \"WhitelistSourceUpdated\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"bridge\",\r\n    outputs: [{ internalType: \"contract IBridge\", name: \"\", type: \"address\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"l2CallValue\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"excessFeeRefundAddress\", type: \"address\" },\r\n      { internalType: \"address\", name: \"callValueRefundAddress\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"createRetryableTicket\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" }],\r\n    name: \"depositEth\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"contract IBridge\", name: \"_bridge\", type: \"address\" },\r\n      { internalType: \"address\", name: \"_whitelist\", type: \"address\" },\r\n    ],\r\n    name: \"initialize\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"isMaster\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendContractTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendL1FundedContractTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendL1FundedUnsignedTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\r\n    name: \"sendL2Message\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\r\n    name: \"sendL2MessageFromOrigin\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendUnsignedTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"address\", name: \"newSource\", type: \"address\" }],\r\n    name: \"updateWhitelistSource\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"whitelist\",\r\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n];\r\n\r\n// https://github.com/ethereum-optimism/optimism/blob/2bd49730fa8d2c10953873f0ccc792198a49d5c9/packages/contracts/contracts/optimistic-ethereum/iOVM/bridge/tokens/iOVM_L1StandardBridge.sol\r\nconst OVM_L1StandardBridgeABI = [\r\n  \"function depositETH(uint32 _l2Gas,bytes calldata _data) external payable\",\r\n  \"function depositETHTo(address _to,uint32 _l2Gas,bytes calldata _data) external payable\",\r\n  \"function finalizeETHWithdrawal (address _from,address _to,uint _amount,bytes calldata _data) external\",\r\n];\r\n\r\nconst L1BridgeMetadata = {\r\n  // Arbitrium Contract's\r\n  44010: {\r\n    contracts: {\r\n      Inbox: {\r\n        address: \"0xA4d796Ad4e79aFB703340a596AEd88f8a5924183\",\r\n        abi: ArbitrumInboxABI,\r\n      },\r\n    },\r\n  },\r\n  4: {\r\n    contracts: {\r\n      Inbox: {\r\n        address: \"0x578bade599406a8fe3d24fd7f7211c0911f5b29e\",\r\n        abi: ArbitrumInboxABI,\r\n      },\r\n    },\r\n  },\r\n  // Optimism Contract's\r\n  31337: {\r\n    contracts: {\r\n      OVM_L1StandardBridge: {\r\n        address: \"0x998abeb3E57409262aE5b751f60747921B33613E\",\r\n        abi: OVM_L1StandardBridgeABI,\r\n      },\r\n    },\r\n  },\r\n  42: {\r\n    contracts: {\r\n      OVM_L1StandardBridge: {\r\n        address: \"0x22F24361D548e5FaAfb36d1437839f080363982B\",\r\n        abi: OVM_L1StandardBridgeABI,\r\n      },\r\n    },\r\n  },\r\n};\r\n","import { Alert, Button } from \"antd\";\r\nimport React from \"react\";\r\n\r\nimport { NETWORK } from \"../constants\";\r\n\r\nfunction NetworkDisplay({\r\n  NETWORKCHECK,\r\n  localChainId,\r\n  selectedChainId,\r\n  targetNetwork,\r\n  USE_NETWORK_SELECTOR,\r\n  logoutOfWeb3Modal,\r\n}) {\r\n  let networkDisplay = \"\";\r\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\r\n    const networkSelected = NETWORK(selectedChainId);\r\n    const networkLocal = NETWORK(localChainId);\r\n    if (selectedChainId === 1337 && localChainId === 31337) {\r\n      networkDisplay = (\r\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\r\n          <Alert\r\n            message=\"⚠️ Wrong Network ID\"\r\n            description={\r\n              <div>\r\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\r\n                HardHat.\r\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\r\n              </div>\r\n            }\r\n            type=\"error\"\r\n            closable={false}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      networkDisplay = (\r\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\r\n          <Alert\r\n            message=\"⚠️ Wrong Network\"\r\n            description={\r\n              <div>\r\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\r\n                <Button\r\n                  onClick={async () => {\r\n                    const ethereum = window.ethereum;\r\n                    const data = [\r\n                      {\r\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\r\n                        chainName: targetNetwork.name,\r\n                        nativeCurrency: targetNetwork.nativeCurrency,\r\n                        rpcUrls: [targetNetwork.rpcUrl],\r\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\r\n                      },\r\n                    ];\r\n                    console.log(\"data\", data);\r\n\r\n                    let switchTx;\r\n                    // https://docs.metamask.io/guide/rpc-api.html#other-rpc-methods\r\n                    try {\r\n                      switchTx = await ethereum.request({\r\n                        method: \"wallet_switchEthereumChain\",\r\n                        params: [{ chainId: data[0].chainId }],\r\n                      });\r\n                    } catch (switchError) {\r\n                      // not checking specific error code, because maybe we're not using MetaMask\r\n                      try {\r\n                        switchTx = await ethereum.request({\r\n                          method: \"wallet_addEthereumChain\",\r\n                          params: data,\r\n                        });\r\n                      } catch (addError) {\r\n                        // handle \"add\" error\r\n                      }\r\n                    }\r\n\r\n                    if (switchTx) {\r\n                      console.log(switchTx);\r\n                    }\r\n                  }}\r\n                >\r\n                  <b>{networkLocal && networkLocal.name}</b>\r\n                </Button>\r\n              </div>\r\n            }\r\n            type=\"error\"\r\n            closable={false}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  } else {\r\n    networkDisplay = USE_NETWORK_SELECTOR ? null : (\r\n      <div style={{ zIndex: -1, position: \"absolute\", right: 150, top: 25, padding: 16, color: targetNetwork.color }}>\r\n        {targetNetwork.name}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  console.log({ networkDisplay });\r\n\r\n  return networkDisplay;\r\n}\r\n\r\nexport default NetworkDisplay;\r\n","import { Button } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { useBalance, useGasPrice } from \"eth-hooks\";\r\n\r\nimport { getRPCPollTime, Transactor } from \"../helpers\";\r\n\r\nfunction FaucetHint({ localProvider, targetNetwork, address }) {\r\n  const [faucetClicked, setFaucetClicked] = useState(false);\r\n\r\n  const localProviderPollingTime = getRPCPollTime(localProvider);\r\n\r\n  // fetch local balance\r\n  const yourLocalBalance = useBalance(localProvider, address, localProviderPollingTime);\r\n\r\n  // get gas Price from network\r\n  const gasPrice = useGasPrice(targetNetwork, \"fast\", localProviderPollingTime);\r\n\r\n  // Faucet Tx can be used to send funds from the faucet\r\n  const faucetTx = Transactor(localProvider, gasPrice);\r\n\r\n  let faucetHint = \"\";\r\n\r\n  if (\r\n    !faucetClicked &&\r\n    localProvider &&\r\n    localProvider._network &&\r\n    localProvider._network.chainId === 31337 &&\r\n    yourLocalBalance &&\r\n    ethers.utils.formatEther(yourLocalBalance) <= 0\r\n  ) {\r\n    faucetHint = (\r\n      <div style={{ position: \"absolute\", right: 65, top: 65 }}>\r\n        <Button\r\n          type=\"primary\"\r\n          onClick={() => {\r\n            faucetTx({\r\n              to: address,\r\n              value: ethers.utils.parseEther(\"0.01\"),\r\n            });\r\n            setFaucetClicked(true);\r\n          }}\r\n        >\r\n          💰 Grab funds from the faucet ⛽️\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return faucetHint;\r\n}\r\n\r\nexport default FaucetHint;\r\n","export default __webpack_public_path__ + \"static/media/top.cf31a048.jpg\";","import React from \"react\";\r\nimport hat from '../top.jpg';\r\n/**\r\n * web3 props can be passed from '../App.jsx' into your local view component for use\r\n * @param {*} yourLocalBalance balance on current network\r\n * @param {*} readContracts contracts from current chain already pre-loaded using ethers contract module. More here https://docs.ethers.io/v5/api/contract/contract/\r\n * @returns react component\r\n **/\r\nfunction Home() {\r\n  // you can also use hooks locally in your component of choice\r\n  // in this case, let's keep track of 'purpose' variable from our contract\r\n\r\n  return (\r\n    <div>\r\n\r\n<h1>About LENDING</h1>\r\n <p>Maximum size of loan reduces per length of loan<br />\r\n    Maximum length of loan is 28 days.<br />\r\n    Interest rate is 0.001% per day so <br />\r\n    a loan of 0.24 eth for 5 days would cost 0.0012eth (approx $1.90)<br />\r\n    If you take a loan out for 20 days but pay it back after 2 days, you only pay the 2 days interest.<br />\r\n    Can only be liquidated after the loan period expires.<br />\r\n    More NFT collections and options will be added in the future.\r\n\r\n    <h1>About FLOOR 101</h1> \r\n    <img src={hat} width={100}></img><br />\r\n    Floor 101 was built by <a href='https://twitter.com/pcashpeso'>Jollibee</a><br />\r\n    Please contact if you want to collaborate or add and NFT collection.\r\n    <h1>Contracts</h1>\r\n    <a href='https://arbiscan.io/address/0x5a4eb044cb859b154531d7b0c7bdc89fe77aa86e'>Lending Contract</a>\r\n    </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import { Select, List, Button, InputNumber } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport { utils } from \"ethers\";\r\nimport { Address, AddressInput } from \"../components\";\r\n\r\nconst { Option } = Select;\r\nconst { ethers } = require(\"ethers\");\r\n\r\nexport default function Hints({ yourLocalBalance, mainnetProvider, price, address }) {\r\n  // Get a list of tokens from a tokenlist -> see tokenlists.org!\r\n\r\n  return (\r\n    <div>\r\n\r\n\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🚀</span>\r\n        Your <b>contract artifacts</b> are automatically injected into your frontend at\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          packages/react-app/src/contracts/\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🎛</span>\r\n        Edit your <b>frontend</b> in\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          packages/reactapp/src/App.js\r\n        </span>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n","import { gql, useQuery } from \"@apollo/client\";\r\nimport { Button, Input, Table, Typography } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport GraphiQL from \"graphiql\";\r\nimport \"graphiql/graphiql.min.css\";\r\nimport fetch from \"isomorphic-fetch\";\r\nimport React, { useState } from \"react\";\r\nimport { Address } from \"../components\";\r\n\r\nconst highlight = {\r\n  marginLeft: 4,\r\n  marginRight: 8,\r\n  /* backgroundColor: \"#f9f9f9\", */ padding: 4,\r\n  borderRadius: 4,\r\n  fontWeight: \"bolder\",\r\n};\r\n\r\nfunction Subgraph(props) {\r\n  function graphQLFetcher(graphQLParams) {\r\n    return fetch(props.subgraphUri, {\r\n      method: \"post\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(graphQLParams),\r\n    }).then(response => response.json());\r\n  }\r\n\r\n  const EXAMPLE_GRAPHQL = `\r\n  {\r\n    purposes(first: 25, orderBy: createdAt, orderDirection: desc) {\r\n      id\r\n      purpose\r\n      createdAt\r\n      sender {\r\n        id\r\n      }\r\n    }\r\n    senders {\r\n      id\r\n      address\r\n      purposeCount\r\n    }\r\n  }\r\n  `;\r\n  const EXAMPLE_GQL = gql(EXAMPLE_GRAPHQL);\r\n  const { loading, data } = useQuery(EXAMPLE_GQL, { pollInterval: 2500 });\r\n\r\n  const purposeColumns = [\r\n    {\r\n      title: \"Purpose\",\r\n      dataIndex: \"purpose\",\r\n      key: \"purpose\",\r\n    },\r\n    {\r\n      title: \"Sender\",\r\n      key: \"id\",\r\n      render: record => <Address value={record.sender.id} ensProvider={props.mainnetProvider} fontSize={16} />,\r\n    },\r\n    {\r\n      title: \"createdAt\",\r\n      key: \"createdAt\",\r\n      dataIndex: \"createdAt\",\r\n      render: d => new Date(d * 1000).toISOString(),\r\n    },\r\n  ];\r\n\r\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\r\n\r\n  const deployWarning = (\r\n    <div style={{ marginTop: 8, padding: 8 }}>Warning: 🤔 Have you deployed your subgraph yet?</div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\r\n        You will find that parsing/tracking events with the{\" \"}\r\n        <span className=\"highlight\" style={highlight}>\r\n          useEventListener\r\n        </span>{\" \"}\r\n        hook becomes a chore for every new project.\r\n      </div>\r\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\r\n        Instead, you can use{\" \"}\r\n        <a href=\"https://thegraph.com/docs/about/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          The Graph\r\n        </a>{\" \"}\r\n        with 🏗 scaffold-eth (\r\n        <a href=\"https://youtu.be/T5ylzOTkn-Q\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          learn more\r\n        </a>\r\n        ):\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>⛓️</span>\r\n        Make sure your local chain is running first:\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn chain\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🚮</span>\r\n        Clean up previous data, if there is any:\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn clean-graph-node\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>📡</span>\r\n        Spin up a local graph node by running\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn run-graph-node\r\n        </span>\r\n        <span style={{ marginLeft: 4 }}>\r\n          {\" \"}\r\n          (requires{\" \"}\r\n          <a href=\"https://www.docker.com/products/docker-desktop\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n            {\" \"}\r\n            Docker\r\n          </a>\r\n          ){\" \"}\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>📝</span>\r\n        Create your <b>local subgraph</b> by running\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn graph-create-local\r\n        </span>\r\n        (only required once!)\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🚢</span>\r\n        Deploy your <b>local subgraph</b> by running\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn graph-ship-local\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🖍️</span>\r\n        Edit your <b>local subgraph</b> in\r\n        <span className=\"highlight\" style={highlight}>\r\n          packages/subgraph/src\r\n        </span>\r\n        (learn more about subgraph definition{\" \"}\r\n        <a\r\n          href=\"https://thegraph.com/docs/en/developer/define-subgraph-hosted/\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          here\r\n        </a>\r\n        )\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🤩</span>\r\n        Deploy your <b>contracts and your subgraph</b> in one go by running\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn deploy-and-graph\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ width: 780, margin: \"auto\", paddingBottom: 64 }}>\r\n        <div style={{ margin: 32, textAlign: \"right\" }}>\r\n          <Input\r\n            onChange={e => {\r\n              setNewPurpose(e.target.value);\r\n            }}\r\n          />\r\n          <Button\r\n            onClick={() => {\r\n              console.log(\"newPurpose\", newPurpose);\r\n              /* look how you call setPurpose on your contract: */\r\n              props.tx(props.writeContracts.YourContract.setPurpose(newPurpose));\r\n            }}\r\n          >\r\n            Set Purpose\r\n          </Button>\r\n        </div>\r\n\r\n        {data ? (\r\n          <Table dataSource={data.purposes} columns={purposeColumns} rowKey=\"id\" />\r\n        ) : (\r\n          <Typography>{loading ? \"Loading...\" : deployWarning}</Typography>\r\n        )}\r\n\r\n        <div style={{ margin: 32, height: 400, border: \"1px solid #888888\", textAlign: \"left\" }}>\r\n          <GraphiQL fetcher={graphQLFetcher} docExplorerOpen query={EXAMPLE_GRAPHQL} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ padding: 64 }}>...</div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Subgraph;\r\n","import { Button, Col, Menu, Row, Select , InputNumber, List} from \"antd\";\r\n\r\nimport \"antd/dist/antd.css\";\r\nimport {\r\n  useBalance,\r\n  useContractLoader,\r\n  useContractReader,\r\n  // useOnBlock,\r\n  useUserProviderAndSigner,\r\n} from \"eth-hooks\";\r\nimport { useExchangeEthPrice } from \"eth-hooks/dapps/dex\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport { Link, Route, Switch, useLocation } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport {\r\n  Account,\r\n  Contract,\r\n  Faucet,\r\n  GasGauge,\r\n  Header,\r\n  Ramp,\r\n  ThemeSwitch,\r\n  NetworkDisplay,\r\n  FaucetHint,\r\n  NetworkSwitch,\r\n} from \"./components\";\r\nimport { NETWORKS, ALCHEMY_KEY } from \"./constants\";\r\nimport externalContracts from \"./contracts/external_contracts\";\r\n// contracts\r\nimport deployedContracts from \"./contracts/hardhat_contracts.json\";\r\nimport { getRPCPollTime, Transactor, Web3ModalSetup } from \"./helpers\";\r\nimport { Home} from \"./views\";\r\nimport { useStaticJsonRPC, useGasPrice } from \"./hooks\";\r\nimport { Alchemy, Network } from \"alchemy-sdk\";\r\nimport { useEventListener } from \"eth-hooks/events/useEventListener\";\r\n\r\n// Optional Config object, but defaults to demo api-key and eth-mainnet.\r\nconst settings = {\r\n  apiKey: 'lIguUBlNorQF0qVOvhyXc57Tkgk3JynZ', // Replace with your Alchemy API Key.\r\n  network: Network.ARB_MAINNET, // Replace with your network.\r\n};\r\n\r\nconst alchemy = new Alchemy(settings);\r\n\r\nconst { ethers } = require(\"ethers\");\r\n/*\r\n    Welcome to 🏗 scaffold-eth !\r\n\r\n    Code:\r\n    https://github.com/scaffold-eth/scaffold-eth\r\n\r\n    Support:\r\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\r\n    or DM @austingriffith on twitter or telegram\r\n\r\n    You should get your own Alchemy.com & Infura.io ID and put it in `constants.js`\r\n    (this is your connection to the main Ethereum network for ENS etc.)\r\n\r\n\r\n    🌏 EXTERNAL CONTRACTS:\r\n    You can also bring in contract artifacts in `constants.js`\r\n    (and then use the `useExternalContractLoader()` hook!)\r\n*/\r\n\r\n/// 📡 What chain are your contracts deployed to?\r\nconst initialNetwork = NETWORKS.arbitrum; // <------- select your target frontend network (localhost, goerli, xdai, mainnet)\r\n\r\n// 😬 Sorry for all the console logging\r\nconst DEBUG = false;\r\nconst NETWORKCHECK = true;\r\nconst USE_BURNER_WALLET = true; // toggle burner wallet feature\r\nconst USE_NETWORK_SELECTOR = false;\r\n\r\nconst web3Modal = Web3ModalSetup();\r\n\r\n// 🛰 providers\r\nconst providers = [\r\n  \"https://eth-mainnet.gateway.pokt.network/v1/lb/611156b4a585a20035148406\",\r\n  `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`,\r\n  \"https://rpc.scaffoldeth.io:48544\",\r\n];\r\n\r\nfunction App(props) {\r\n  // specify all the chains your app is available on. Eg: ['localhost', 'mainnet', ...otherNetworks ]\r\n  // reference './constants.js' for other networks\r\n  const networkOptions = [initialNetwork.name, \"mainnet\", \"goerli\"];\r\n\r\n  const [injectedProvider, setInjectedProvider] = useState();\r\n  const [address, setAddress] = useState();\r\n  const [selectedNetwork, setSelectedNetwork] = useState(networkOptions[0]);\r\n  const location = useLocation();\r\n  const [yourCollectibles2, setYourCollectibles2] = useState();\r\n  const targetNetwork = NETWORKS[selectedNetwork];\r\n  const [loanInfoString, setMaxLoanString] = useState(\"Maximum loan size for GMX Blueberries is .25 ETH\");\r\n  const [collectionNumber, setCollectionNumber] = useState(0);  // indenitifies the NFT collection to be used\r\n  const [NFTid, setNFTid] = useState(\"0\");\r\n\r\n  // input number handler for NFT ID\r\n  const changeLoan = value => {\r\n    setLoanAmount(value);\r\n  };\r\n\r\n   // input number handler for NFT ID\r\n   const onChange2 = value => {\r\n    setNFTid(value);\r\n  };\r\n\r\n  const handleChange = (value) => {\r\n    // setShow(!show)\r\n    setCollectionNumber(value)\r\n    console.log(\"-------------------------\", value)\r\n    if(value==0)\r\n     setMaxLoanString(\"Maximum loan size for GMX Blueberries is .25 ETH\")\r\n    else\r\n     setMaxLoanString(\"Maximum loan size for Floor 101 is .1 ETH\")    \r\n  };\r\n\r\n  // 🔭 block explorer URL\r\n  const blockExplorer = targetNetwork.blockExplorer;\r\n\r\n  // load all your providers\r\n  const localProvider = useStaticJsonRPC([\r\n    process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : targetNetwork.rpcUrl,\r\n  ]);\r\n\r\n  const mainnetProvider = useStaticJsonRPC(providers, localProvider);\r\n\r\n  // Sensible pollTimes depending on the provider you are using\r\n  const localProviderPollingTime = getRPCPollTime(localProvider);\r\n  const mainnetProviderPollingTime = getRPCPollTime(mainnetProvider);\r\n\r\n  if (DEBUG) console.log(`Using ${selectedNetwork} network`);\r\n\r\n  // 🛰 providers\r\n  if (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\r\n\r\n  const logoutOfWeb3Modal = async () => {\r\n    await web3Modal.clearCachedProvider();\r\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\r\n      await injectedProvider.provider.disconnect();\r\n    }\r\n    setTimeout(() => {\r\n      window.location.reload();\r\n    }, 1);\r\n  };\r\n\r\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\r\n  const price = useExchangeEthPrice(targetNetwork, mainnetProvider, mainnetProviderPollingTime);\r\n\r\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\r\n  const gasPrice = useGasPrice(targetNetwork, \"FastGasPrice\", localProviderPollingTime);\r\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\r\n  const userProviderAndSigner = useUserProviderAndSigner(injectedProvider, localProvider, USE_BURNER_WALLET);\r\n  const userSigner = userProviderAndSigner.signer;\r\n\r\n  useEffect(() => {\r\n    async function getAddress() {\r\n      if (userSigner) {\r\n        const newAddress = await userSigner.getAddress();\r\n        setAddress(newAddress);\r\n      }\r\n    }\r\n    getAddress();\r\n  }, [userSigner]);\r\n\r\n  // You can warn the user if you would like them to be on a specific network\r\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\r\n  const selectedChainId =\r\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\r\n\r\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\r\n\r\n  // The transactor wraps transactions and provides notificiations\r\n  const tx = Transactor(userSigner, gasPrice);\r\n\r\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\r\n  const yourLocalBalance = useBalance(localProvider, address, localProviderPollingTime);\r\n\r\n  // Just plug in different 🛰 providers to get your balance on different chains:\r\n  const yourMainnetBalance = useBalance(mainnetProvider, address, mainnetProviderPollingTime);\r\n\r\n  // const contractConfig = useContractConfig();\r\n\r\n  const contractConfig = { deployedContracts: deployedContracts || {}, externalContracts: externalContracts || {} };\r\n\r\n  // Load in your local 📝 contract and read a value from it:\r\n  const readContracts = useContractLoader(localProvider, contractConfig);\r\n\r\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\r\n  const writeContracts = useContractLoader(userSigner, contractConfig, localChainId);\r\n\r\n  // EXTERNAL CONTRACT EXAMPLE:\r\n  //\r\n  // If you want to bring in the mainnet DAI contract it would look like:\r\n  const mainnetContracts = useContractLoader(mainnetProvider, contractConfig);\r\n\r\n  // If you want to call a function on a new block\r\n  // useOnBlock(mainnetProvider, () => {\r\n  //   console.log(`⛓ A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\r\n  // });\r\n\r\n  const lendAddy =  \"0x5a4eb044cb859b154531d7b0c7bdc89fe77aa86e\";  \r\n  const ethBalance = useBalance(localProvider, lendAddy);\r\n  const [loanDays, setNFTDays] = useState(1);  // length of loan in days \r\n  const [loanAmount, setLoanAmount] = useState(.25);   \r\n\r\n  // displays NFTs that are minted\r\n  const updateYourCollectibles2 = async () => {\r\n    console.log(\"--------------------------------------------------- \")\r\n    let counter = 0\r\n    const nfts = await alchemy.nft.getNftsForOwner(address);\r\n     if (nfts.totalCount == 0)\r\n      { alert(\"No blueberries for this address\"); return }\r\n    const nftList = nfts[\"ownedNfts\"]; \r\n    const collectibleUpdate = [];\r\n    for (let nft of nftList) {\r\n      if (nft.contract.address == \"0x17f4baa9d35ee54ffbcb2608e20786473c7aa49f\")\r\n       {console.log(` ${nft.tokenId} .${nft.rawMetadata.image}` );\r\n       let addr = \"https://ipfs.io/ipfs/QmSg4CMhmWdQ17i7pNbd8ENhW3B4Vb1kvMK3pgj7tryaNv/\" + nft.tokenId + \".jpg\";\r\n       collectibleUpdate.push({ id: nft.tokenId, image: addr, owner: address});\r\n      }\r\n      if (counter < 1)\r\n      console.log(\"no nfts----------------------------\")\r\n \r\n    } \r\n    setYourCollectibles2(collectibleUpdate);\r\n  };\r\n  /*\r\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\r\n  console.log(\"🏷 Resolved austingriffith.eth as:\", addressFromENS)\r\n  */\r\n\r\n  //\r\n  // 🧫 DEBUG 👨🏻‍🔬\r\n  //\r\n  useEffect(() => {\r\n    if (\r\n      DEBUG &&\r\n      mainnetProvider &&\r\n      address &&\r\n      selectedChainId &&\r\n      yourLocalBalance &&\r\n      yourMainnetBalance &&\r\n      readContracts &&\r\n      writeContracts &&\r\n      mainnetContracts\r\n    ) {\r\n      console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\r\n      console.log(\"🌎 mainnetProvider\", mainnetProvider);\r\n      console.log(\"🏠 localChainId\", localChainId);\r\n      console.log(\"👩‍💼 selected address:\", address);\r\n      console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\r\n      console.log(\"💵 yourLocalBalance\", yourLocalBalance ? ethers.utils.formatEther(yourLocalBalance) : \"...\");\r\n      console.log(\"💵 yourMainnetBalance\", yourMainnetBalance ? ethers.utils.formatEther(yourMainnetBalance) : \"...\");\r\n      console.log(\"📝 readContracts\", readContracts);\r\n      console.log(\"🌍 DAI contract on mainnet:\", mainnetContracts);\r\n      console.log(\"🔐 writeContracts\", writeContracts);\r\n    }\r\n  }, [\r\n    mainnetProvider,\r\n    address,\r\n    selectedChainId,\r\n    yourLocalBalance,\r\n    yourMainnetBalance,\r\n    readContracts,\r\n    writeContracts,\r\n    mainnetContracts,\r\n    localChainId,\r\n  ]);\r\n\r\n  const loadWeb3Modal = useCallback(async () => {\r\n    //const provider = await web3Modal.connect();\r\n    const provider = await web3Modal.requestProvider();\r\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\r\n\r\n    provider.on(\"chainChanged\", chainId => {\r\n      console.log(`chain changed to ${chainId}! updating providers`);\r\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\r\n    });\r\n\r\n    provider.on(\"accountsChanged\", () => {\r\n      console.log(`account changed!`);\r\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\r\n    });\r\n\r\n    // Subscribe to session disconnection\r\n    provider.on(\"disconnect\", (code, reason) => {\r\n      console.log(code, reason);\r\n      logoutOfWeb3Modal();\r\n    });\r\n    // eslint-disable-next-line\r\n  }, [setInjectedProvider]);\r\n\r\n  useEffect(() => {\r\n    if (web3Modal.cachedProvider) {\r\n      loadWeb3Modal();\r\n    }\r\n    //automatically connect if it is a safe app\r\n    const checkSafeApp = async () => {\r\n      if (await web3Modal.isSafeApp()) {\r\n        loadWeb3Modal();\r\n      }\r\n    };\r\n    checkSafeApp();\r\n  }, [loadWeb3Modal]);\r\n\r\n  const repayLoanEvent = useEventListener(readContracts, \"FloorLendingV2\", \"repayLoanEvent\", localProvider, 1); \r\n let a =0\r\n\r\n     // input number handler for NFT ID\r\n     const changeDuration = value => {\r\n      try{\r\n       setNFTDays(value);\r\n       a = (.26 -(value * .005)).toFixed(2)\r\n       console.log(\"a  = fixed 1 \" , a)       \r\n       setLoanAmount(a);\r\n      } catch (e) {console.log(e);} \r\n   };  \r\n\r\n\r\n  const getLoans= async ( ) => {\r\n    let str = \"\"\r\n    let balance2 = await readContracts.FloorLendingV2.getMappingLength(address, 1);\r\n    for (let i = 0; i < balance2; i++)\r\n     { let tokenURI = await readContracts.FloorLendingV2.getLoanID(address, 1, i );\r\n       let due = await readContracts.FloorLendingV2.getDueDate(tokenURI, 1);\r\n        str=str.concat('NFT id : ', tokenURI , ' Due :' ,getDate(due) )\r\n    }\r\n    setDisplayLoans(str)\r\n  };\r\n\r\n  const handleClick = async (event, message) => {\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    const signer = provider.getSigner();\r\n    const marketContract = new ethers.Contract(\"0x17f4BAa9D35Ee54fFbCb2608e20786473c7aa49f\", berryAbi, provider);\r\n    const marketWithSigner = marketContract.connect(signer); \r\n    try{  \r\n      await marketWithSigner.approve(\"0x5A4Eb044cb859B154531D7b0c7bdc89fE77AA86E\", message);\r\n    }catch(e) {alert (e, \"approve error\"); console.log(e);}\r\n  };\r\n\r\n  function getDate(dt) {\r\n    const milliseconds = dt * 1000 // 1575909015000\r\n    const dateObject = new Date(milliseconds)\r\n    let humanDateFormat = dateObject.toLocaleString() //2019-12-9 10:30:15\r\n    return humanDateFormat;\r\n  }\r\n\r\n  const lend = async () =>{ \r\n    console.log(\"loanAmount \", loanAmount, \" loanDays \", loanDays , \" collectionNumber \", collectionNumber)\r\n    await tx( writeContracts.FloorLendingV2.lend(NFTid, loanDays, collectionNumber,ethers.utils.parseEther(loanAmount + \"\")));\r\n   }\r\n\r\n  // const marketContractAddress = useContractReader(readContracts, \"Marketplace\", \"address\");\r\n  const balance = useContractReader(readContracts, \"Floor101\", \"balanceOf\", [address]);\r\n  const yourBalance = balance && balance.toNumber && balance.toNumber();\r\n  const [yourCollectibles, setYourCollectibles] = useState();\r\n  const [displayLoans, setDisplayLoans] = useState();  \r\n\r\n  const berryAbi = [\r\n    \"function approve( address to, uint256 tokenId)\", \r\n  ];\r\n\r\n  const repay = async () =>{ \r\n    const repayAmount = await readContracts.FloorLendingV2.calculateBorrowFee(NFTid,0); \r\n    await tx( writeContracts.FloorLendingV2.repayLoan(NFTid,0,{value: repayAmount}));\r\n  }\r\n\r\n  const repayFLOOR = async () =>{ \r\n    const repayAmount = await readContracts.FloorLendingV2.calculateBorrowFee(NFTid,1); \r\n    alert(repayAmount)\r\n    await tx( writeContracts.FloorLendingV2.repayLoan(NFTid,1,{value: repayAmount}));\r\n  }\r\n  \r\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {/* ✏️ Edit the header and change the title to your project name */}\r\n      <Header>\r\n        {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\r\n        <div style={{ position: \"relative\", display: \"flex\", flexDirection: \"column\" }}>\r\n          <div style={{ display: \"flex\", flex: 1 }}>\r\n            {USE_NETWORK_SELECTOR && (\r\n              <div style={{ marginRight: 20 }}>\r\n                <NetworkSwitch\r\n                  networkOptions={networkOptions}\r\n                  selectedNetwork={selectedNetwork}\r\n                  setSelectedNetwork={setSelectedNetwork}\r\n                />\r\n              </div>\r\n            )}\r\n            <Account\r\n              useBurner={USE_BURNER_WALLET}\r\n              address={address}\r\n              localProvider={localProvider}\r\n              userSigner={userSigner}\r\n              mainnetProvider={mainnetProvider}\r\n              price={price}\r\n              web3Modal={web3Modal}\r\n              loadWeb3Modal={loadWeb3Modal}\r\n              logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n              blockExplorer={blockExplorer}\r\n            />\r\n          </div>\r\n        </div>\r\n      </Header>\r\n      {yourLocalBalance.lte(ethers.BigNumber.from(\"0\")) && (\r\n        <FaucetHint localProvider={localProvider} targetNetwork={targetNetwork} address={address} />\r\n      )}\r\n      <NetworkDisplay\r\n        NETWORKCHECK={NETWORKCHECK}\r\n        localChainId={localChainId}\r\n        selectedChainId={selectedChainId}\r\n        targetNetwork={targetNetwork}\r\n        logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n        USE_NETWORK_SELECTOR={USE_NETWORK_SELECTOR}\r\n      />\r\n      <Menu style={{ textAlign: \"center\", marginTop: 20 }} selectedKeys={[location.pathname]} mode=\"horizontal\">\r\n        <Menu.Item key=\"/\">\r\n          <Link to=\"/\">Home</Link>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"/repay\">\r\n          <Link to=\"/repay\">Repay Loan</Link>\r\n        </Menu.Item>       \r\n        <Menu.Item key=\"/about\">\r\n          <Link to=\"/home\">About</Link>\r\n        </Menu.Item>\r\n\r\n      </Menu>\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n\r\n        <h2>FLOOR 101 - NFT LENDING</h2>\r\n    <Select defaultValue=\"GMX Blueberry Club\" style={{width: 200,}} onChange={handleChange}\r\n      options={[\r\n        {value: '0x17f4BAa9D35Ee54fFbCb2608e20786473c7aa49f', label: 'GMX Blueberry Club',},\r\n        {value: '',label: 'Coming soon', disabled: true},\r\n      ]}\r\n    /> \r\n    <p>For more info about lending <a href=\"./about\">CLICK HERE</a></p>\r\n   Connected to {address}<br />\r\n   <div>Available ETH in lending contract ETH {ethers.utils.formatEther(ethBalance)}</div>\r\n   <div >\r\n<Button type=\"primary\" shape=\"round\" onClick={() =>{updateYourCollectibles2()}}>Display Eligible Blueberries</Button>\r\n\r\n<List id=\"centerWrapper !important\" dataSource={yourCollectibles2} renderItem={item => {\r\n                    return (\r\n<List.Item>\r\n  Item ID {item.id}<br />\r\n{<img src= {item.image} width={100} class=\"center\" />} \r\n<table padding = {25}>\r\n  <tr><td>Nft ID : </td><td><InputNumber min={1} max={10000} defaultValue={item.id} disabled = {true} onChange={setNFTid} style={{ width: 200 }} /></td></tr>\r\n<tr><td>Loan Duration : </td><td>\r\n <InputNumber min={1} max={28} placeholder={\"Loan Duration\"} defaultValue={1} onChange={changeDuration} style={{ width: 200 }} />\r\n </td></tr>\r\n <tr><td>Loan Amount : </td><td>\r\n <InputNumber min={.1} max={.25} step={0.01} value={loanAmount} onChange={changeLoan} style={{ width: 200 }} />\r\n </td></tr></table>\r\n <Button type=\"primary\" shape=\"round\" onClick={(event) => handleClick(event, item.id)} >Approve</Button>{\" \"}\r\n <Button type=\"primary\" shape=\"round\" onClick={lend}>LEND</Button><br />\r\n \r\n </List.Item>\r\n);}}/>\r\n\r\n   </div>\r\n\r\n        </Route>\r\n\r\n        <Route path=\"/repay\">\r\n        <div style={{ width: 460, margin: \"auto\", backgroundColor: \"Off-White\", border:2}}>\r\n <h1>Repay Loan</h1>\r\n <Select defaultValue=\"GMX Blueberry Club\" visible={false } style={{width: 200,}}  \r\n      options={[\r\n        {value: '0', label: 'GMX Blueberry Club',},\r\n        {value: '1',label: 'Floor 101',},\r\n      ]}\r\n    /> <br />\r\n <Button type=\"primary\" shape=\"round\" onClick={() =>{getLoans()}} >Display Loans</Button>{' '}\r\n <h1>Your Loans</h1>\r\n {displayLoans}\r\n <p> Enter the number of your NFT and click Repay Loan to pay back your loan</p>\r\n\r\n <InputNumber min={1} max={101} placeholder={\"NFT ID\"} onChange={onChange2} style={{width: 200, marginBottom: 10 }} /><br />\r\n <Button type=\"primary\" shape=\"round\" onClick={() =>{repayFLOOR()}}>REPAY LOAN</Button>\r\n<br />\r\n<List dataSource={repayLoanEvent}   \r\n                renderItem={item => {\r\n                  return (\r\n <List.Item key={item[0] }>\r\n  <span style={{ fontSize: 16, marginRight: 8 }}><b>Loan for NFTID #{item.args[0].toNumber()} has been repaid</b></span>\r\n  <span style={{ fontSize: 16, marginRight: 8 }}>Repayment amount { ethers.utils.formatEther( item.args[2] ) } ETH</span><br />\r\n   Address {item.args[1]}  \r\n                    </List.Item>\r\n                  );\r\n                }}\r\n              />\r\n\r\n     </div>\r\n\r\n        </Route>\r\n        <Route path=\"/home\">\r\n        <Home />\r\n        </Route>\r\n      </Switch>\r\n\r\n      <ThemeSwitch />\r\n\r\n      {/* 🗺 Extra UI like gas price, eth price, faucet, and support: */}\r\n      <div style={{ position: \"fixed\", textAlign: \"left\", left: 0, bottom: 20, padding: 10 }}>\r\n        <Row align=\"middle\" gutter={[4, 4]}>\r\n          <Col span={8}>\r\n            <Ramp price={price} address={address} networks={NETWORKS} />\r\n          </Col>\r\n\r\n          <Col span={8} style={{ textAlign: \"center\", opacity: 0.8 }}>\r\n            <GasGauge gasPrice={gasPrice} />\r\n          </Col>\r\n          <Col span={8} style={{ textAlign: \"center\", opacity: 1 }}>\r\n            <Button\r\n              onClick={() => {\r\n                window.open(\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\");\r\n              }}\r\n              size=\"large\"\r\n              shape=\"round\"\r\n            >\r\n              <span style={{ marginRight: 8 }} role=\"img\" aria-label=\"support\">\r\n                💬\r\n              </span>\r\n              Support\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row align=\"middle\" gutter={[4, 4]}>\r\n          <Col span={24}>\r\n            {\r\n              /*  if the local provider has a signer, let's show the faucet:  */\r\n              faucetAvailable ? (\r\n                <Faucet localProvider={localProvider} price={price} ensProvider={mainnetProvider} />\r\n              ) : (\r\n                \"\"\r\n              )\r\n            }\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import axios from \"axios\";\r\nimport { usePoller } from \"eth-hooks\";\r\nimport { useState } from \"react\";\r\nimport { ETHERSCAN_KEY } from \"../constants\";\r\n\r\nexport default function useGasPrice(targetNetwork, speed, pollTime = 39999) {\r\n  const [gasPrice, setGasPrice] = useState();\r\n  const loadGasPrice = async () => {\r\n    if (targetNetwork.hasOwnProperty(\"gasPrice\")) {\r\n      setGasPrice(targetNetwork.gasPrice);\r\n    } else {\r\n      axios\r\n        .get(\"https://api.etherscan.io/api?module=gastracker&action=gasoracle&apikey=\" + ETHERSCAN_KEY)\r\n        .then(response => {\r\n          console.log(\"response gas: \", response);\r\n          const newGasPrice = response.data.result[speed || \"FastGasPrice\"] * 1000000000;\r\n          if (newGasPrice !== gasPrice) {\r\n            setGasPrice(newGasPrice);\r\n          }\r\n        })\r\n        .catch(error => console.log(error));\r\n    }\r\n  };\r\n\r\n  usePoller(loadGasPrice, 39999);\r\n  return gasPrice;\r\n}\r\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nconst themes = {\r\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\r\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\r\n};\r\n\r\nconst prevTheme = window.localStorage.getItem(\"theme\");\r\n\r\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: subgraphUri,\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"light\"}>\r\n      <BrowserRouter>\r\n        <App subgraphUri={subgraphUri} />\r\n      </BrowserRouter>\r\n    </ThemeSwitcherProvider>\r\n  </ApolloProvider>,\r\n  document.getElementById(\"root\"),\r\n);\r\n","const ERC20ABI = [\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"name\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        name: \"_spender\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"approve\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"totalSupply\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        name: \"_from\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_to\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"transferFrom\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"decimals\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"uint8\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        name: \"_owner\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"balanceOf\",\r\n    outputs: [\r\n      {\r\n        name: \"balance\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"symbol\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        name: \"_to\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"transfer\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        name: \"_owner\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_spender\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"allowance\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    payable: true,\r\n    stateMutability: \"payable\",\r\n    type: \"fallback\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: \"owner\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: \"spender\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: \"value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Approval\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: \"from\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: \"to\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: \"value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Transfer\",\r\n    type: \"event\",\r\n  },\r\n];\r\nconst DAIABI = [\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"chainId_\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"constructor\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"src\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"guy\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Approval\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: true,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"bytes4\",\r\n        name: \"sig\",\r\n        type: \"bytes4\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"bytes32\",\r\n        name: \"arg1\",\r\n        type: \"bytes32\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"bytes32\",\r\n        name: \"arg2\",\r\n        type: \"bytes32\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: \"bytes\",\r\n        name: \"data\",\r\n        type: \"bytes\",\r\n      },\r\n    ],\r\n    name: \"LogNote\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"src\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"dst\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Transfer\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"DOMAIN_SEPARATOR\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bytes32\",\r\n        name: \"\",\r\n        type: \"bytes32\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"PERMIT_TYPEHASH\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bytes32\",\r\n        name: \"\",\r\n        type: \"bytes32\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"allowance\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"approve\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bool\",\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"balanceOf\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"burn\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"decimals\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint8\",\r\n        name: \"\",\r\n        type: \"uint8\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"guy\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"deny\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"mint\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"src\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"address\",\r\n        name: \"dst\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"move\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"name\",\r\n    outputs: [\r\n      {\r\n        internalType: \"string\",\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"nonces\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"holder\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"address\",\r\n        name: \"spender\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"nonce\",\r\n        type: \"uint256\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"expiry\",\r\n        type: \"uint256\",\r\n      },\r\n      {\r\n        internalType: \"bool\",\r\n        name: \"allowed\",\r\n        type: \"bool\",\r\n      },\r\n      {\r\n        internalType: \"uint8\",\r\n        name: \"v\",\r\n        type: \"uint8\",\r\n      },\r\n      {\r\n        internalType: \"bytes32\",\r\n        name: \"r\",\r\n        type: \"bytes32\",\r\n      },\r\n      {\r\n        internalType: \"bytes32\",\r\n        name: \"s\",\r\n        type: \"bytes32\",\r\n      },\r\n    ],\r\n    name: \"permit\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"pull\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"push\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"guy\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"rely\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"symbol\",\r\n    outputs: [\r\n      {\r\n        internalType: \"string\",\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"totalSupply\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"dst\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"transfer\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bool\",\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"src\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"address\",\r\n        name: \"dst\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"transferFrom\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bool\",\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"version\",\r\n    outputs: [\r\n      {\r\n        internalType: \"string\",\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"wards\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n];\r\n\r\n// Mainnet DAI, Optimism and Arbitrium Rollup Contracts with local addresses\r\nmodule.exports = {\r\n  1: {\r\n    contracts: {\r\n      DAI: {\r\n        address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\r\n        abi: DAIABI,\r\n      },\r\n      UNI: {\r\n        address: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\r\n        abi: ERC20ABI,\r\n      },\r\n    },\r\n  },\r\n};\r\n"],"sourceRoot":""}