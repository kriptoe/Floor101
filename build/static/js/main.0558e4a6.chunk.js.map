{"version":3,"sources":["constants.js","components/Address.jsx","components/Balance.jsx","helpers/Transactor.js","components/Blockie.jsx","components/AddressInput.jsx","components/EtherInput.jsx","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/utils.js","components/Contract/FunctionForm.jsx","components/Faucet.jsx","components/Header.jsx","helpers/loadAppContracts.js","components/Swap.jsx","components/ThemeSwitch.jsx","components/Timeline.jsx","components/L2Bridge.jsx","views/Hints.jsx","views/Subgraph.jsx","images/top.jpg","App.jsx","index.jsx","contracts/external_contracts.js"],"names":["INFURA_ID","BLOCKNATIVE_DAPPID","ALCHEMY_KEY","NETWORKS","localhost","name","color","chainId","blockExplorer","rpcUrl","global","window","location","hostname","mainnet","goerli","faucet","sepolia","matic","price","gasPrice","mumbai","arbitrum","optimism","localAvalanche","fujiAvalanche","mainnetAvalanche","testnetHarmony","mainnetHarmony","NETWORK","n","Text","Typography","Address","props","address","value","ens","useLookupAddress","ensProvider","currentTheme","useThemeSwitcher","avatar","paragraph","rows","displayAddress","substr","ensSplit","split","length","size","text","etherscanLink","blockExplorerLink","minimized","style","verticalAlign","target","href","rel","seed","toLowerCase","scale","onChange","editable","copyable","fontSize","paddingLeft","utils","require","Balance","useState","dollarMode","setDollarMode","balance","useBalance","provider","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","dollarMultiplier","padding","cursor","onClick","ethers","callbacks","Transactor","providerOrSigner","etherscan","tx","callback","a","Signer","isSigner","signer","getNetwork","network","_isProvider","getSigner","console","log","notify","options","dappId","system","networkId","transactionHandler","txInformation","possibleFunction","transaction","hash","Notify","etherscanNetwork","etherscanTxUrl","Promise","result","parseUnits","gasLimit","hexlify","sendTransaction","indexOf","emitter","on","onclick","open","notification","info","message","description","placement","txResult","listeningInterval","setInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","clearInterval","wait","data","error","JSON","parse","stringify","body","obj","errorObj","e","Blockie","AddressInput","setValue","scan","setScan","currentValue","scannerButton","marginTop","count","CameraOutlined","QrcodeOutlined","updateAddress","useCallback","newValue","resolveName","possibleAddress","scanner","zIndex","position","left","top","width","delay","resolution","onError","onScan","possibleNewValue","lastIndexOf","id","autoComplete","autoFocus","placeholder","prefix","addonAfter","EtherInput","mode","setMode","display","setDisplay","option","title","usdValue","useEffect","ethValue","Paragraph","Wallet","signerAddress","setSignerAddress","getAddress","newAddress","receiveButton","privateKeyButton","selectedAddress","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","providerSend","WalletOutlined","rotate","level","includeMargin","renderAs","imageSettings","excavate","KeyOutlined","localStorage","getItem","wallet","extraPkDisplayAdded","extraPkDisplay","key","push","backgroundStyle","pastpk","pastwallet","currentPrivateKey","setItem","Date","now","privateKey","createRandom","_signingKey","reload","inputStyle","visible","float","paddingRight","onOk","onCancel","footer","type","disabled","loading","parseEther","to","SendOutlined","Account","userSigner","localProvider","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","modalButtons","cachedProvider","marginLeft","shape","constants","BigNumber","Header","subTitle","Select","Option","Swap","ThemeSwitcher","theme","isDarkMode","setIsDarkMode","switcher","themes","status","className","right","bottom","checked","isChecked","dark","light","Subgraph","settings","apiKey","Network","ARB_MAINNET","alchemy","Alchemy","targetNetwork","DEBUG","scaffoldEthProvider","navigator","onLine","providers","StaticJsonRpcProvider","poktMainnetProvider","mainnetInfura","localProviderUrl","localProviderUrlFromEnv","process","REACT_APP_PROVIDER","walletLinkProvider","WalletLink","appName","makeWeb3Provider","Web3Modal","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","bridge","infuraId","rpc","portis","logo","Portis","fortmatic","Fortmatic","connector","_options","enable","authereum","Authereum","App","_network","injectedProvider","setInjectedProvider","setAddress","clearCachedProvider","disconnect","setTimeout","useExchangeEthPrice","useGasPrice","useUserProviderAndSigner","localChainId","selectedChainId","yourLocalBalance","contractConfig","deployedContracts","externalContracts","readContracts","useContractLoader","writeContracts","mainnetContracts","lendAddy","FloorLendingV2","repayLoanEvent","useEventListener","ethBalance","networkDisplay","networkSelected","networkLocal","closable","ethereum","toString","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","request","method","params","switchTx","connect","Web3Provider","code","reason","route","setRoute","pathname","getLoans","str","getMappingLength","balance2","i","getLoanID","tokenURI","getDueDate","due","concat","getDate","setDisplayLoans","handleClick","event","marketContract","Contract","berryAbi","marketWithSigner","approve","alert","dt","toLocaleString","useContractReader","yourCollectibles2","setYourCollectibles2","collectionNumber","setCollectionNumber","loanInfoString","setMaxLoanString","loanDays","setNFTDays","loanAmount","setLoanAmount","displayLoans","updateYourCollectibles2","counter","nft","getNftsForOwner","nfts","totalCount","nftList","collectibleUpdate","contract","tokenId","rawMetadata","image","addr","owner","show","setShow","NFTid","setNFTid","changeLoan","changeDuration","handleChange","lend","repayFLOOR","calculateBorrowFee","repayAmount","repayLoan","textAlign","selectedKeys","Item","exact","path","defaultValue","label","dataSource","renderItem","item","src","class","min","max","step","margin","backgroundColor","border","marginBottom","marginRight","args","toNumber","prevTheme","subgraphUri","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","themeMap","defaultTheme","document","getElementById","module","exports","contracts","DAI","abi","inputs","internalType","payable","stateMutability","anonymous","indexed","constant","outputs","UNI"],"mappings":"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","file":"static/js/main.0558e4a6.chunk.js","sourcesContent":["// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\r\nexport const INFURA_ID = \"460f40a260564ac4a4f4b3fffb032dad\";\r\n\r\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\r\nexport const ETHERSCAN_KEY = \"HHTM8VBV6PN8KWGX8CK8ASD1UDGZ9ESEPM\";\r\n\r\n// BLOCKNATIVE ID FOR Notify.js:\r\nexport const BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\r\n\r\nexport const ALCHEMY_KEY = \"oKxs-03sij-U_N0iOlrSsZFr29-IqbuF\";\r\n\r\nexport const NETWORKS = {\r\n  localhost: {\r\n    name: \"localhost\",\r\n    color: \"#666666\",\r\n    chainId: 31337,\r\n    blockExplorer: \"\",\r\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\",\r\n  },\r\n  mainnet: {\r\n    name: \"mainnet\",\r\n    color: \"#ff8b9e\",\r\n    chainId: 1,\r\n    rpcUrl: `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`,\r\n    blockExplorer: \"https://etherscan.io/\",\r\n  },\r\n  goerli: {\r\n    name: \"goerli\",\r\n    color: \"#0975F6\",\r\n    chainId: 5,\r\n    faucet: \"https://goerli-faucet.slock.it/\",\r\n    blockExplorer: \"https://goerli.etherscan.io/\",\r\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\r\n  },\r\n  sepolia: {\r\n    name: \"sepolia\",\r\n    color: \"#87ff65\",\r\n    chainId: 11155111,\r\n    faucet: \"https://faucet.sepolia.dev/\",\r\n    blockExplorer: \"https://sepolia.etherscan.io/\",\r\n    rpcUrl: `https://sepolia.infura.io/v3/${INFURA_ID}`,\r\n  },\r\n  matic: {\r\n    name: \"matic\",\r\n    color: \"#2bbdf7\",\r\n    chainId: 137,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://rpc-mainnet.maticvigil.com\",\r\n    faucet: \"https://faucet.matic.network/\",\r\n    blockExplorer: \"https://explorer-mainnet.maticvigil.com//\",\r\n  },\r\n  mumbai: {\r\n    name: \"mumbai\",\r\n    color: \"#92D9FA\",\r\n    chainId: 80001,\r\n    price: 1,\r\n    gasPrice: 1000000000,\r\n    rpcUrl: \"https://polygon-mumbai.g.alchemy.com/v2/2n4I32t7z-cG3HNMWr09sfAZOuFBih_K\",\r\n    faucet: \"https://faucet.matic.network/\",\r\n    blockExplorer: \"https://mumbai-explorer.matic.today/\",\r\n  },\r\n  arbitrum: {\r\n    name: \"Arbitrum\",\r\n    color: \"#50a0ea\",\r\n    chainId: 42161,\r\n    blockExplorer: \"https://explorer.arbitrum.io/#/\",\r\n    rpcUrl: `https://arbitrum-mainnet.infura.io/v3/3b3dc90e48814565a1a266bfcee36234`,\r\n    gasPrice: 0,\r\n  },\r\n  optimism: {\r\n    name: \"optimism\",\r\n    color: \"#f01a37\",\r\n    chainId: 10,\r\n    blockExplorer: \"https://optimistic.etherscan.io/\",\r\n    rpcUrl: `https://mainnet.optimism.io`,\r\n  },\r\n  localAvalanche: {\r\n    name: \"localAvalanche\",\r\n    color: \"#666666\",\r\n    chainId: 43112,\r\n    blockExplorer: \"\",\r\n    rpcUrl: `http://localhost:9650/ext/bc/C/rpc`,\r\n    gasPrice: 225000000000,\r\n  },\r\n  fujiAvalanche: {\r\n    name: \"fujiAvalanche\",\r\n    color: \"#666666\",\r\n    chainId: 43113,\r\n    blockExplorer: \"https://cchain.explorer.avax-test.network/\",\r\n    rpcUrl: `https://api.avax-test.network/ext/bc/C/rpc`,\r\n    gasPrice: 225000000000,\r\n  },\r\n  mainnetAvalanche: {\r\n    name: \"mainnetAvalanche\",\r\n    color: \"#666666\",\r\n    chainId: 43114,\r\n    blockExplorer: \"https://cchain.explorer.avax.network/\",\r\n    rpcUrl: `https://api.avax.network/ext/bc/C/rpc`,\r\n    gasPrice: 225000000000,\r\n  },\r\n  testnetHarmony: {\r\n    name: \"Harmony Testnet\",\r\n    color: \"#00b0ef\",\r\n    chainId: 1666700000,\r\n    blockExplorer: \"https://explorer.pops.one/\",\r\n    rpcUrl: `https://api.s0.b.hmny.io`,\r\n    gasPrice: 1000000000,\r\n  },\r\n  mainnetHarmony: {\r\n    name: \"Harmony Mainnet\",\r\n    color: \"#00b0ef\",\r\n    chainId: 1666600000,\r\n    blockExplorer: \"https://explorer.harmony.one/\",\r\n    rpcUrl: `https://api.harmony.one`,\r\n    gasPrice: 1000000000,\r\n  },\r\n};\r\n\r\nexport const NETWORK = chainId => {\r\n  for (const n in NETWORKS) {\r\n    if (NETWORKS[n].chainId === chainId) {\r\n      return NETWORKS[n];\r\n    }\r\n  }\r\n};\r\n","import { Skeleton, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\r\n\r\n// changed value={address} to address={address}\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays an address with a blockie image and option to copy address\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Address\r\n    address={address}\r\n    ensProvider={mainnetProvider}\r\n    blockExplorer={blockExplorer}\r\n    fontSize={fontSize}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\")\r\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\r\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\r\n  - Provide fontSize={fontSize} to change the size of address text\r\n*/\r\n\r\nconst { Text } = Typography;\r\n\r\nconst blockExplorerLink = (address, blockExplorer) =>\r\n  `${blockExplorer || \"https://etherscan.io/\"}${\"address/\"}${address}`;\r\n\r\nexport default function Address(props) {\r\n  const address = props.value || props.address;\r\n\r\n  const ens = useLookupAddress(props.ensProvider, address);\r\n\r\n  const { currentTheme } = useThemeSwitcher();\r\n\r\n  if (!address) {\r\n    return (\r\n      <span>\r\n        <Skeleton avatar paragraph={{ rows: 1 }} />\r\n      </span>\r\n    );\r\n  }\r\n\r\n  let displayAddress = address.substr(0, 6);\r\n\r\n  const ensSplit = ens && ens.split(\".\");\r\n  const validEnsCheck = ensSplit && ensSplit[ensSplit.length - 1] === \"eth\";\r\n\r\n  if (validEnsCheck) {\r\n    displayAddress = ens;\r\n  } else if (props.size === \"short\") {\r\n    displayAddress += \"...\" + address.substr(-4);\r\n  } else if (props.size === \"long\") {\r\n    displayAddress = address;\r\n  }\r\n\r\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\r\n  if (props.minimized) {\r\n    return (\r\n      <span style={{ verticalAlign: \"middle\" }}>\r\n        <a\r\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n          target=\"_blank\"\r\n          href={etherscanLink}\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\r\n        </a>\r\n      </span>\r\n    );\r\n  }\r\n\r\n  let text;\r\n  if (props.onChange) {\r\n    text = (\r\n      <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\r\n        <a\r\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n          target=\"_blank\"\r\n          href={etherscanLink}\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          {displayAddress}\r\n        </a>\r\n      </Text>\r\n    );\r\n  } else {\r\n    text = (\r\n      <Text copyable={{ text: address }}>\r\n        <a\r\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\r\n          target=\"_blank\"\r\n          href={etherscanLink}\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          {displayAddress}\r\n        </a>\r\n      </Text>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      <span style={{ verticalAlign: \"middle\" }}>\r\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\r\n      </span>\r\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\r\n        {text}\r\n      </span>\r\n    </span>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useBalance } from \"eth-hooks\";\r\n\r\nconst { utils } = require(\"ethers\");\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays a balance of given address in ether & dollar\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Balance\r\n    address={address}\r\n    provider={mainnetProvider}\r\n    price={price}\r\n  />\r\n\r\n  ~ If you already have the balance as a bignumber ~\r\n  <Balance\r\n    balance={balance}\r\n    price={price}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address={address} and get balance corresponding to given address\r\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\r\n  - Provide price={price} of ether and get your balance converted to dollars\r\n*/\r\n\r\nexport default function Balance(props) {\r\n  const [dollarMode, setDollarMode] = useState(true);\r\n\r\n  // const [listening, setListening] = useState(false);\r\n\r\n  const balance = useBalance(props.provider, props.address);\r\n\r\n  let floatBalance = parseFloat(\"0.00\");\r\n\r\n  let usingBalance = balance;\r\n\r\n  if (typeof props.balance !== \"undefined\") {\r\n    usingBalance = props.balance;\r\n  }\r\n  if (typeof props.value !== \"undefined\") {\r\n    usingBalance = props.value;\r\n  }\r\n\r\n  if (usingBalance) {\r\n    const etherBalance = utils.formatEther(usingBalance);\r\n    parseFloat(etherBalance).toFixed(2);\r\n    floatBalance = parseFloat(etherBalance);\r\n  }\r\n\r\n  let displayBalance = floatBalance.toFixed(4);\r\n\r\n  const price = props.price || props.dollarMultiplier || 1;\r\n\r\n  if (dollarMode) {\r\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\r\n  }\r\n\r\n  return (\r\n    <span\r\n      style={{\r\n        verticalAlign: \"middle\",\r\n        fontSize: props.size ? props.size : 24,\r\n        padding: 8,\r\n        cursor: \"pointer\",\r\n      }}\r\n      onClick={() => {\r\n        setDollarMode(!dollarMode);\r\n      }}\r\n    >\r\n      {displayBalance}\r\n    </span>\r\n  );\r\n}\r\n","import { notification } from \"antd\";\r\nimport Notify from \"bnc-notify\";\r\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\r\n\r\nconst { ethers } = require(\"ethers\");\r\n\r\n// this should probably just be renamed to \"notifier\"\r\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\r\n// https://docs.blocknative.com/notify\r\nconst callbacks = {};\r\n\r\nconst DEBUG = true;\r\n\r\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\r\n  if (typeof providerOrSigner !== \"undefined\") {\r\n    // eslint-disable-next-line consistent-return\r\n    return async (tx, callback) => {\r\n      let signer;\r\n      let network;\r\n      let provider;\r\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\r\n        provider = providerOrSigner.provider;\r\n        signer = providerOrSigner;\r\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\r\n      } else if (providerOrSigner._isProvider) {\r\n        provider = providerOrSigner;\r\n        signer = providerOrSigner.getSigner();\r\n        network = await providerOrSigner.getNetwork();\r\n      }\r\n\r\n      console.log(\"network\", network);\r\n      var options = null;\r\n      var notify = null;\r\n      options = {\r\n        dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\r\n        system: \"ethereum\",\r\n        networkId: network.chainId,\r\n        // darkMode: Boolean, // (default: false)\r\n        transactionHandler: txInformation => {\r\n          if (DEBUG) console.log(\"HANDLE TX\", txInformation);\r\n          const possibleFunction = callbacks[txInformation.transaction.hash];\r\n          if (typeof possibleFunction === \"function\") {\r\n            possibleFunction(txInformation.transaction);\r\n          }\r\n        },\r\n      };\r\n\r\n      notify = Notify(options);\r\n\r\n      let etherscanNetwork = \"\";\r\n      if (network.name && network.chainId > 1) {\r\n        etherscanNetwork = network.name + \".\";\r\n      }\r\n\r\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\r\n      if (network.chainId === 100) {\r\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\r\n      }\r\n\r\n      try {\r\n        let result;\r\n        if (tx instanceof Promise) {\r\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\r\n          result = await tx;\r\n        } else {\r\n          if (!tx.gasPrice) {\r\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\r\n          }\r\n          if (!tx.gasLimit) {\r\n            tx.gasLimit = ethers.utils.hexlify(120000);\r\n          }\r\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\r\n          result = await signer.sendTransaction(tx);\r\n        }\r\n        if (DEBUG) console.log(\"RESULT:\", result);\r\n        // console.log(\"Notify\", notify);\r\n\r\n        if (callback) {\r\n          callbacks[result.hash] = callback;\r\n        }\r\n\r\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\r\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\r\n          const { emitter } = notify.hash(result.hash);\r\n          emitter.on(\"all\", transaction => {\r\n            return {\r\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\r\n            };\r\n          });\r\n        } else {\r\n          notification.info({\r\n            message: \"Local Transaction Sent\",\r\n            description: result.hash,\r\n            placement: \"bottomRight\",\r\n          });\r\n          // on most networks BlockNative will update a transaction handler,\r\n          // but locally we will set an interval to listen...\r\n          if (callback) {\r\n            const txResult = await tx;\r\n            const listeningInterval = setInterval(async () => {\r\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\r\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\r\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\r\n                callback({ ...txResult, ...currentTransactionReceipt });\r\n                clearInterval(listeningInterval);\r\n              }\r\n            }, 500);\r\n          }\r\n        }\r\n\r\n        if (typeof result.wait === \"function\") {\r\n          await result.wait();\r\n        }\r\n\r\n        return result;\r\n      } catch (e) {\r\n        if (DEBUG) console.log(e);\r\n        // Accounts for Metamask and default signer on all networks\r\n        let message =\r\n          e.data && e.data.message\r\n            ? e.data.message\r\n            : e.error && JSON.parse(JSON.stringify(e.error)).body\r\n            ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message\r\n            : e.data\r\n            ? e.data\r\n            : JSON.stringify(e);\r\n        if (!e.error && e.message) {\r\n          message = e.message;\r\n        }\r\n\r\n        console.log(\"Attempt to clean up:\", message);\r\n        try {\r\n          let obj = JSON.parse(message);\r\n          if (obj && obj.body) {\r\n            let errorObj = JSON.parse(obj.body);\r\n            if (errorObj && errorObj.error && errorObj.error.message) {\r\n              message = errorObj.error.message;\r\n            }\r\n          }\r\n        } catch (e) {\r\n          //ignore\r\n        }\r\n\r\n        notification.error({\r\n          message: \"Transaction Error\",\r\n          description: message,\r\n        });\r\n        if (callback && typeof callback === \"function\") {\r\n          callback(e);\r\n        }\r\n      }\r\n    };\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\n\r\n// provides a blockie image for the address using \"react-blockies\" library\r\n\r\nexport default function Blockie(props) {\r\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\r\n    return <span />;\r\n  }\r\n  // eslint-disable-next-line react/jsx-props-no-spreading\r\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\r\n}\r\n","import { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\r\nimport { Badge, Input } from \"antd\";\r\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\r\nimport React, { useCallback, useState } from \"react\";\r\nimport QrReader from \"react-qr-reader\";\r\nimport Blockie from \"./Blockie\";\r\n\r\n// probably we need to change value={toAddress} to address={toAddress}\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays an address input with QR scan option\r\n\r\n  ~ How can I use? ~\r\n\r\n  <AddressInput\r\n    autoFocus\r\n    ensProvider={mainnetProvider}\r\n    placeholder=\"Enter address\"\r\n    value={toAddress}\r\n    onChange={setToAddress}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n  - Provide placeholder=\"Enter address\" value for the input\r\n  - Value of the address input is stored in value={toAddress}\r\n  - Control input change by onChange={setToAddress}\r\n                          or onChange={address => { setToAddress(address);}}\r\n*/\r\n\r\nexport default function AddressInput(props) {\r\n  const [value, setValue] = useState(props.value);\r\n  const [scan, setScan] = useState(false);\r\n\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n  const ens = useLookupAddress(props.ensProvider, currentValue);\r\n\r\n  const scannerButton = (\r\n    <div\r\n      style={{ marginTop: 4, cursor: \"pointer\" }}\r\n      onClick={() => {\r\n        setScan(!scan);\r\n      }}\r\n    >\r\n      <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\r\n        <QrcodeOutlined style={{ fontSize: 18 }} />\r\n      </Badge>{\" \"}\r\n      Scan\r\n    </div>\r\n  );\r\n\r\n  const { ensProvider, onChange } = props;\r\n  const updateAddress = useCallback(\r\n    async newValue => {\r\n      if (typeof newValue !== \"undefined\") {\r\n        let address = newValue;\r\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\r\n          try {\r\n            const possibleAddress = await ensProvider.resolveName(address);\r\n            if (possibleAddress) {\r\n              address = possibleAddress;\r\n            }\r\n            // eslint-disable-next-line no-empty\r\n          } catch (e) {}\r\n        }\r\n        setValue(address);\r\n        if (typeof onChange === \"function\") {\r\n          onChange(address);\r\n        }\r\n      }\r\n    },\r\n    [ensProvider, onChange],\r\n  );\r\n\r\n  const scanner = scan ? (\r\n    <div\r\n      style={{\r\n        zIndex: 256,\r\n        position: \"absolute\",\r\n        left: 0,\r\n        top: 0,\r\n        width: \"100%\",\r\n      }}\r\n      onClick={() => {\r\n        setScan(false);\r\n      }}\r\n    >\r\n      <QrReader\r\n        delay={250}\r\n        resolution={1200}\r\n        onError={e => {\r\n          console.log(\"SCAN ERROR\", e);\r\n          setScan(false);\r\n        }}\r\n        onScan={newValue => {\r\n          if (newValue) {\r\n            console.log(\"SCAN VALUE\", newValue);\r\n            let possibleNewValue = newValue;\r\n            if (possibleNewValue.indexOf(\"/\") >= 0) {\r\n              possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\r\n              console.log(\"CLEANED VALUE\", possibleNewValue);\r\n            }\r\n            setScan(false);\r\n            updateAddress(possibleNewValue);\r\n          }\r\n        }}\r\n        style={{ width: \"100%\" }}\r\n      />\r\n    </div>\r\n  ) : (\r\n    \"\"\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {scanner}\r\n      <Input\r\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\r\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\r\n        autoComplete=\"off\"\r\n        autoFocus={props.autoFocus}\r\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\r\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\r\n        value={ens || currentValue}\r\n        addonAfter={scannerButton}\r\n        onChange={e => {\r\n          updateAddress(e.target.value);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import { Input } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n// small change in useEffect, display currentValue if it's provided by user\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\r\n\r\n  ~ How can I use? ~\r\n\r\n  <EtherInput\r\n    autofocus\r\n    price={price}\r\n    value=100\r\n    placeholder=\"Enter amount\"\r\n    onChange={value => {\r\n      setAmount(value);\r\n    }}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide price={price} of ether and easily convert between USD and ETH\r\n  - Provide value={value} to specify initial amount of ether\r\n  - Provide placeholder=\"Enter amount\" value for the input\r\n  - Control input change by onChange={value => { setAmount(value);}}\r\n*/\r\n\r\nexport default function EtherInput(props) {\r\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\r\n  const [display, setDisplay] = useState();\r\n  const [value, setValue] = useState();\r\n\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n\r\n  const option = title => {\r\n    if (!props.price) return \"\";\r\n    return (\r\n      <div\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={() => {\r\n          if (mode === \"USD\") {\r\n            setMode(\"ETH\");\r\n            setDisplay(currentValue);\r\n          } else {\r\n            setMode(\"USD\");\r\n            if (currentValue) {\r\n              const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\r\n              setDisplay(usdValue);\r\n            } else {\r\n              setDisplay(currentValue);\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        {title}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  let prefix;\r\n  let addonAfter;\r\n  if (mode === \"USD\") {\r\n    prefix = \"$\";\r\n    addonAfter = option(\"USD 🔀\");\r\n  } else {\r\n    prefix = \"Ξ\";\r\n    addonAfter = option(\"ETH 🔀\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!currentValue) {\r\n      setDisplay(\"\");\r\n    }\r\n  }, [currentValue]);\r\n\r\n  return (\r\n    <Input\r\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\r\n      autoFocus={props.autoFocus}\r\n      prefix={prefix}\r\n      value={display}\r\n      addonAfter={addonAfter}\r\n      onChange={async e => {\r\n        const newValue = e.target.value;\r\n        if (mode === \"USD\") {\r\n          const possibleNewValue = parseFloat(newValue);\r\n          if (possibleNewValue) {\r\n            const ethValue = possibleNewValue / props.price;\r\n            setValue(ethValue);\r\n            if (typeof props.onChange === \"function\") {\r\n              props.onChange(ethValue);\r\n            }\r\n            setDisplay(newValue);\r\n          } else {\r\n            setDisplay(newValue);\r\n          }\r\n        } else {\r\n          setValue(newValue);\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(newValue);\r\n          }\r\n          setDisplay(newValue);\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\r\nimport { Button, Modal, Spin, Tooltip, Typography } from \"antd\";\r\nimport { ethers } from \"ethers\";\r\nimport QR from \"qrcode.react\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Transactor } from \"../helpers\";\r\nimport Address from \"./Address\";\r\nimport AddressInput from \"./AddressInput\";\r\nimport Balance from \"./Balance\";\r\nimport EtherInput from \"./EtherInput\";\r\n\r\nconst { Text, Paragraph } = Typography;\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays a wallet where you can specify address and send USD/ETH, with options to\r\n  scan address, to convert between USD and ETH, to see and generate private keys,\r\n  to send, receive and extract the burner wallet\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Wallet\r\n    provider={userProvider}\r\n    address={address}\r\n    ensProvider={mainnetProvider}\r\n    price={price}\r\n    color='red'\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide provider={userProvider} to display a wallet\r\n  - Provide address={address} if you want to specify address, otherwise\r\n                                                    your default address will be used\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n  - Provide price={price} of ether and easily convert between USD and ETH\r\n  - Provide color to specify the color of wallet icon\r\n*/\r\n\r\nexport default function Wallet(props) {\r\n  const [signerAddress, setSignerAddress] = useState();\r\n  useEffect(() => {\r\n    async function getAddress() {\r\n      if (props.signer) {\r\n        const newAddress = await props.signer.getAddress();\r\n        setSignerAddress(newAddress);\r\n      }\r\n    }\r\n    getAddress();\r\n  }, [props.signer]);\r\n\r\n  const selectedAddress = props.address || signerAddress;\r\n\r\n  const [open, setOpen] = useState();\r\n  const [qr, setQr] = useState();\r\n  const [amount, setAmount] = useState();\r\n  const [toAddress, setToAddress] = useState();\r\n  const [pk, setPK] = useState();\r\n\r\n  const providerSend = props.provider ? (\r\n    <Tooltip title=\"Wallet\">\r\n      <WalletOutlined\r\n        onClick={() => {\r\n          setOpen(!open);\r\n        }}\r\n        rotate={-90}\r\n        style={{\r\n          padding: 7,\r\n          color: props.color ? props.color : \"\",\r\n          cursor: \"pointer\",\r\n          fontSize: 28,\r\n          verticalAlign: \"middle\",\r\n        }}\r\n      />\r\n    </Tooltip>\r\n  ) : (\r\n    \"\"\r\n  );\r\n\r\n  let display;\r\n  let receiveButton;\r\n  let privateKeyButton;\r\n  if (qr) {\r\n    display = (\r\n      <div>\r\n        <div>\r\n          <Text copyable>{selectedAddress}</Text>\r\n        </div>\r\n        <QR\r\n          value={selectedAddress}\r\n          size=\"450\"\r\n          level=\"H\"\r\n          includeMargin\r\n          renderAs=\"svg\"\r\n          imageSettings={{ excavate: false }}\r\n        />\r\n      </div>\r\n    );\r\n    receiveButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Hide\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(selectedAddress);\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Private Key\r\n      </Button>\r\n    );\r\n  } else if (pk) {\r\n    const pk = localStorage.getItem(\"metaPrivateKey\");\r\n    const wallet = new ethers.Wallet(pk);\r\n\r\n    if (wallet.address !== selectedAddress) {\r\n      display = (\r\n        <div>\r\n          <b>*injected account*, private key unknown</b>\r\n        </div>\r\n      );\r\n    } else {\r\n      const extraPkDisplayAdded = {};\r\n      const extraPkDisplay = [];\r\n      extraPkDisplayAdded[wallet.address] = true;\r\n      extraPkDisplay.push(\r\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\r\n          <a href={\"/pk#\" + pk}>\r\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\r\n          </a>\r\n        </div>,\r\n      );\r\n      for (const key in localStorage) {\r\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\r\n          console.log(key);\r\n          const pastpk = localStorage.getItem(key);\r\n          const pastwallet = new ethers.Wallet(pastpk);\r\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\r\n            extraPkDisplayAdded[pastwallet.address] = true;\r\n            extraPkDisplay.push(\r\n              <div style={{ fontSize: 16 }}>\r\n                <a href={\"/pk#\" + pastpk}>\r\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\r\n                  {pastwallet.address.substr(0, 6)}\r\n                </a>\r\n              </div>,\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      display = (\r\n        <div>\r\n          <b>Private Key:</b>\r\n\r\n          <div>\r\n            <Text copyable>{pk}</Text>\r\n          </div>\r\n\r\n          <hr />\r\n\r\n          <i>\r\n            Point your camera phone at qr code to open in\r\n            <a target=\"_blank\" href={\"https://xdai.io/\" + pk} rel=\"noopener noreferrer\">\r\n              burner wallet\r\n            </a>\r\n            :\r\n          </i>\r\n          <QR\r\n            value={\"https://xdai.io/\" + pk}\r\n            size=\"450\"\r\n            level=\"H\"\r\n            includeMargin\r\n            renderAs=\"svg\"\r\n            imageSettings={{ excavate: false }}\r\n          />\r\n\r\n          <Paragraph style={{ fontSize: \"16\" }} copyable>\r\n            {\"https://xdai.io/\" + pk}\r\n          </Paragraph>\r\n\r\n          {extraPkDisplay ? (\r\n            <div>\r\n              <h3>Known Private Keys:</h3>\r\n              {extraPkDisplay}\r\n              <Button\r\n                onClick={() => {\r\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\r\n                  if (currentPrivateKey) {\r\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\r\n                  }\r\n                  const randomWallet = ethers.Wallet.createRandom();\r\n                  const privateKey = randomWallet._signingKey().privateKey;\r\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\r\n                  window.location.reload();\r\n                }}\r\n              >\r\n                Generate\r\n              </Button>\r\n            </div>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    receiveButton = (\r\n      <Button\r\n        key=\"receive\"\r\n        onClick={() => {\r\n          setQr(selectedAddress);\r\n          setPK(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Receive\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(\"\");\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Hide\r\n      </Button>\r\n    );\r\n  } else {\r\n    const inputStyle = {\r\n      padding: 10,\r\n    };\r\n\r\n    display = (\r\n      <div>\r\n        <div style={inputStyle}>\r\n          <AddressInput\r\n            autoFocus\r\n            ensProvider={props.ensProvider}\r\n            placeholder=\"to address\"\r\n            address={toAddress}\r\n            onChange={setToAddress}\r\n          />\r\n        </div>\r\n        <div style={inputStyle}>\r\n          <EtherInput\r\n            price={props.price}\r\n            value={amount}\r\n            onChange={value => {\r\n              setAmount(value);\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n    receiveButton = (\r\n      <Button\r\n        key=\"receive\"\r\n        onClick={() => {\r\n          setQr(selectedAddress);\r\n          setPK(\"\");\r\n        }}\r\n      >\r\n        <QrcodeOutlined /> Receive\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={() => {\r\n          setPK(selectedAddress);\r\n          setQr(\"\");\r\n        }}\r\n      >\r\n        <KeyOutlined /> Private Key\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <span>\r\n      {providerSend}\r\n      <Modal\r\n        visible={open}\r\n        title={\r\n          <div>\r\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\r\n            <div style={{ float: \"right\", paddingRight: 25 }}>\r\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\r\n            </div>\r\n          </div>\r\n        }\r\n        onOk={() => {\r\n          setQr();\r\n          setPK();\r\n          setOpen(!open);\r\n        }}\r\n        onCancel={() => {\r\n          setQr();\r\n          setPK();\r\n          setOpen(!open);\r\n        }}\r\n        footer={[\r\n          privateKeyButton,\r\n          receiveButton,\r\n          <Button\r\n            key=\"submit\"\r\n            type=\"primary\"\r\n            disabled={!amount || !toAddress || qr}\r\n            loading={false}\r\n            onClick={() => {\r\n              const tx = Transactor(props.signer || props.provider);\r\n\r\n              let value;\r\n              try {\r\n                value = ethers.utils.parseEther(\"\" + amount);\r\n              } catch (e) {\r\n                // failed to parseEther, try something else\r\n                value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\r\n              }\r\n\r\n              tx({\r\n                to: toAddress,\r\n                value,\r\n              });\r\n              setOpen(!open);\r\n              setQr();\r\n            }}\r\n          >\r\n            <SendOutlined /> Send\r\n          </Button>,\r\n        ]}\r\n      >\r\n        {display}\r\n      </Modal>\r\n    </span>\r\n  );\r\n}\r\n","import { Button } from \"antd\";\r\nimport React from \"react\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\nimport Address from \"./Address\";\r\nimport Balance from \"./Balance\";\r\nimport Wallet from \"./Wallet\";\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays an Address, Balance, and Wallet as one Account component,\r\n  also allows users to log in to existing accounts and log out\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Account\r\n    address={address}\r\n    localProvider={localProvider}\r\n    userProvider={userProvider}\r\n    mainnetProvider={mainnetProvider}\r\n    price={price}\r\n    web3Modal={web3Modal}\r\n    loadWeb3Modal={loadWeb3Modal}\r\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n    blockExplorer={blockExplorer}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address={address} and get balance corresponding to the given address\r\n  - Provide localProvider={localProvider} to access balance on local network\r\n  - Provide userProvider={userProvider} to display a wallet\r\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\")\r\n  - Provide price={price} of ether and get your balance converted to dollars\r\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n              to be able to log in/log out to/from existing accounts\r\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\r\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\r\n*/\r\n\r\nexport default function Account({\r\n  address,\r\n  userSigner,\r\n  localProvider,\r\n  mainnetProvider,\r\n  price,\r\n  minimized,\r\n  web3Modal,\r\n  loadWeb3Modal,\r\n  logoutOfWeb3Modal,\r\n  blockExplorer,\r\n}) {\r\n  const modalButtons = [];\r\n  if (web3Modal) {\r\n    if (web3Modal.cachedProvider) {\r\n      modalButtons.push(\r\n        <Button\r\n          key=\"logoutbutton\"\r\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\r\n          shape=\"round\"\r\n          size=\"large\"\r\n          onClick={logoutOfWeb3Modal}\r\n        >\r\n          logout\r\n        </Button>,\r\n      );\r\n    } else {\r\n      modalButtons.push(\r\n        <Button\r\n          key=\"loginbutton\"\r\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\r\n          shape=\"round\"\r\n          size=\"large\"\r\n          /* type={minimized ? \"default\" : \"primary\"}     too many people just defaulting to MM and having a bad time */\r\n          onClick={loadWeb3Modal}\r\n        >\r\n          connect\r\n        </Button>,\r\n      );\r\n    }\r\n  }\r\n\r\n  const { currentTheme } = useThemeSwitcher();\r\n\r\n  const display = minimized ? (\r\n    \"\"\r\n  ) : (\r\n    <span>\r\n      {address ? (\r\n        <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />\r\n      ) : (\r\n        \"Connecting...\"\r\n      )}\r\n      <Balance address={address} provider={localProvider} price={price} />\r\n      <Wallet\r\n        address={address}\r\n        provider={localProvider}\r\n        signer={userSigner}\r\n        ensProvider={mainnetProvider}\r\n        price={price}\r\n        color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\r\n      />\r\n    </span>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {display}\r\n      {modalButtons}\r\n    </div>\r\n  );\r\n}\r\n","import { Input } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst { utils, constants } = require(\"ethers\");\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays input field with options to convert between STRING and BYTES32\r\n\r\n  ~ How can I use? ~\r\n\r\n  <BytesStringInput\r\n    autofocus\r\n    value={\"scaffold-eth\"}\r\n    placeholder=\"Enter value...\"\r\n    onChange={value => {\r\n      setValue(value);\r\n    }}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide value={value} to specify initial string\r\n  - Provide placeholder=\"Enter value...\" value for the input\r\n  - Control input change by onChange={value => { setValue(value);}}\r\n\r\n*/\r\n\r\nexport default function BytesStringInput(props) {\r\n  const [mode, setMode] = useState(\"STRING\");\r\n  const [display, setDisplay] = useState();\r\n  const [value, setValue] = useState(constants.HashZero);\r\n\r\n  // current value is the value in bytes32\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n\r\n  const option = title => {\r\n    return (\r\n      <div\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={() => {\r\n          if (mode === \"STRING\") {\r\n            setMode(\"BYTES32\");\r\n            if (!utils.isHexString(currentValue)) {\r\n              /* in case user enters invalid bytes32 number,\r\n                   it considers it as string and converts to bytes32 */\r\n              const changedValue = utils.formatBytes32String(currentValue);\r\n              setDisplay(changedValue);\r\n            } else {\r\n              setDisplay(currentValue);\r\n            }\r\n          } else {\r\n            setMode(\"STRING\");\r\n            if (currentValue && utils.isHexString(currentValue)) {\r\n              setDisplay(utils.parseBytes32String(currentValue));\r\n            } else {\r\n              setDisplay(currentValue);\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        {title}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  let addonAfter;\r\n  if (mode === \"STRING\") {\r\n    addonAfter = option(\"STRING 🔀\");\r\n  } else {\r\n    addonAfter = option(\"BYTES32 🔀\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!currentValue) {\r\n      setDisplay(\"\");\r\n    }\r\n  }, [currentValue]);\r\n\r\n  return (\r\n    <Input\r\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\r\n      autoFocus={props.autoFocus}\r\n      value={display}\r\n      addonAfter={addonAfter}\r\n      onChange={async e => {\r\n        const newValue = e.target.value;\r\n        if (mode === \"STRING\") {\r\n          // const ethValue = parseFloat(newValue) / props.price;\r\n          // setValue(ethValue);\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(utils.formatBytes32String(newValue));\r\n          }\r\n          setValue(utils.formatBytes32String(newValue));\r\n          setDisplay(newValue);\r\n        } else {\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(newValue);\r\n          }\r\n          setValue(newValue);\r\n          setDisplay(newValue);\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Address } from \"..\";\r\n\r\nconst { utils } = require(\"ethers\");\r\n\r\nconst tryToDisplay = thing => {\r\n  if (thing && thing.toNumber) {\r\n    try {\r\n      return thing.toNumber();\r\n    } catch (e) {\r\n      return \"Ξ\" + utils.formatUnits(thing, \"ether\");\r\n    }\r\n  }\r\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\r\n    return <Address address={thing} fontSize={22} />;\r\n  }\r\n  return JSON.stringify(thing);\r\n};\r\n\r\nexport default tryToDisplay;\r\n","import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { Transactor } from \"../../helpers\";\r\nimport tryToDisplay from \"./utils\";\r\n\r\nconst { utils, BigNumber } = require(\"ethers\");\r\n\r\nconst getFunctionInputKey = (functionInfo, input, inputIndex) => {\r\n  const name = input?.name ? input.name : \"input_\" + inputIndex + \"_\";\r\n  return functionInfo.name + \"_\" + name + \"_\" + input.type;\r\n};\r\n\r\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\r\n  const [form, setForm] = useState({});\r\n  const [txValue, setTxValue] = useState();\r\n  const [returnValue, setReturnValue] = useState();\r\n\r\n  const tx = Transactor(provider, gasPrice);\r\n\r\n  const inputs = functionInfo.inputs.map((input, inputIndex) => {\r\n    const key = getFunctionInputKey(functionInfo, input, inputIndex);\r\n\r\n    let buttons = \"\";\r\n    if (input.type === \"bytes32\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"to bytes32\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              if (utils.isHexString(form[key])) {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.parseBytes32String(form[key]);\r\n                setForm(formUpdate);\r\n              } else {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.formatBytes32String(form[key]);\r\n                setForm(formUpdate);\r\n              }\r\n            }}\r\n          >\r\n            #️⃣\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"bytes\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"to hex\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              if (utils.isHexString(form[key])) {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.toUtf8String(form[key]);\r\n                setForm(formUpdate);\r\n              } else {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\r\n                setForm(formUpdate);\r\n              }\r\n            }}\r\n          >\r\n            #️⃣\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"uint256\") {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\r\n          <div\r\n            type=\"dashed\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={async () => {\r\n              const formUpdate = { ...form };\r\n              formUpdate[key] = utils.parseEther(form[key]);\r\n              setForm(formUpdate);\r\n            }}\r\n          >\r\n            ✴️\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === \"address\") {\r\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\r\n      if (possibleAddress && possibleAddress.length === 42) {\r\n        buttons = (\r\n          <Tooltip placement=\"right\" title=\"blockie\">\r\n            <Blockies seed={possibleAddress} scale={3} />\r\n          </Tooltip>\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div style={{ margin: 2 }} key={key}>\r\n        <Input\r\n          size=\"large\"\r\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\r\n          autoComplete=\"off\"\r\n          value={form[key]}\r\n          name={key}\r\n          onChange={event => {\r\n            const formUpdate = { ...form };\r\n            formUpdate[event.target.name] = event.target.value;\r\n            setForm(formUpdate);\r\n          }}\r\n          suffix={buttons}\r\n        />\r\n      </div>\r\n    );\r\n  });\r\n\r\n  const txValueInput = (\r\n    <div style={{ margin: 2 }} key=\"txValueInput\">\r\n      <Input\r\n        placeholder=\"transaction value\"\r\n        onChange={e => setTxValue(e.target.value)}\r\n        value={txValue}\r\n        addonAfter={\r\n          <div>\r\n            <Row>\r\n              <Col span={16}>\r\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\r\n                  <div\r\n                    type=\"dashed\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={async () => {\r\n                      const floatValue = parseFloat(txValue);\r\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\r\n                    }}\r\n                  >\r\n                    ✳️\r\n                  </div>\r\n                </Tooltip>\r\n              </Col>\r\n              <Col span={16}>\r\n                <Tooltip placement=\"right\" title=\"number to hex\">\r\n                  <div\r\n                    type=\"dashed\"\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={async () => {\r\n                      setTxValue(BigNumber.from(txValue).toHexString());\r\n                    }}\r\n                  >\r\n                    #️⃣\r\n                  </div>\r\n                </Tooltip>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n\r\n  if (functionInfo.payable) {\r\n    inputs.push(txValueInput);\r\n  }\r\n\r\n  const buttonIcon =\r\n    functionInfo.type === \"call\" ? (\r\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\r\n    ) : (\r\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\r\n    );\r\n  inputs.push(\r\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\r\n      <Input\r\n        onChange={e => setReturnValue(e.target.value)}\r\n        defaultValue=\"\"\r\n        bordered={false}\r\n        disabled\r\n        value={returnValue}\r\n        suffix={\r\n          <div\r\n            style={{ width: 50, height: 30, margin: 0 }}\r\n            type=\"default\"\r\n            onClick={async () => {\r\n              const args = functionInfo.inputs.map((input, inputIndex) => {\r\n                const key = getFunctionInputKey(functionInfo, input, inputIndex);\r\n                let value = form[key];\r\n                if (input.baseType === \"array\") {\r\n                  value = JSON.parse(value);\r\n                } else if (input.type === \"bool\") {\r\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\r\n                    value = 1;\r\n                  } else {\r\n                    value = 0;\r\n                  }\r\n                }\r\n                return value;\r\n              });\r\n\r\n              let result;\r\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\r\n                try {\r\n                  const returned = await contractFunction(...args);\r\n                  result = tryToDisplay(returned);\r\n                } catch (err) {\r\n                  console.error(err);\r\n                }\r\n              } else {\r\n                const overrides = {};\r\n                if (txValue) {\r\n                  overrides.value = txValue; // ethers.utils.parseEther()\r\n                }\r\n                if (gasPrice) {\r\n                  overrides.gasPrice = gasPrice;\r\n                }\r\n                // Uncomment this if you want to skip the gas estimation for each transaction\r\n                // overrides.gasLimit = hexlify(1200000);\r\n\r\n                // console.log(\"Running with extras\",extras)\r\n                const returned = await tx(contractFunction(...args, overrides));\r\n                result = tryToDisplay(returned);\r\n              }\r\n\r\n              console.log(\"SETTING RESULT:\", result);\r\n              setReturnValue(result);\r\n              triggerRefresh(true);\r\n            }}\r\n          >\r\n            {buttonIcon}\r\n          </div>\r\n        }\r\n      />\r\n    </div>,\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col\r\n          span={8}\r\n          style={{\r\n            textAlign: \"right\",\r\n            opacity: 0.333,\r\n            paddingRight: 6,\r\n            fontSize: 24,\r\n          }}\r\n        >\r\n          {functionInfo.name}\r\n        </Col>\r\n        <Col span={16}>{inputs}</Col>\r\n      </Row>\r\n      <Divider />\r\n    </div>\r\n  );\r\n}\r\n","import { SendOutlined } from \"@ant-design/icons\";\r\nimport { Button, Input, Tooltip } from \"antd\";\r\n// import { useLookupAddress } from \"eth-hooks/dapps/ens\";\r\nimport React, { useCallback, useState, useEffect } from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { Transactor } from \"../helpers\";\r\nimport Wallet from \"./Wallet\";\r\n\r\nconst { utils } = require(\"ethers\");\r\n\r\n// improved a bit by converting address to ens if it exists\r\n// added option to directly input ens name\r\n// added placeholder option\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays a local faucet to send ETH to given address, also wallet is provided\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Faucet\r\n    price={price}\r\n    localProvider={localProvider}\r\n    ensProvider={mainnetProvider}\r\n    placeholder={\"Send local faucet\"}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\r\n  - Provide localProvider={localProvider} to be able to send ETH to given address\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n              works both in input field & wallet\r\n  - Provide placeholder=\"Send local faucet\" value for the input\r\n*/\r\n\r\nexport default function Faucet(props) {\r\n  const [address, setAddress] = useState();\r\n  const [faucetAddress, setFaucetAddress] = useState();\r\n\r\n  const { price, placeholder, localProvider, ensProvider, onChange } = props;\r\n\r\n  useEffect(() => {\r\n    const getFaucetAddress = async () => {\r\n      if (localProvider) {\r\n        const _faucetAddress = await localProvider.listAccounts();\r\n        setFaucetAddress(_faucetAddress[0]);\r\n        //console.log(_faucetAddress);\r\n      }\r\n    };\r\n    getFaucetAddress();\r\n  }, [localProvider]);\r\n\r\n  let blockie;\r\n  if (address && typeof address.toLowerCase === \"function\") {\r\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\r\n  } else {\r\n    blockie = <div />;\r\n  }\r\n\r\n  // const ens = useLookupAddress(ensProvider, address);\r\n\r\n  const updateAddress = useCallback(\r\n    async newValue => {\r\n      if (typeof newValue !== \"undefined\" && utils.isAddress(newValue)) {\r\n        let newAddress = newValue;\r\n        // if (newAddress.indexOf(\".eth\") > 0 || newAddress.indexOf(\".xyz\") > 0) {\r\n        //   try {\r\n        //     const possibleAddress = await ensProvider.resolveName(newAddress);\r\n        //     if (possibleAddress) {\r\n        //       newAddress = possibleAddress;\r\n        //     }\r\n        //     // eslint-disable-next-line no-empty\r\n        //   } catch (e) { }\r\n        // }\r\n        setAddress(newAddress);\r\n      }\r\n    },\r\n    [ensProvider, onChange],\r\n  );\r\n\r\n  const tx = Transactor(localProvider);\r\n\r\n  return (\r\n    <span>\r\n      <Input\r\n        size=\"large\"\r\n        placeholder={placeholder ? placeholder : \"local faucet\"}\r\n        prefix={blockie}\r\n        value={address}\r\n        // value={ens || address}\r\n        onChange={e => {\r\n          // setAddress(e.target.value);\r\n          updateAddress(e.target.value);\r\n        }}\r\n        suffix={\r\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\r\n            <Button\r\n              onClick={() => {\r\n                tx({\r\n                  to: address,\r\n                  value: utils.parseEther(\"0.01\"),\r\n                });\r\n                //setAddress(\"\");\r\n              }}\r\n              shape=\"circle\"\r\n              icon={<SendOutlined />}\r\n            />\r\n            <Wallet\r\n              color=\"#888888\"\r\n              provider={localProvider}\r\n              ensProvider={ensProvider}\r\n              price={price}\r\n              address={faucetAddress}\r\n            />\r\n          </Tooltip>\r\n        }\r\n      />\r\n    </span>\r\n  );\r\n}\r\n","import { PageHeader } from \"antd\";\r\nimport React from \"react\";\r\n\r\n// displays a page header\r\n\r\nexport default function Header() {\r\n  return (\r\n      <PageHeader\r\n        title=\"FLOOR 101\"\r\n        subTitle=\"NFT Lending on Arbitrum\"\r\n        style={{ cursor: \"pointer\" }}\r\n      />\r\n  );\r\n}\r\n","const contractListPromise = import(\"../contracts/hardhat_contracts.json\");\r\n// @ts-ignore\r\nconst externalContractsPromise = import(\"../contracts/external_contracts\");\r\n\r\nexport const loadAppContracts = async () => {\r\n  const config = {};\r\n  config.deployedContracts = (await contractListPromise).default ?? {};\r\n  config.externalContracts = (await externalContractsPromise).default ?? {};\r\n  return config;\r\n};\r\n","import { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\r\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\r\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Descriptions,\r\n  Divider,\r\n  Drawer,\r\n  InputNumber,\r\n  Modal,\r\n  notification,\r\n  Row,\r\n  Select,\r\n  Space,\r\n  Tooltip,\r\n  Typography,\r\n} from \"antd\";\r\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\r\nimport { ethers } from \"ethers\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDebounce } from \"../hooks\";\r\n\r\nconst { Option } = Select;\r\nconst { Text } = Typography;\r\n\r\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\r\n\r\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\r\n\r\nconst erc20Abi = [\r\n  \"function balanceOf(address owner) view returns (uint256)\",\r\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\r\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\r\n];\r\n\r\nconst makeCall = async (callName, contract, args, metadata = {}) => {\r\n  if (contract[callName]) {\r\n    let result;\r\n    if (args) {\r\n      result = await contract[callName](...args, metadata);\r\n    } else {\r\n      result = await contract[callName]();\r\n    }\r\n    return result;\r\n  }\r\n  return undefined;\r\n  console.log(\"no call of that name!\");\r\n};\r\n\r\nconst defaultToken = \"ETH\";\r\nconst defaultTokenOut = \"DAI\";\r\nconst defaultSlippage = \"0.5\";\r\nconst defaultTimeLimit = 60 * 10;\r\n\r\nconst tokenListToObject = array =>\r\n  array.reduce((obj, item) => {\r\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\r\n    return obj;\r\n  }, {});\r\n\r\nfunction Swap({ selectedProvider, tokenListURI }) {\r\n  const [tokenIn, setTokenIn] = useState(defaultToken);\r\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\r\n  const [exact, setExact] = useState();\r\n  const [amountIn, setAmountIn] = useState();\r\n  const [amountInMax, setAmountInMax] = useState();\r\n  const [amountOut, setAmountOut] = useState();\r\n  const [amountOutMin, setAmountOutMin] = useState();\r\n  const [trades, setTrades] = useState();\r\n  const [routerAllowance, setRouterAllowance] = useState();\r\n  const [balanceIn, setBalanceIn] = useState();\r\n  const [balanceOut, setBalanceOut] = useState();\r\n  const [slippageTolerance, setSlippageTolerance] = useState(\r\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\r\n  );\r\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\r\n  const [swapping, setSwapping] = useState(false);\r\n  const [approving, setApproving] = useState(false);\r\n  const [settingsVisible, setSettingsVisible] = useState(false);\r\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\r\n\r\n  const [tokenList, setTokenList] = useState([]);\r\n\r\n  const [tokens, setTokens] = useState();\r\n\r\n  const [invertPrice, setInvertPrice] = useState(false);\r\n\r\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\r\n\r\n  const signer = selectedProvider.getSigner();\r\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\r\n\r\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\r\n\r\n  const debouncedAmountIn = useDebounce(amountIn, 500);\r\n  const debouncedAmountOut = useDebounce(amountOut, 500);\r\n\r\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\r\n\r\n  useEffect(() => {\r\n    const getTokenList = async () => {\r\n      console.log(_tokenListUri);\r\n      try {\r\n        const tokenListResponse = await fetch(_tokenListUri);\r\n        const tokenListJson = await tokenListResponse.json();\r\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\r\n          return t.chainId === activeChainId;\r\n        });\r\n        const ethToken = WETH[activeChainId];\r\n        ethToken.name = \"Ethereum\";\r\n        ethToken.symbol = \"ETH\";\r\n        ethToken.logoURI =\r\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\r\n        const _tokenList = [ethToken, ...filteredTokens];\r\n        setTokenList(_tokenList);\r\n        const _tokens = tokenListToObject(_tokenList);\r\n        setTokens(_tokens);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    };\r\n    getTokenList();\r\n  }, [tokenListURI]);\r\n\r\n  const getTrades = async () => {\r\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\r\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\r\n\r\n      const baseTokens = tokenList\r\n        .filter(function (t) {\r\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\r\n        })\r\n        .map(el => {\r\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\r\n        });\r\n\r\n      const listOfPairwiseTokens = pairs(baseTokens);\r\n\r\n      const getPairs = async list => {\r\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\r\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\r\n      };\r\n\r\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\r\n\r\n      let bestTrade;\r\n\r\n      if (exact === \"in\") {\r\n        setAmountInMax();\r\n        bestTrade = Trade.bestTradeExactIn(\r\n          listOfPairs.filter(item => item),\r\n          new TokenAmount(tokens[tokenIn], ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\r\n          tokens[tokenOut],\r\n          { maxNumResults: 3, maxHops: 1 },\r\n        );\r\n        if (bestTrade[0]) {\r\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\r\n        } else {\r\n          setAmountOut();\r\n        }\r\n      } else if (exact === \"out\") {\r\n        setAmountOutMin();\r\n        bestTrade = Trade.bestTradeExactOut(\r\n          listOfPairs.filter(item => item),\r\n          tokens[tokenIn],\r\n          new TokenAmount(tokens[tokenOut], ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\r\n          { maxNumResults: 3, maxHops: 1 },\r\n        );\r\n        if (bestTrade[0]) {\r\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\r\n        } else {\r\n          setAmountIn();\r\n        }\r\n      }\r\n\r\n      setTrades(bestTrade);\r\n\r\n      console.log(bestTrade);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTrades();\r\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\r\n\r\n  useEffect(() => {\r\n    if (trades && trades[0]) {\r\n      if (exact === \"in\") {\r\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\r\n      } else if (exact === \"out\") {\r\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\r\n      }\r\n    }\r\n  }, [slippageTolerance, amountIn, amountOut, trades]);\r\n\r\n  const getBalance = async (_token, _account, _contract) => {\r\n    let newBalance;\r\n    if (_token === \"ETH\") {\r\n      newBalance = await selectedProvider.getBalance(_account);\r\n    } else {\r\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\r\n    }\r\n    return newBalance;\r\n  };\r\n\r\n  const getAccountInfo = async () => {\r\n    if (tokens) {\r\n      const accountList = await selectedProvider.listAccounts();\r\n\r\n      if (tokenIn) {\r\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\r\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\r\n        setBalanceIn(newBalanceIn);\r\n\r\n        let allowance;\r\n\r\n        if (tokenIn === \"ETH\") {\r\n          setRouterAllowance();\r\n        } else {\r\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\r\n          setRouterAllowance(allowance);\r\n        }\r\n      }\r\n\r\n      if (tokenOut) {\r\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\r\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\r\n        setBalanceOut(newBalanceOut);\r\n      }\r\n    }\r\n  };\r\n\r\n  usePoller(getAccountInfo, 6000);\r\n\r\n  const route = trades\r\n    ? trades.length > 0\r\n      ? trades[0].route.path.map(function (item) {\r\n          return item.symbol;\r\n        })\r\n      : []\r\n    : [];\r\n\r\n  const updateRouterAllowance = async newAllowance => {\r\n    setApproving(true);\r\n    try {\r\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\r\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\r\n      console.log(result);\r\n      setApproving(false);\r\n      return true;\r\n    } catch (e) {\r\n      notification.open({\r\n        message: \"Approval unsuccessful\",\r\n        description: `Error: ${e.message}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const approveRouter = async () => {\r\n    const approvalAmount =\r\n      exact === \"in\"\r\n        ? ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\r\n        : amountInMax.raw.toString();\r\n    console.log(approvalAmount);\r\n    const approval = updateRouterAllowance(approvalAmount);\r\n    if (approval) {\r\n      notification.open({\r\n        message: \"Token transfer approved\",\r\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const removeRouterAllowance = async () => {\r\n    const approvalAmount = ethers.utils.hexlify(0);\r\n    console.log(approvalAmount);\r\n    const removal = updateRouterAllowance(approvalAmount);\r\n    if (removal) {\r\n      notification.open({\r\n        message: \"Token approval removed\",\r\n        description: `The router is no longer approved for ${tokenIn}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const executeSwap = async () => {\r\n    setSwapping(true);\r\n    try {\r\n      let args;\r\n      const metadata = {};\r\n\r\n      let call;\r\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\r\n      const path = trades[0].route.path.map(function (item) {\r\n        return item.address;\r\n      });\r\n      console.log(path);\r\n      const accountList = await selectedProvider.listAccounts();\r\n      const address = accountList[0];\r\n\r\n      if (exact === \"in\") {\r\n        const _amountIn = ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\r\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\r\n        if (tokenIn === \"ETH\") {\r\n          call = \"swapExactETHForTokens\";\r\n          args = [_amountOutMin, path, address, deadline];\r\n          metadata.value = _amountIn;\r\n        } else {\r\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\r\n          args = [_amountIn, _amountOutMin, path, address, deadline];\r\n        }\r\n      } else if (exact === \"out\") {\r\n        const _amountOut = ethers.utils.hexlify(\r\n          ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals),\r\n        );\r\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\r\n        if (tokenIn === \"ETH\") {\r\n          call = \"swapETHForExactTokens\";\r\n          args = [_amountOut, path, address, deadline];\r\n          metadata.value = _amountInMax;\r\n        } else {\r\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\r\n          args = [_amountOut, _amountInMax, path, address, deadline];\r\n        }\r\n      }\r\n      console.log(call, args, metadata);\r\n      const result = await makeCall(call, routerContract, args, metadata);\r\n      console.log(result);\r\n      notification.open({\r\n        message: \"Swap complete 🦄\",\r\n        description: (\r\n          <>\r\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\r\n            <Text copyable>{result.hash}</Text>\r\n          </>\r\n        ),\r\n      });\r\n      setSwapping(false);\r\n    } catch (e) {\r\n      console.log(e);\r\n      setSwapping(false);\r\n      notification.open({\r\n        message: \"Swap unsuccessful\",\r\n        description: `Error: ${e.message}`,\r\n      });\r\n    }\r\n  };\r\n\r\n  const showSwapModal = () => {\r\n    setSwapModalVisible(true);\r\n  };\r\n\r\n  const handleSwapModalOk = () => {\r\n    setSwapModalVisible(false);\r\n    executeSwap();\r\n  };\r\n\r\n  const handleSwapModalCancel = () => {\r\n    setSwapModalVisible(false);\r\n  };\r\n\r\n  const insufficientBalance = balanceIn\r\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\r\n    : null;\r\n  const inputIsToken = tokenIn !== \"ETH\";\r\n  const insufficientAllowance = !inputIsToken\r\n    ? false\r\n    : routerAllowance\r\n    ? parseFloat(ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\r\n    : null;\r\n  const formattedBalanceIn = balanceIn\r\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\r\n    : null;\r\n  const formattedBalanceOut = balanceOut\r\n    ? parseFloat(ethers.utils.formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\r\n    : null;\r\n\r\n  const metaIn =\r\n    tokens && tokenList && tokenIn\r\n      ? tokenList.filter(function (t) {\r\n          return t.address === tokens[tokenIn].address;\r\n        })[0]\r\n      : null;\r\n  const metaOut =\r\n    tokens && tokenList && tokenOut\r\n      ? tokenList.filter(function (t) {\r\n          return t.address === tokens[tokenOut].address;\r\n        })[0]\r\n      : null;\r\n\r\n  const cleanIpfsURI = uri => {\r\n    try {\r\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\r\n    } catch (e) {\r\n      console.log(e, uri);\r\n      return uri;\r\n    }\r\n  };\r\n\r\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\r\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\r\n\r\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\r\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\r\n  const priceDescription = rawPrice\r\n    ? invertPrice\r\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\r\n      : `${price} ${tokenOut} per ${tokenIn}`\r\n    : null;\r\n\r\n  const priceWidget = (\r\n    <Space>\r\n      <Text type=\"secondary\">{priceDescription}</Text>\r\n      <Button\r\n        type=\"text\"\r\n        onClick={() => {\r\n          setInvertPrice(!invertPrice);\r\n        }}\r\n      >\r\n        <RetweetOutlined />\r\n      </Button>\r\n    </Space>\r\n  );\r\n\r\n  const swapModal = (\r\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\r\n      <Row>\r\n        <Space>\r\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\r\n          {amountIn}\r\n          {tokenIn}\r\n        </Space>\r\n      </Row>\r\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\r\n        <span>↓</span>\r\n      </Row>\r\n      <Row>\r\n        <Space>\r\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\r\n          {amountOut}\r\n          {tokenOut}\r\n        </Space>\r\n      </Row>\r\n      <Divider />\r\n      <Row>{priceWidget}</Row>\r\n      <Row>\r\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\r\n          ? exact === \"in\"\r\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\r\n                6,\r\n              )} ${tokenOut} or the transaction will revert.`\r\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\r\n                6,\r\n              )} ${tokenIn} or the transaction will revert.`\r\n          : null}\r\n      </Row>\r\n    </Modal>\r\n  );\r\n\r\n  return (\r\n    <Card\r\n      title={\r\n        <Space>\r\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\r\n          <Typography>Uniswapper</Typography>\r\n        </Space>\r\n      }\r\n      extra={\r\n        <Button\r\n          type=\"text\"\r\n          onClick={() => {\r\n            setSettingsVisible(true);\r\n          }}\r\n        >\r\n          <SettingOutlined />\r\n        </Button>\r\n      }\r\n    >\r\n      <Space direction=\"vertical\">\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Card\r\n            size=\"small\"\r\n            type=\"inner\"\r\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\r\n            extra={\r\n              <>\r\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\r\n                <Button\r\n                  type=\"link\"\r\n                  onClick={() => {\r\n                    setAmountOut();\r\n                    setAmountIn(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals));\r\n                    setAmountOutMin();\r\n                    setAmountInMax();\r\n                    setExact(\"in\");\r\n                  }}\r\n                >\r\n                  {formattedBalanceIn}\r\n                </Button>\r\n              </>\r\n            }\r\n            style={{ width: 400, textAlign: \"left\" }}\r\n          >\r\n            <InputNumber\r\n              style={{ width: \"160px\" }}\r\n              min={0}\r\n              size=\"large\"\r\n              value={amountIn}\r\n              onChange={e => {\r\n                setAmountOut();\r\n                setTrades();\r\n                setAmountIn(e);\r\n                setExact(\"in\");\r\n              }}\r\n            />\r\n            <Select\r\n              showSearch\r\n              value={tokenIn}\r\n              style={{ width: \"120px\" }}\r\n              size=\"large\"\r\n              bordered={false}\r\n              defaultValue={defaultToken}\r\n              onChange={value => {\r\n                console.log(value);\r\n                if (value === tokenOut) {\r\n                  console.log(\"switch!\", tokenIn);\r\n                  setTokenOut(tokenIn);\r\n                  setAmountOut(amountIn);\r\n                  setBalanceOut(balanceIn);\r\n                }\r\n                setTokenIn(value);\r\n                setTrades();\r\n                setAmountIn();\r\n                setExact(\"out\");\r\n                setBalanceIn();\r\n              }}\r\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n              optionFilterProp=\"children\"\r\n            >\r\n              {tokenList.map(token => (\r\n                <Option key={token.symbol} value={token.symbol}>\r\n                  {token.symbol}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </Card>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Tooltip title={route.join(\"->\")}>\r\n            <span>↓</span>\r\n          </Tooltip>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Card\r\n            size=\"small\"\r\n            type=\"inner\"\r\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\r\n            extra={\r\n              <>\r\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\r\n                <Button type=\"text\">{formattedBalanceOut}</Button>\r\n              </>\r\n            }\r\n            style={{ width: 400, textAlign: \"left\" }}\r\n          >\r\n            <InputNumber\r\n              style={{ width: \"160px\" }}\r\n              size=\"large\"\r\n              min={0}\r\n              value={amountOut}\r\n              onChange={e => {\r\n                setAmountOut(e);\r\n                setAmountIn();\r\n                setTrades();\r\n                setExact(\"out\");\r\n              }}\r\n            />\r\n            <Select\r\n              showSearch\r\n              value={tokenOut}\r\n              style={{ width: \"120px\" }}\r\n              size=\"large\"\r\n              bordered={false}\r\n              onChange={value => {\r\n                console.log(value, tokenIn, tokenOut);\r\n                if (value === tokenIn) {\r\n                  console.log(\"switch!\", tokenOut);\r\n                  setTokenIn(tokenOut);\r\n                  setAmountIn(amountOut);\r\n                  setBalanceIn(balanceOut);\r\n                }\r\n                setTokenOut(value);\r\n                setExact(\"in\");\r\n                setAmountOut();\r\n                setTrades();\r\n                setBalanceOut();\r\n              }}\r\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n              optionFilterProp=\"children\"\r\n            >\r\n              {tokenList.map(token => (\r\n                <Option key={token.symbol} value={token.symbol}>\r\n                  {token.symbol}\r\n                </Option>\r\n              ))}\r\n            </Select>\r\n          </Card>\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          {priceDescription ? priceWidget : null}\r\n        </Row>\r\n        <Row justify=\"center\" align=\"middle\">\r\n          <Space>\r\n            {inputIsToken ? (\r\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\r\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\r\n              </Button>\r\n            ) : null}\r\n            <Button\r\n              size=\"large\"\r\n              loading={swapping}\r\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\r\n              onClick={showSwapModal}\r\n            >\r\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\r\n            </Button>\r\n            {swapModal}\r\n          </Space>\r\n        </Row>\r\n      </Space>\r\n      <Drawer\r\n        visible={settingsVisible}\r\n        onClose={() => {\r\n          setSettingsVisible(false);\r\n        }}\r\n        width={500}\r\n      >\r\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\r\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\r\n          <Descriptions.Item label=\"routerAllowance\">\r\n            <Space>\r\n              {routerAllowance ? ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\r\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\r\n            </Space>\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\r\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\r\n          <Descriptions.Item label=\"bestPrice\">\r\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"nextMidPrice\">\r\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"priceImpact\">\r\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"slippageTolerance\">\r\n            <InputNumber\r\n              defaultValue={defaultSlippage}\r\n              min={0}\r\n              max={100}\r\n              precision={2}\r\n              formatter={value => `${value}%`}\r\n              parser={value => value.replace(\"%\", \"\")}\r\n              onChange={value => {\r\n                console.log(value);\r\n\r\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\r\n                setSlippageTolerance(slippagePercent);\r\n              }}\r\n            />\r\n          </Descriptions.Item>\r\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\r\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\r\n          <Descriptions.Item label=\"timeLimitInSeconds\">\r\n            <InputNumber\r\n              min={0}\r\n              max={3600}\r\n              defaultValue={defaultTimeLimit}\r\n              onChange={value => {\r\n                console.log(value);\r\n                setTimeLimit(value);\r\n              }}\r\n            />\r\n          </Descriptions.Item>\r\n        </Descriptions>\r\n      </Drawer>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Swap;\r\n","import { Switch } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\r\n\r\nexport default function ThemeSwitcher() {\r\n  const theme = window.localStorage.getItem(\"theme\");\r\n  const [isDarkMode, setIsDarkMode] = useState(!(!theme || theme === \"light\"));\r\n  const { switcher, currentTheme, status, themes } = useThemeSwitcher();\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(\"theme\", currentTheme);\r\n  }, [currentTheme]);\r\n\r\n  const toggleTheme = isChecked => {\r\n    setIsDarkMode(isChecked);\r\n    switcher({ theme: isChecked ? themes.dark : themes.light });\r\n  };\r\n\r\n  // Avoid theme change flicker\r\n  // if (status === \"loading\") {\r\n  //   return null;\r\n  // }\r\n\r\n  return (\r\n    <div className=\"main fade-in\" style={{ position: \"fixed\", right: 8, bottom: 8 }}>\r\n      <span style={{ padding: 8 }}>{currentTheme === \"light\" ? \"☀️\" : \"🌜\"}</span>\r\n      <Switch checked={isDarkMode} onChange={toggleTheme} />\r\n    </div>\r\n  );\r\n}\r\n","import { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\r\nimport { Timeline, Typography } from \"antd\";\r\nimport React from \"react\";\r\nimport Blockies from \"react-blockies\";\r\n\r\nconst { Text } = Typography;\r\n\r\n// displays a timeline for scaffold-eth usage\r\n\r\nexport default function TimelineDisplay(props) {\r\n  return (\r\n    <Timeline mode=\"right\">\r\n      <Timeline.Item dot=\"💾\">\r\n        <Text delete>\r\n          Clone and Install from the{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\r\n            github repo\r\n          </a>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"⚛️\">\r\n        <Text delete>\r\n          Start your frontend app with: <Text strong>yarn start</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"⛓\">\r\n        <Text delete={props.chainIsUp}>\r\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"📝\">\r\n        <Text delete={props.hasOwner}>\r\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🤡\">\r\n        <Text delete={props.isNotSmoort}>\r\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\r\n        <Text delete={props.hasEther}>\r\n          Send test ether to your{\" \"}\r\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\r\n          (bottom left) faucet\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item\r\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\r\n        color={props.contractHasEther ? \"green\" : \"blue\"}\r\n      >\r\n        <Text delete={props.contractHasEther}>\r\n          Deposit some funds into your{\" \"}\r\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\r\n          smart contract wallet\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item\r\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\r\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\r\n      >\r\n        <Text delete={props.amOwnerOfContract}>\r\n          Set <b>owner</b> of your{\" \"}\r\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\r\n          smart contract wallet to your{\" \"}\r\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"☢️\">\r\n        <Text>\r\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🔬\">\r\n        <Text>\r\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\r\n          <Text strong>yarn run test</Text>\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"🚀\">\r\n        <Text>\r\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\r\n            @ me\r\n          </a>\r\n          !\r\n        </Text>\r\n      </Timeline.Item>\r\n\r\n      <Timeline.Item dot=\"📖\">\r\n        <Text>\r\n          Read more about{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\r\n            Ethereum\r\n          </a>\r\n          ,{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\r\n            Solidity\r\n          </a>\r\n          , and{\" \"}\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\r\n            Buidler\r\n          </a>\r\n        </Text>\r\n      </Timeline.Item>\r\n    </Timeline>\r\n  );\r\n}\r\n","import { utils, ethers } from \"ethers\";\r\nimport { Button, Input, Form, Select, InputNumber, Table, Radio } from \"antd\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useContractLoader, useOnBlock } from \"eth-hooks\";\r\nimport { NETWORKS } from \"../constants\";\r\nimport { Transactor } from \"../helpers\";\r\n\r\n/*\r\nThis is a component for bridging between L1 & L2\r\nCurrently it supports Testnet deposits for Arbitrum & Optimism\r\n\r\n __          _______ _____\r\n \\ \\        / /_   _|  __ \\\r\n  \\ \\  /\\  / /  | | | |__) |\r\n   \\ \\/  \\/ /   | | |  ___/\r\n    \\  /\\  /   _| |_| |\r\n     \\/  \\/   |_____|_|\r\n\r\n\r\n*/\r\n\r\nexport default function L2ArbitrumBridge({ address, userSigner }) {\r\n  const [L1EthBalance, setL1EthBalance] = useState(\"...\");\r\n  const [L2EthBalance, setL2EthBalance] = useState(\"...\");\r\n  const [L1Provider, setL1Provider] = useState(\"\");\r\n  const [L2Provider, setL2Provider] = useState(\"\");\r\n  const [rollup, setRollup] = useState(\"arbitrum\");\r\n  const [environment, setEnvironment] = useState(\"test\");\r\n\r\n  const rollupConfig = {\r\n    arbitrum: {\r\n      test: { L1: NETWORKS.rinkeby, L2: NETWORKS.rinkebyArbitrum },\r\n      main: { L1: NETWORKS.mainnet, L2: NETWORKS.arbitrum },\r\n      local: { L1: NETWORKS.localArbitrumL1, L2: NETWORKS.localArbitrum },\r\n    },\r\n    optimism: {\r\n      test: { L1: NETWORKS.kovan, L2: NETWORKS.kovanOptimism },\r\n      local: { L1: NETWORKS.localOptimismL1, L2: NETWORKS.localOptimism },\r\n    },\r\n  };\r\n\r\n  const activeConfig = rollupConfig[rollup][environment];\r\n\r\n  const selectedChainId =\r\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\r\n\r\n  const tx = Transactor(userSigner);\r\n\r\n  useEffect(() => {\r\n    async function setProviders() {\r\n      const L1 = activeConfig.L1;\r\n      const L2 = activeConfig.L2;\r\n      setL1Provider(new ethers.providers.StaticJsonRpcProvider(L1.rpcUrl));\r\n      setL2Provider(new ethers.providers.StaticJsonRpcProvider(L2.rpcUrl));\r\n      setL1EthBalance(\"...\");\r\n      setL2EthBalance(\"...\");\r\n    }\r\n    setProviders();\r\n  }, [rollup]);\r\n\r\n  const contracts = useContractLoader(userSigner, { externalContracts: L1BridgeMetadata, hardhatContracts: {} });\r\n\r\n  useOnBlock(L1Provider, async () => {\r\n    console.log(`⛓ A new mainnet block is here: ${L1Provider._lastBlockNumber}`);\r\n    const yourL1Balance = await L1Provider.getBalance(address);\r\n    setL1EthBalance(yourL1Balance ? ethers.utils.formatEther(yourL1Balance) : \"...\");\r\n    const yourL2Balance = await L2Provider.getBalance(address);\r\n    setL2EthBalance(yourL2Balance ? ethers.utils.formatEther(yourL2Balance) : \"...\");\r\n  });\r\n\r\n  const { Option } = Select;\r\n  const formItemLayout = {\r\n    labelCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 8 },\r\n    },\r\n    wrapperCol: {\r\n      xs: { span: 24 },\r\n      sm: { span: 12 },\r\n    },\r\n  };\r\n  const tailFormItemLayout = {\r\n    wrapperCol: {\r\n      xs: {\r\n        span: 24,\r\n        offset: 0,\r\n      },\r\n      sm: {\r\n        span: 12,\r\n        offset: 8,\r\n      },\r\n    },\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"\",\r\n      dataIndex: \"token\",\r\n      key: \"token\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: `${activeConfig.L1.name} L1 Balance`,\r\n      dataIndex: \"l1\",\r\n      key: \"l1\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: `${activeConfig.L1.name} ${rollup} Balance`,\r\n      dataIndex: \"l2\",\r\n      key: \"l2\",\r\n      align: \"center\",\r\n    },\r\n  ];\r\n\r\n  const data = [\r\n    {\r\n      key: \"1\",\r\n      token: \"ETH\",\r\n      l1: \"Ξ\" + L1EthBalance,\r\n      l2: \"Ξ\" + L2EthBalance,\r\n    },\r\n  ];\r\n\r\n  const [form] = Form.useForm();\r\n\r\n  const onAssetChange = value => {\r\n    console.log(value);\r\n  };\r\n\r\n  async function onFinish(values) {\r\n    console.log(contracts);\r\n    console.log(values.amount.toString());\r\n    console.log(rollup);\r\n    let newTx;\r\n    try {\r\n      if (rollup === \"arbitrum\") {\r\n        newTx = await tx(\r\n          contracts.Inbox.depositEth(1_300_000, {\r\n            value: utils.parseEther(values.amount.toString()),\r\n            gasLimit: 300000,\r\n          }),\r\n        );\r\n      } else if (rollup === \"optimism\") {\r\n        newTx = await tx(\r\n          contracts.OVM_L1StandardBridge.depositETH(1_300_000, \"0x\", {\r\n            value: utils.parseEther(values.amount.toString()),\r\n          }),\r\n        );\r\n      }\r\n      await newTx.wait();\r\n      console.log(\"woop!\");\r\n    } catch (e) {\r\n      console.log(e);\r\n      console.log(\"something went wrong!\");\r\n    }\r\n  }\r\n\r\n  const onReset = () => {\r\n    form.resetFields();\r\n  };\r\n\r\n  const wrongNetwork = selectedChainId !== activeConfig.L1.chainId;\r\n\r\n  return (\r\n    <div style={{ padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\r\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\r\n        <h2>Welcome to the L2 Deposit Bridge!</h2>\r\n        <Radio.Group\r\n          value={rollup}\r\n          onChange={e => {\r\n            setRollup(e.target.value);\r\n          }}\r\n          style={{ marginBottom: 10 }}\r\n        >\r\n          <Radio.Button value=\"arbitrum\">Arbitrum</Radio.Button>\r\n          <Radio.Button value=\"optimism\">Optimism</Radio.Button>\r\n        </Radio.Group>\r\n\r\n        <Table columns={columns} dataSource={data} pagination={false} style={{ marginBottom: 20 }} />\r\n\r\n        <Form\r\n          {...formItemLayout}\r\n          form={form}\r\n          name=\"control-hooks\"\r\n          onFinish={onFinish}\r\n          initialValues={{ assetType: \"eth\" }}\r\n        >\r\n          <Form.Item\r\n            name=\"assetType\"\r\n            label=\"Select Asset Type\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n              },\r\n            ]}\r\n          >\r\n            <Select placeholder=\"Select an asset type\" onChange={onAssetChange} allowClear>\r\n              <Option value=\"eth\">ETH</Option>\r\n              <Option disabled value=\"erc20\">\r\n                ERC-20\r\n              </Option>\r\n            </Select>\r\n          </Form.Item>\r\n          <Form.Item name=\"address\" label=\"Address\">\r\n            <Input disabled placeholder={address} />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"amount\"\r\n            label=\"Amount to bridge\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n              },\r\n            ]}\r\n          >\r\n            <InputNumber />\r\n          </Form.Item>\r\n          <Form.Item {...tailFormItemLayout}>\r\n            <Button type=\"primary\" htmlType=\"submit\" disabled={wrongNetwork}>\r\n              {wrongNetwork ? `Switch wallet to ${activeConfig.L1.name}` : \"Deposit\"}\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Arbitrum Inbox https://rinkeby.etherscan.io/address/0xa157dc79ca26d69c3b1282d03ec42bdee2790a8f#code\r\nconst ArbitrumInboxABI = [\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      { indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" },\r\n      { indexed: false, internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"InboxMessageDelivered\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [{ indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" }],\r\n    name: \"InboxMessageDeliveredFromOrigin\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [{ indexed: false, internalType: \"address\", name: \"newSource\", type: \"address\" }],\r\n    name: \"WhitelistSourceUpdated\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"bridge\",\r\n    outputs: [{ internalType: \"contract IBridge\", name: \"\", type: \"address\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"l2CallValue\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"excessFeeRefundAddress\", type: \"address\" },\r\n      { internalType: \"address\", name: \"callValueRefundAddress\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"createRetryableTicket\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" }],\r\n    name: \"depositEth\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"contract IBridge\", name: \"_bridge\", type: \"address\" },\r\n      { internalType: \"address\", name: \"_whitelist\", type: \"address\" },\r\n    ],\r\n    name: \"initialize\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"isMaster\",\r\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendContractTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendL1FundedContractTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendL1FundedUnsignedTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"payable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\r\n    name: \"sendL2Message\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\r\n    name: \"sendL2MessageFromOrigin\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [\r\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\r\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\r\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\r\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\r\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\r\n    ],\r\n    name: \"sendUnsignedTransaction\",\r\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [{ internalType: \"address\", name: \"newSource\", type: \"address\" }],\r\n    name: \"updateWhitelistSource\",\r\n    outputs: [],\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: \"whitelist\",\r\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n];\r\n\r\n// https://github.com/ethereum-optimism/optimism/blob/2bd49730fa8d2c10953873f0ccc792198a49d5c9/packages/contracts/contracts/optimistic-ethereum/iOVM/bridge/tokens/iOVM_L1StandardBridge.sol\r\nconst OVM_L1StandardBridgeABI = [\r\n  \"function depositETH(uint32 _l2Gas,bytes calldata _data) external payable\",\r\n  \"function depositETHTo(address _to,uint32 _l2Gas,bytes calldata _data) external payable\",\r\n  \"function finalizeETHWithdrawal (address _from,address _to,uint _amount,bytes calldata _data) external\",\r\n];\r\n\r\nconst L1BridgeMetadata = {\r\n  // Arbitrium Contract's\r\n  44010: {\r\n    contracts: {\r\n      Inbox: {\r\n        address: \"0xA4d796Ad4e79aFB703340a596AEd88f8a5924183\",\r\n        abi: ArbitrumInboxABI,\r\n      },\r\n    },\r\n  },\r\n  4: {\r\n    contracts: {\r\n      Inbox: {\r\n        address: \"0x578bade599406a8fe3d24fd7f7211c0911f5b29e\",\r\n        abi: ArbitrumInboxABI,\r\n      },\r\n    },\r\n  },\r\n  // Optimism Contract's\r\n  31337: {\r\n    contracts: {\r\n      OVM_L1StandardBridge: {\r\n        address: \"0x998abeb3E57409262aE5b751f60747921B33613E\",\r\n        abi: OVM_L1StandardBridgeABI,\r\n      },\r\n    },\r\n  },\r\n  42: {\r\n    contracts: {\r\n      OVM_L1StandardBridge: {\r\n        address: \"0x22F24361D548e5FaAfb36d1437839f080363982B\",\r\n        abi: OVM_L1StandardBridgeABI,\r\n      },\r\n    },\r\n  },\r\n};\r\n","import { utils } from \"ethers\";\r\nimport { Select } from \"antd\";\r\nimport React, { useState } from \"react\";\r\nimport { Address, AddressInput } from \"../components\";\r\nimport { useTokenList } from \"eth-hooks/dapps/dex\";\r\n\r\nconst { Option } = Select;\r\n\r\nexport default function Hints({ yourLocalBalance, mainnetProvider, price, address }) {\r\n  // Get a list of tokens from a tokenlist -> see tokenlists.org!\r\n  const [selectedToken, setSelectedToken] = useState(\"Pick a token!\");\r\n  const listOfTokens = useTokenList(\r\n    \"https://raw.githubusercontent.com/SetProtocol/uniswap-tokenlist/main/set.tokenlist.json\",\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>👷</span>\r\n        Edit your <b>contract</b> in\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          packages/hardhat/contracts\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🛰</span>\r\n        <b>compile/deploy</b> with\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run deploy\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🚀</span>\r\n        Your <b>contract artifacts</b> are automatically injected into your frontend at\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          packages/react-app/src/contracts/\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🎛</span>\r\n        Edit your <b>frontend</b> in\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          packages/reactapp/src/App.js\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🔭</span>\r\n        explore the\r\n        <span\r\n          className=\"highlight\"\r\n          style={{\r\n            marginLeft: 4,\r\n            marginRight: 4,\r\n            /* backgroundColor: \"#f9f9f9\", */\r\n            padding: 4,\r\n            borderRadius: 4,\r\n            fontWeight: \"bolder\",\r\n          }}\r\n        >\r\n          🖇 hooks\r\n        </span>\r\n        and\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          📦 components\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        for example, the\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          useBalance()\r\n        </span>{\" \"}\r\n        hook keeps track of your balance: <b>{utils.formatEther(yourLocalBalance || 0)}</b>\r\n      </div>\r\n\r\n      <div style={{ margin: 8 }}>\r\n        <div>\r\n          <b>useTokenList()</b> can get you an array of tokens from{\" \"}\r\n          <a href=\"https://tokenlists.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n            tokenlists.org!\r\n          </a>\r\n        </div>\r\n        <Select\r\n          showSearch\r\n          value={selectedToken}\r\n          onChange={value => {\r\n            console.log(`selected ${value}`);\r\n            setSelectedToken(value);\r\n          }}\r\n          filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\r\n          optionFilterProp=\"children\"\r\n        >\r\n          {listOfTokens.map(token => (\r\n            <Option key={token.symbol} value={token.symbol}>\r\n              {token.symbol}\r\n            </Option>\r\n          ))}\r\n        </Select>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        as you build your app you&apos;ll need web3 specific components like an\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          {\"<AddressInput/>\"}\r\n        </span>\r\n        component:\r\n        <div style={{ width: 350, padding: 16, margin: \"auto\" }}>\r\n          <AddressInput ensProvider={mainnetProvider} />\r\n        </div>\r\n        <div>(try putting in your address, an ens address, or scanning a QR code)</div>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        this balance could be multiplied by\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          price\r\n        </span>{\" \"}\r\n        that is loaded with the\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          usePrice\r\n        </span>{\" \"}\r\n        hook with the current value: <b>${price}</b>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>💧</span>\r\n        use the <b>faucet</b> to send funds to\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          <Address address={address} minimized /> {address}\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>📡</span>\r\n        deploy to a testnet or mainnet by editing\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          packages/hardhat/hardhat.config.js\r\n        </span>\r\n        and running\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run deploy\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🔑</span>\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run generate\r\n        </span>\r\n        will create a deployer account in\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          packages/hardhat\r\n        </span>\r\n        <div style={{ marginTop: 8 }}>\r\n          (use{\" \"}\r\n          <span\r\n            className=\"highlight\"\r\n            style={{\r\n              marginLeft: 4,\r\n              /* backgroundColor: \"#f1f1f1\", */ padding: 4,\r\n              borderRadius: 4,\r\n              fontWeight: \"bolder\",\r\n            }}\r\n          >\r\n            yarn run account\r\n          </span>{\" \"}\r\n          to display deployer address and balance)\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>⚙️</span>\r\n        build your app with\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run build\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🚢</span>\r\n        ship it!\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run surge\r\n        </span>\r\n        or\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run s3\r\n        </span>\r\n        or\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          yarn run ipfs\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 32 }}>\r\n        <span style={{ marginRight: 8 }}>💬</span>\r\n        for support, join this\r\n        <span\r\n          className=\"highlight\"\r\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\r\n        >\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\">\r\n            Telegram Chat\r\n          </a>\r\n        </span>\r\n      </div>\r\n      <div style={{ padding: 128 }}>\r\n        🛠 Check out your browser&apos;s developer console for more... (inspect console) 🚀\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { gql, useQuery } from \"@apollo/client\";\r\nimport { Button, Input, Table, Typography } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport GraphiQL from \"graphiql\";\r\nimport \"graphiql/graphiql.min.css\";\r\nimport fetch from \"isomorphic-fetch\";\r\nimport React, { useState } from \"react\";\r\nimport { Address } from \"../components\";\r\n\r\nconst highlight = {\r\n  marginLeft: 4,\r\n  marginRight: 8,\r\n  /* backgroundColor: \"#f9f9f9\", */ padding: 4,\r\n  borderRadius: 4,\r\n  fontWeight: \"bolder\",\r\n};\r\n\r\nfunction Subgraph(props) {\r\n  function graphQLFetcher(graphQLParams) {\r\n    return fetch(props.subgraphUri, {\r\n      method: \"post\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(graphQLParams),\r\n    }).then(response => response.json());\r\n  }\r\n\r\n  const EXAMPLE_GRAPHQL = `\r\n  {\r\n    purposes(first: 25, orderBy: createdAt, orderDirection: desc) {\r\n      id\r\n      purpose\r\n      createdAt\r\n      sender {\r\n        id\r\n      }\r\n    }\r\n    senders {\r\n      id\r\n      address\r\n      purposeCount\r\n    }\r\n  }\r\n  `;\r\n  const EXAMPLE_GQL = gql(EXAMPLE_GRAPHQL);\r\n  const { loading, data } = useQuery(EXAMPLE_GQL, { pollInterval: 2500 });\r\n\r\n  const purposeColumns = [\r\n    {\r\n      title: \"Purpose\",\r\n      dataIndex: \"purpose\",\r\n      key: \"purpose\",\r\n    },\r\n    {\r\n      title: \"Sender\",\r\n      key: \"id\",\r\n      render: record => <Address value={record.sender.id} ensProvider={props.mainnetProvider} fontSize={16} />,\r\n    },\r\n    {\r\n      title: \"createdAt\",\r\n      key: \"createdAt\",\r\n      dataIndex: \"createdAt\",\r\n      render: d => new Date(d * 1000).toISOString(),\r\n    },\r\n  ];\r\n\r\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\r\n\r\n  const deployWarning = (\r\n    <div style={{ marginTop: 8, padding: 8 }}>Warning: 🤔 Have you deployed your subgraph yet?</div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\r\n        You will find that parsing/tracking events with the{\" \"}\r\n        <span className=\"highlight\" style={highlight}>\r\n          useEventListener\r\n        </span>{\" \"}\r\n        hook becomes a chore for every new project.\r\n      </div>\r\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\r\n        Instead, you can use{\" \"}\r\n        <a href=\"https://thegraph.com/docs/about/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          The Graph\r\n        </a>{\" \"}\r\n        with 🏗 scaffold-eth (\r\n        <a href=\"https://youtu.be/T5ylzOTkn-Q\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          learn more\r\n        </a>\r\n        ):\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🚮</span>\r\n        Clean up previous data:\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn clean-graph-node\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>📡</span>\r\n        Spin up a local graph node by running\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn run-graph-node\r\n        </span>\r\n        <span style={{ marginLeft: 4 }}>\r\n          {\" \"}\r\n          (requires{\" \"}\r\n          <a href=\"https://www.docker.com/products/docker-desktop\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n            {\" \"}\r\n            Docker\r\n          </a>\r\n          ){\" \"}\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>📝</span>\r\n        Create your <b>local subgraph</b> by running\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn graph-create-local\r\n        </span>\r\n        (only required once!)\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🚢</span>\r\n        Deploy your <b>local subgraph</b> by running\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn graph-ship-local\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🖍️</span>\r\n        Edit your <b>local subgraph</b> in\r\n        <span className=\"highlight\" style={highlight}>\r\n          packages/subgraph/src\r\n        </span>\r\n        (learn more about subgraph definition{\" \"}\r\n        <a href=\"https://thegraph.com/docs/define-a-subgraph\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          here\r\n        </a>\r\n        )\r\n      </div>\r\n\r\n      <div style={{ margin: 32 }}>\r\n        <span style={{ marginRight: 8 }}>🤩</span>\r\n        Deploy your <b>contracts and your subgraph</b> in one go by running\r\n        <span className=\"highlight\" style={highlight}>\r\n          yarn deploy-and-graph\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ width: 780, margin: \"auto\", paddingBottom: 64 }}>\r\n        <div style={{ margin: 32, textAlign: \"right\" }}>\r\n          <Input\r\n            onChange={e => {\r\n              setNewPurpose(e.target.value);\r\n            }}\r\n          />\r\n          <Button\r\n            onClick={() => {\r\n              console.log(\"newPurpose\", newPurpose);\r\n              /* look how you call setPurpose on your contract: */\r\n              props.tx(props.writeContracts.YourContract.setPurpose(newPurpose));\r\n            }}\r\n          >\r\n            Set Purpose\r\n          </Button>\r\n        </div>\r\n\r\n        {data ? (\r\n          <Table dataSource={data.purposes} columns={purposeColumns} rowKey=\"id\" />\r\n        ) : (\r\n          <Typography>{loading ? \"Loading...\" : deployWarning}</Typography>\r\n        )}\r\n\r\n        <div style={{ margin: 32, height: 400, border: \"1px solid #888888\", textAlign: \"left\" }}>\r\n          <GraphiQL fetcher={graphQLFetcher} docExplorerOpen query={EXAMPLE_GRAPHQL} />\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ padding: 64 }}>...</div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Subgraph;\r\n","export default __webpack_public_path__ + \"static/media/top.cb0767a8.jpg\";","import Portis from \"@portis/web3\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\nimport { Alert, Button, Col, List, Menu, Row, InputNumber, Select } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport Authereum from \"authereum\";\r\nimport {\r\n  useBalance,\r\n  useContractLoader,\r\n  useContractReader,\r\n  useGasPrice,\r\n  useOnBlock,\r\n  useUserProviderAndSigner,\r\n} from \"eth-hooks\";\r\nimport { useExchangeEthPrice } from \"eth-hooks/dapps/dex\";\r\nimport { useEventListener } from \"eth-hooks/events/useEventListener\";\r\nimport Fortmatic from \"fortmatic\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\";\r\n//import Torus from \"@toruslabs/torus-embed\"\r\nimport WalletLink from \"walletlink\";\r\nimport Web3Modal from \"web3modal\";\r\nimport \"./App.css\";\r\nimport { Address, Account, Balance, Contract, Faucet, GasGauge, Header, Ramp, ThemeSwitch } from \"./components\";\r\nimport { INFURA_ID, NETWORK, NETWORKS, ALCHEMY_KEY } from \"./constants\";\r\nimport externalContracts from \"./contracts/external_contracts\";\r\n// contracts\r\nimport deployedContracts from \"./contracts/hardhat_contracts.json\";\r\nimport { Transactor } from \"./helpers\";\r\n// import Hints from \"./Hints\";\r\nimport { ExampleUI, Hints, Subgraph } from \"./views\";\r\n// Setup: npm install alchemy-sdk\r\nimport { Alchemy, Network } from \"alchemy-sdk\";\r\nimport top from \"./images/top.jpg\";\r\n// Optional Config object, but defaults to demo api-key and eth-mainnet.\r\nconst settings = {\r\n  apiKey: 'lIguUBlNorQF0qVOvhyXc57Tkgk3JynZ', // Replace with your Alchemy API Key.\r\n  network: Network.ARB_MAINNET, // Replace with your network.\r\n};\r\n\r\nconst alchemy = new Alchemy(settings);\r\nfunction importAll(r) {\r\n  let images = {};\r\n  r.keys().map((item, index) => {\r\n    images[item.replace(\"./\", \"\")] = r(item);\r\n  });\r\n  return images;\r\n}\r\n\r\nconst { ethers } = require(\"ethers\");\r\n/*\r\n    Welcome to 🏗 scaffold-eth !\r\n\r\n    Code:\r\n    https://github.com/scaffold-eth/scaffold-eth\r\n\r\n    Support:\r\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\r\n    or DM @austingriffith on twitter or telegram\r\n\r\n    You should get your own Infura.io ID and put it in `constants.js`\r\n    (this is your connection to the main Ethereum network for ENS etc.)\r\n\r\n\r\n    🌏 EXTERNAL CONTRACTS:\r\n    You can also bring in contract artifacts in `constants.js`\r\n    (and then use the `useExternalContractLoader()` hook!)\r\n*/\r\n\r\n/// 📡 What chain are your contracts deployed to?\r\nconst targetNetwork = NETWORKS.arbitrum; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\r\n\r\n// 😬 Sorry for all the console logging\r\nconst DEBUG = false;\r\nconst NETWORKCHECK = true;\r\n\r\n// 🛰 providers\r\nif (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\r\n// const mainnetProvider = getDefaultProvider(\"mainnet\", { infura: INFURA_ID, etherscan: ETHERSCAN_KEY, quorum: 1 });\r\n// const mainnetProvider = new InfuraProvider(\"mainnet\",INFURA_ID);\r\n//\r\n// attempt to connect to our own scaffold eth rpc and if that fails fall back to infura...\r\n// Using StaticJsonRpcProvider as the chainId won't change see https://github.com/ethers-io/ethers.js/issues/901\r\nconst scaffoldEthProvider = navigator.onLine\r\n  ? new ethers.providers.StaticJsonRpcProvider(\"https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}\")\r\n  : null;\r\nconst poktMainnetProvider = navigator.onLine\r\n  ? new ethers.providers.StaticJsonRpcProvider(\r\n      \"https://eth-mainnet.gateway.pokt.network/v1/lb/61853c567335c80036054a2b\",\r\n    )\r\n  : null;\r\nconst mainnetInfura = navigator.onLine\r\n  ? new ethers.providers.StaticJsonRpcProvider(`https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`)\r\n  : null;\r\n// ( ⚠️ Getting \"failed to meet quorum\" errors? Check your INFURA_ID\r\n// 🏠 Your local provider is usually pointed at your local blockchain\r\nconst localProviderUrl = targetNetwork.rpcUrl;\r\n// as you deploy to other networks you can set REACT_APP_PROVIDER=https://dai.poa.network in packages/react-app/.env\r\nconst localProviderUrlFromEnv = process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : localProviderUrl;\r\nif (DEBUG) console.log(\"🏠 Connecting to provider:\", localProviderUrlFromEnv);\r\nconst localProvider = new ethers.providers.StaticJsonRpcProvider(localProviderUrlFromEnv);\r\n\r\n// 🔭 block explorer URL\r\nconst blockExplorer = targetNetwork.blockExplorer;\r\n\r\n// Coinbase walletLink init\r\nconst walletLink = new WalletLink({\r\n  appName: \"coinbase\",\r\n});\r\n\r\n// WalletLink provider\r\nconst walletLinkProvider = walletLink.makeWeb3Provider(`https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`, 1);\r\n\r\nconst web3Modal = new Web3Modal({\r\n  network: \"mainnet\", // Optional. If using WalletConnect on xDai, change network to \"xdai\" and add RPC info below for xDai chain.\r\n  cacheProvider: true, // optional\r\n  theme: \"light\", // optional. Change to \"dark\" for a dark theme.\r\n  providerOptions: {\r\n    walletconnect: {\r\n      package: WalletConnectProvider, // required\r\n      options: {\r\n        bridge: \"https://polygon.bridge.walletconnect.org\",\r\n        infuraId: INFURA_ID,\r\n        rpc: {\r\n          1: `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`, // mainnet // For more WalletConnect providers: https://docs.walletconnect.org/quick-start/dapps/web3-provider#required\r\n          42: `https://kovan.infura.io/v3/${INFURA_ID}`,\r\n          100: \"https://dai.poa.network\", // xDai\r\n        },\r\n      },\r\n    },\r\n    portis: {\r\n      display: {\r\n        logo: \"https://user-images.githubusercontent.com/9419140/128913641-d025bc0c-e059-42de-a57b-422f196867ce.png\",\r\n        name: \"Portis\",\r\n        description: \"Connect to Portis App\",\r\n      },\r\n      package: Portis,\r\n      options: {\r\n        id: \"6255fb2b-58c8-433b-a2c9-62098c05ddc9\",\r\n      },\r\n    },\r\n    fortmatic: {\r\n      package: Fortmatic, // required\r\n      options: {\r\n        key: \"pk_live_5A7C91B2FC585A17\", // required\r\n      },\r\n    },\r\n    // torus: {\r\n    //   package: Torus,\r\n    //   options: {\r\n    //     networkParams: {\r\n    //       host: \"https://localhost:8545\", // optional\r\n    //       chainId: 1337, // optional\r\n    //       networkId: 1337 // optional\r\n    //     },\r\n    //     config: {\r\n    //       buildEnv: \"development\" // optional\r\n    //     },\r\n    //   },\r\n    // },\r\n    \"custom-walletlink\": {\r\n      display: {\r\n        logo: \"https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0\",\r\n        name: \"Coinbase\",\r\n        description: \"Connect to Coinbase Wallet (not Coinbase App)\",\r\n      },\r\n      package: walletLinkProvider,\r\n      connector: async (provider, _options) => {\r\n        await provider.enable();\r\n        return provider;\r\n      },\r\n    },\r\n    authereum: {\r\n      package: Authereum, // required\r\n    },\r\n  },\r\n});\r\n\r\nfunction App(props) {\r\n  const mainnetProvider =\r\n    poktMainnetProvider && poktMainnetProvider._isProvider\r\n      ? poktMainnetProvider\r\n      : scaffoldEthProvider && scaffoldEthProvider._network\r\n      ? scaffoldEthProvider\r\n      : mainnetInfura;\r\n\r\n  const [injectedProvider, setInjectedProvider] = useState();\r\n  const [address, setAddress] = useState();\r\n\r\n  const logoutOfWeb3Modal = async () => {\r\n    await web3Modal.clearCachedProvider();\r\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\r\n      await injectedProvider.provider.disconnect();\r\n    }\r\n    setTimeout(() => {\r\n      window.location.reload();\r\n    }, 1);\r\n  };\r\n\r\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\r\n  const price = useExchangeEthPrice(targetNetwork, mainnetProvider);\r\n\r\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\r\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\r\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\r\n  const userProviderAndSigner = useUserProviderAndSigner(injectedProvider, localProvider);\r\n  const userSigner = userProviderAndSigner.signer;\r\n\r\n  useEffect(() => {\r\n    async function getAddress() {\r\n      if (userSigner) {\r\n        const newAddress = await userSigner.getAddress();\r\n        setAddress(newAddress);\r\n      }\r\n    }\r\n    getAddress();\r\n  }, [userSigner]);\r\n\r\n\r\n  // You can warn the user if you would like them to be on a specific network\r\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\r\n  const selectedChainId =\r\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\r\n\r\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\r\n\r\n  // The transactor wraps transactions and provides notificiations\r\n  const tx = Transactor(userSigner, gasPrice);\r\n\r\n  // Faucet Tx can be used to send funds from the faucet\r\n  const faucetTx = Transactor(localProvider, gasPrice);\r\n\r\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\r\n  const yourLocalBalance = useBalance(localProvider, address);\r\n\r\n  // Just plug in different 🛰 providers to get your balance on different chains:\r\n // const yourMainnetBalance = useBalance(mainnetProvider, address);\r\n\r\n  // const contractConfig = useContractConfig();\r\n\r\n  const contractConfig = { deployedContracts: deployedContracts || {}, externalContracts: externalContracts || {} };\r\n\r\n  // Load in your local 📝 contract and read a value from it:\r\n  const readContracts = useContractLoader(localProvider, contractConfig);\r\n\r\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\r\n  const writeContracts = useContractLoader(userSigner, contractConfig, localChainId);\r\n\r\n  // EXTERNAL CONTRACT EXAMPLE:\r\n  //\r\n  // If you want to bring in the mainnet DAI contract it would look like:\r\n  const mainnetContracts = useContractLoader(mainnetProvider, contractConfig);\r\n  const lendAddy =  readContracts && readContracts.FloorLendingV2 && readContracts.FloorLendingV2.address;  \r\n\r\n  // If you want to call a function on a new block\r\n // useOnBlock(mainnetProvider, () => {\r\n  //  console.log(`⛓ A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\r\n // });\r\n\r\n  const loanEvent = useEventListener(readContracts, \"FloorLendingV2\", \"loanEvent\", localProvider, 1);\r\n  const repayLoanEvent = useEventListener(readContracts, \"FloorLendingV2\", \"repayLoanEvent\", localProvider, 1); \r\n  const ethBalance = useBalance(localProvider, lendAddy);\r\n\r\n  /*\r\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\r\n  console.log(\"🏷 Resolved austingriffith.eth as:\",addressFromENS)\r\n  */\r\n\r\n  //\r\n  // 🧫 DEBUG 👨🏻‍🔬\r\n  //\r\n  useEffect(() => {\r\n    if (\r\n      DEBUG &&\r\n      mainnetProvider &&\r\n      address &&\r\n      selectedChainId &&\r\n      yourLocalBalance &&\r\n      readContracts &&\r\n      writeContracts &&\r\n      mainnetContracts\r\n    ) {\r\n      console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\r\n      console.log(\"🌎 mainnetProvider\", mainnetProvider);\r\n      console.log(\"🏠 localChainId\", localChainId);\r\n      console.log(\"👩‍💼 selected address:\", address);\r\n      console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\r\n      //console.log(\"💵 yourLocalBalance\", yourLocalBalance ? ethers.utils.formatEther(yourLocalBalance) : \"...\");\r\n      //console.log(\"💵 yourMainnetBalance\", yourMainnetBalance ? ethers.utils.formatEther(yourMainnetBalance) : \"...\");\r\n      console.log(\"📝 readContracts\", readContracts);\r\n      //console.log(\"🌍 DAI contract on mainnet:\", mainnetContracts);\r\n      console.log(\"🔐 writeContracts\", writeContracts);\r\n    }\r\n  }, [\r\n    mainnetProvider,\r\n    address,\r\n    selectedChainId,\r\n    yourLocalBalance,\r\n    readContracts,\r\n    writeContracts,\r\n    mainnetContracts,\r\n  ]);\r\n\r\n  let networkDisplay = \"\";\r\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\r\n    const networkSelected = NETWORK(selectedChainId);\r\n    const networkLocal = NETWORK(localChainId);\r\n    if (selectedChainId === 1337 && localChainId === 31337) {\r\n      networkDisplay = (\r\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\r\n          <Alert\r\n            message=\"⚠️ Wrong Network ID\"\r\n            description={\r\n              <div>\r\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\r\n                HardHat.\r\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\r\n              </div>\r\n            }\r\n            type=\"error\"\r\n            closable={false}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      networkDisplay = (\r\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\r\n          <Alert\r\n            message=\"⚠️ Wrong Network\"\r\n            description={\r\n              <div>\r\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\r\n                <Button\r\n                  onClick={async () => {\r\n                    const ethereum = window.ethereum;\r\n                    const data = [\r\n                      {\r\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\r\n                        chainName: targetNetwork.name,\r\n                        nativeCurrency: targetNetwork.nativeCurrency,\r\n                        rpcUrls: [targetNetwork.rpcUrl],\r\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\r\n                      },\r\n                    ];\r\n                    console.log(\"data\", data);\r\n\r\n                    let switchTx;\r\n                    // https://docs.metamask.io/guide/rpc-api.html#other-rpc-methods\r\n                    try {\r\n                      switchTx = await ethereum.request({\r\n                        method: \"wallet_switchEthereumChain\",\r\n                        params: [{ chainId: data[0].chainId }],\r\n                      });\r\n                    } catch (switchError) {\r\n                      // not checking specific error code, because maybe we're not using MetaMask\r\n                      try {\r\n                        switchTx = await ethereum.request({\r\n                          method: \"wallet_addEthereumChain\",\r\n                          params: data,\r\n                        });\r\n                      } catch (addError) {\r\n                        // handle \"add\" error\r\n                      }\r\n                    }\r\n\r\n                    if (switchTx) {\r\n                      console.log(switchTx);\r\n                    }\r\n                  }}\r\n                >\r\n                  <b>{networkLocal && networkLocal.name}</b>\r\n                </Button>\r\n              </div>\r\n            }\r\n            type=\"error\"\r\n            closable={false}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  } else {\r\n    networkDisplay = (\r\n      <div style={{ zIndex: -1, position: \"absolute\", right: 154, top: 28, padding: 8, color: targetNetwork.color }}>\r\n        {targetNetwork.name}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const loadWeb3Modal = useCallback(async () => {\r\n    const provider = await web3Modal.connect();\r\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\r\n\r\n    provider.on(\"chainChanged\", chainId => {\r\n      console.log(`chain changed to ${chainId}! updating providers`);\r\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\r\n    });\r\n\r\n    provider.on(\"accountsChanged\", () => {\r\n      console.log(`account changed!`);\r\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\r\n    });\r\n\r\n    // Subscribe to session disconnection\r\n    provider.on(\"disconnect\", (code, reason) => {\r\n      console.log(code, reason);\r\n      logoutOfWeb3Modal();\r\n    });\r\n  }, [setInjectedProvider]);\r\n\r\n  useEffect(() => {\r\n    if (web3Modal.cachedProvider) {\r\n      loadWeb3Modal();\r\n    }\r\n  }, [loadWeb3Modal]);\r\n\r\n  const [route, setRoute] = useState();\r\n  useEffect(() => {\r\n    setRoute(window.location.pathname);\r\n  }, [setRoute]);\r\n\r\n  const getLoans= async ( ) => {\r\n    let str = \"\"\r\n    let balance2 = await readContracts.FloorLendingV2.getMappingLength(address, 1);\r\n    for (let i = 0; i < balance2; i++)\r\n     { let tokenURI = await readContracts.FloorLendingV2.getLoanID(address, 1, i );\r\n       let due = await readContracts.FloorLendingV2.getDueDate(tokenURI, 1);\r\n        str=str.concat('NFT id : ', tokenURI , ' Due :' ,getDate(due) )\r\n    }\r\n    setDisplayLoans(str)\r\n  };\r\n\r\n  const handleClick = async (event, message) => {\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    const signer = provider.getSigner();\r\n    const marketContract = new ethers.Contract(\"0x17f4BAa9D35Ee54fFbCb2608e20786473c7aa49f\", berryAbi, provider);\r\n    const marketWithSigner = marketContract.connect(signer); \r\n    try{  \r\n      await marketWithSigner.approve(lendAddy, message);\r\n    }catch(e) {alert (e); console.log(e);}\r\n  };\r\n\r\n  function getDate(dt) {\r\n    const milliseconds = dt * 1000 // 1575909015000\r\n    const dateObject = new Date(milliseconds)\r\n    let humanDateFormat = dateObject.toLocaleString() //2019-12-9 10:30:15\r\n    return humanDateFormat;\r\n  }\r\n\r\n  // const marketContractAddress = useContractReader(readContracts, \"Marketplace\", \"address\");\r\n  const balance = useContractReader(readContracts, \"Floor101\", \"balanceOf\", [address]);\r\n\r\n  const [yourCollectibles2, setYourCollectibles2] = useState(); // blueberry NFTs\r\n  const [collectionNumber, setCollectionNumber] = useState(0);  // indenitifies the NFT collection to be used\r\n  const [loanInfoString, setMaxLoanString] = useState(\"Maximum loan size for GMX Blueberries is .25 ETH\");\r\n  const [loanDays, setNFTDays] = useState(1);  // length of loan in days \r\n  const [loanAmount, setLoanAmount] = useState(.25);   \r\n  const [displayLoans, setDisplayLoans] = useState();  \r\n\r\nconst berryAbi = [\r\n  \"function approve( address to, uint256 tokenId)\", \r\n  \"function balanceOf(owner address) returns (uint256)\",         \r\n];\r\n\r\n\r\n// displays NFTs that are minted\r\nconst updateYourCollectibles2 = async () => {\r\n  //alert(address)\r\n  // const address1 = \"0xa435530d50d7D17Fd9fc6E1c897Dbf7C08E12d35\"; // Wallet address\r\n  let counter=0\r\n  const nfts = await alchemy.nft.getNftsForOwner(address);\r\n   if (nfts.totalCount == 0)\r\n    { alert(\"No NFTs for this wallet\"); return }\r\n  const nftList = nfts[\"ownedNfts\"]; \r\n  const collectibleUpdate = [];\r\n  for (let nft of nftList) {\r\n    if (nft.contract.address == \"0x17f4baa9d35ee54ffbcb2608e20786473c7aa49f\")\r\n     {console.log(` ${nft.tokenId} .${nft.rawMetadata.image}` );\r\n     let addr = \"https://ipfs.io/ipfs/QmSg4CMhmWdQ17i7pNbd8ENhW3B4Vb1kvMK3pgj7tryaNv/\" + nft.tokenId + \".jpg\";\r\n     collectibleUpdate.push({ id: nft.tokenId, image: addr, owner: address});\r\n     counter = counter + 1\r\n    }\r\n  } \r\n  if (counter ==0 )\r\n  { alert(\"No blueberries in this wallet\"); return }\r\n  setYourCollectibles2(collectibleUpdate);\r\n};\r\n\r\nlet a = 0;\r\n\r\nconst [show,setShow]=useState(true);\r\n\r\nconst [NFTid, setNFTid] = useState(\"0\");\r\n    // input number handler for NFT ID\r\n    const changeLoan = value => {\r\n      setLoanAmount(value);\r\n    };\r\n\r\n     // input number handler for NFT ID\r\n     const onChange2 = value => {\r\n      setNFTid(value);\r\n    };\r\n\r\n     // input number handler for NFT ID\r\n     const changeDuration = value => {\r\n       try{\r\n        setNFTDays(value);\r\n        a = (.26 -(value * .005)).toFixed(2)\r\n        console.log(\"a  = fixed 1 \" , a)       \r\n        setLoanAmount(a);\r\n       } catch (e) {console.log(e);} \r\n    };    \r\n    \r\n  const date = new Date();\r\n\r\n  const handleChange = (value) => {\r\n    setShow(!show)\r\n    setCollectionNumber(value)\r\n    console.log(\"-------------------------\", value)\r\n    if(value==0)\r\n     setMaxLoanString(\"Maximum loan size for GMX Blueberries is .25 ETH\")\r\n    else\r\n     setMaxLoanString(\"Maximum loan size for Floor 101 is .1 ETH\")    \r\n  };\r\n\r\n// approve Floor Lending Contract\r\nconst approveFloor = async () =>{\r\n  await tx( writeContracts.Floor101.approve(\"0x17f4BAa9D35Ee54fFbCb2608e20786473c7aa49f\", 7844));\r\n}\r\n   // lending button function\r\n\r\n   const lend = async () =>{ \r\n    console.log(\"loanAmount \", loanAmount, \" loanDays \", loanDays , \" collectionNumber \", collectionNumber)\r\n    await tx( writeContracts.FloorLendingV2.lend(NFTid, loanDays, collectionNumber,ethers.utils.parseEther(loanAmount + \"\")));\r\n   }\r\n\r\n\r\n   // lending button function\r\n   const Liquidate = async () =>{ \r\n    console.log(\"loanAmount \", loanAmount)\r\n    await tx( writeContracts.FloorLendingV2.lend(NFTid,loanDays, collectionNumber,loanAmount));\r\n   }\r\n\r\n  const repay = async () =>{ \r\n    const repayAmount = await readContracts.FloorLendingV2.calculateBorrowFee(NFTid,0); \r\n    await tx( writeContracts.FloorLendingV2.repayLoan(NFTid,0,{value: repayAmount}));\r\n  }\r\n\r\n  const repayFLOOR = async () =>{ \r\n    const repayAmount = await readContracts.FloorLendingV2.calculateBorrowFee(NFTid,1); \r\n    await tx( writeContracts.FloorLendingV2.repayLoan(NFTid,1,{value: repayAmount}));\r\n  }\r\n\r\n\r\n\r\n// approve Floor Lending Contract\r\nconst approveBlueberry= async () =>{\r\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n  const signer = provider.getSigner();\r\n  const marketContract = new ethers.Contract(\"0x17f4BAa9D35Ee54fFbCb2608e20786473c7aa49f\", berryAbi, provider);\r\n  const marketWithSigner = marketContract.connect(signer); \r\n  try{  \r\n    await marketWithSigner.approve(lendAddy, NFTid);\r\n  }catch(e) {alert (e); console.log(e);}\r\n}\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {/* ✏️ Edit the header and change the title to your project name */}\r\n      <Header />\r\n      {networkDisplay}\r\n      <BrowserRouter>\r\n        <Menu style={{ textAlign: \"center\" }} selectedKeys={[route]} mode=\"horizontal\">\r\n          <Menu.Item key=\"/\">\r\n            <Link\r\n              onClick={() => {\r\n                setRoute(\"/\");\r\n              }}\r\n              to=\"/\"\r\n            >\r\n           HOME\r\n            </Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"repay\">\r\n            <Link\r\n              onClick={() => {\r\n                setRoute(\"repay\");\r\n              }}\r\n              to=\"repay\"\r\n            >\r\n           REPAY\r\n            </Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"/about\">\r\n            <Link\r\n              onClick={() => {\r\n                setRoute(\"/about\");\r\n              }}\r\n              to=\"/about\"\r\n            > About\r\n            </Link>\r\n          </Menu.Item>                            \r\n\r\n        </Menu>\r\n\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n    <div id=\"centerWrapper\" style={{ padding: 16 }}>\r\n    <h2>FLOOR 101 - NFT LENDING</h2>\r\n    <Select defaultValue=\"GMX Blueberry Club\" style={{width: 200,}} onChange={handleChange}\r\n      options={[\r\n        {value: '0', label: 'GMX Blueberry Club',},\r\n      ]}\r\n    /> \r\n    <p>For more info about lending <a href=\"./about\">CLICK HERE</a></p>\r\n   Connected Wallet Address {address}<br />\r\n   <div>Available ETH in lending contract ETH {ethers.utils.formatEther(ethBalance)}</div>\r\n   {loanInfoString}\r\n\r\n <div >\r\n<Button type=\"primary\" shape=\"round\" onClick={() =>{updateYourCollectibles2()}}>Display Eligible Blueberries</Button>\r\n\r\n<List id=\"centerWrapper !important\" dataSource={yourCollectibles2} renderItem={item => {\r\n return (\r\n<List.Item>\r\n Item ID {item.id}<br />\r\n{<img src= {item.image} width={100} class=\"center\" />} \r\n<table padding = {25}>\r\n  <tr><td>Nft ID : </td><td><InputNumber min={1} max={10000} defaultValue={item.id} disabled = {true} onChange={setNFTid} style={{ width: 200 }} /></td></tr>\r\n<tr><td>Loan Duration : </td><td>\r\n <InputNumber min={1} max={28} placeholder={\"Loan Duration\"} defaultValue={1} onChange={changeDuration} style={{ width: 200 }} />\r\n </td></tr>\r\n <tr><td>Loan Amount : </td><td>\r\n <InputNumber min={.1} max={.25} step={0.01} value={loanAmount} onChange={changeLoan} style={{ width: 200 }} />\r\n </td></tr></table>\r\n <Button type=\"primary\" shape=\"round\" onClick={(event) => handleClick(event, item.id)} >Approve</Button>{\" \"}\r\n <Button type=\"primary\" shape=\"round\" onClick={lend}>LEND</Button><br />\r\n \r\n </List.Item>\r\n);}}/>\r\n\r\n   </div>\r\n </div>\r\n </Route>\r\n<Route exact path=\"/repay\">\r\n  <div style={{ width: 460, margin: \"auto\", backgroundColor: \"Off-White\", border:2}}>\r\n <h1>Repay Loan</h1>\r\n <Select defaultValue=\"GMX Blueberry Club\" style={{width: 200, marginBottom: 10 }} onChange={handleChange}\r\n      options={[\r\n        {value: '0', label: 'GMX Blueberry Club',},\r\n      ]}\r\n    /> <br />\r\n <Button type=\"primary\" shape=\"round\" onClick={() =>{getLoans()}} >Display Loans</Button>{' '}\r\n <h1>Your Loans</h1>\r\n {displayLoans}\r\n <p> Enter the number of your NFT and click Repay Loan to pay back your loan</p>\r\n\r\n <InputNumber min={1} max={101} placeholder={\"NFT ID\"} onChange={onChange2} style={{width: 200, marginBottom: 10 }} /><br />\r\n <Button type=\"primary\" shape=\"round\" onClick={() =>{repayFLOOR()}}>REPAY LOAN</Button>\r\n<br />\r\n<List dataSource={repayLoanEvent}   \r\n                renderItem={item => {\r\n                  return (\r\n <List.Item key={item[0] }>\r\n  <span style={{ fontSize: 16, marginRight: 8 }}><b>Loan for NFTID #{item.args[0].toNumber()} has been repaid</b></span>\r\n  <span style={{ fontSize: 16, marginRight: 8 }}>Repayment amount { ethers.utils.formatEther( item.args[2] ) } ETH</span><br />\r\n   Address {item.args[1]}  \r\n                    </List.Item>\r\n                  );\r\n                }}\r\n              />\r\n\r\n     </div>\r\n </Route>\r\n\r\n<Route exact path=\"/about\">\r\n <h1>About LENDING</h1>\r\n <p>The maximum size of loans reduces per length of loan<br />\r\n    Maximum length of loan is 28 days.<br />\r\n    Interest rate is 0.001% per day so <br />\r\n    a loan of 0.24 eth for 5 days would be charged interest of 0.0012eth (approx $1.90)<br />\r\n    If you take a loan out for 20 days but pay it back after 2 days, you only pay the 2 days interest.<br />\r\n    Can only be liquidated after the loan period expires.\r\n <br />\r\n <h1>About FLOOR 101</h1>\r\n <img src={top} width={100} /><br />\r\n Floor 101 was built by Jollibee contact on twitter at @pcashpeso<br />\r\n Please contact if you want to collaborate or add and NFT collection.\r\n </p>\r\n\r\n          </Route>        \r\n\r\n        </Switch>\r\n      </BrowserRouter>\r\n\r\n      <ThemeSwitch />\r\n\r\n      {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\r\n      <div style={{ position: \"fixed\", textAlign: \"right\", right: 0, top: 0, padding: 10 }}>\r\n        <Account\r\n          address={address}\r\n          localProvider={localProvider}\r\n          userSigner={userSigner}\r\n          mainnetProvider={mainnetProvider}\r\n          web3Modal={web3Modal}\r\n          loadWeb3Modal={loadWeb3Modal}\r\n          logoutOfWeb3Modal={logoutOfWeb3Modal}\r\n          blockExplorer={blockExplorer}\r\n        />\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nconst themes = {\r\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\r\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\r\n};\r\n\r\nconst prevTheme = window.localStorage.getItem(\"theme\");\r\n\r\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: subgraphUri,\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"light\"}>\r\n      <App subgraphUri={subgraphUri} />\r\n    </ThemeSwitcherProvider>\r\n  </ApolloProvider>,\r\n  document.getElementById(\"root\"),\r\n);\r\n","const ERC20ABI = [\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"name\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        name: \"_spender\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"approve\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"totalSupply\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        name: \"_from\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_to\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"transferFrom\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"decimals\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"uint8\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        name: \"_owner\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"balanceOf\",\r\n    outputs: [\r\n      {\r\n        name: \"balance\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"symbol\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        name: \"_to\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"transfer\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        name: \"_owner\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        name: \"_spender\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"allowance\",\r\n    outputs: [\r\n      {\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    payable: true,\r\n    stateMutability: \"payable\",\r\n    type: \"fallback\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: \"owner\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: \"spender\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: \"value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Approval\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: \"from\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: \"to\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: \"value\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Transfer\",\r\n    type: \"event\",\r\n  },\r\n];\r\nconst DAIABI = [\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"chainId_\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"constructor\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"src\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"guy\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Approval\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: true,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"bytes4\",\r\n        name: \"sig\",\r\n        type: \"bytes4\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"bytes32\",\r\n        name: \"arg1\",\r\n        type: \"bytes32\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"bytes32\",\r\n        name: \"arg2\",\r\n        type: \"bytes32\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: \"bytes\",\r\n        name: \"data\",\r\n        type: \"bytes\",\r\n      },\r\n    ],\r\n    name: \"LogNote\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"src\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: \"address\",\r\n        name: \"dst\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"Transfer\",\r\n    type: \"event\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"DOMAIN_SEPARATOR\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bytes32\",\r\n        name: \"\",\r\n        type: \"bytes32\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"PERMIT_TYPEHASH\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bytes32\",\r\n        name: \"\",\r\n        type: \"bytes32\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"allowance\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"approve\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bool\",\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"balanceOf\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"burn\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"decimals\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint8\",\r\n        name: \"\",\r\n        type: \"uint8\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"guy\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"deny\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"mint\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"src\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"address\",\r\n        name: \"dst\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"move\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"name\",\r\n    outputs: [\r\n      {\r\n        internalType: \"string\",\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"nonces\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"holder\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"address\",\r\n        name: \"spender\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"nonce\",\r\n        type: \"uint256\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"expiry\",\r\n        type: \"uint256\",\r\n      },\r\n      {\r\n        internalType: \"bool\",\r\n        name: \"allowed\",\r\n        type: \"bool\",\r\n      },\r\n      {\r\n        internalType: \"uint8\",\r\n        name: \"v\",\r\n        type: \"uint8\",\r\n      },\r\n      {\r\n        internalType: \"bytes32\",\r\n        name: \"r\",\r\n        type: \"bytes32\",\r\n      },\r\n      {\r\n        internalType: \"bytes32\",\r\n        name: \"s\",\r\n        type: \"bytes32\",\r\n      },\r\n    ],\r\n    name: \"permit\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"pull\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"usr\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"push\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"guy\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"rely\",\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"symbol\",\r\n    outputs: [\r\n      {\r\n        internalType: \"string\",\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"totalSupply\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"dst\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"transfer\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bool\",\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"src\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"address\",\r\n        name: \"dst\",\r\n        type: \"address\",\r\n      },\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"wad\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    name: \"transferFrom\",\r\n    outputs: [\r\n      {\r\n        internalType: \"bool\",\r\n        name: \"\",\r\n        type: \"bool\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"nonpayable\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: \"version\",\r\n    outputs: [\r\n      {\r\n        internalType: \"string\",\r\n        name: \"\",\r\n        type: \"string\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: \"address\",\r\n        name: \"\",\r\n        type: \"address\",\r\n      },\r\n    ],\r\n    name: \"wards\",\r\n    outputs: [\r\n      {\r\n        internalType: \"uint256\",\r\n        name: \"\",\r\n        type: \"uint256\",\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: \"view\",\r\n    type: \"function\",\r\n  },\r\n];\r\n\r\n// Mainnet DAI, Optimism and Arbitrium Rollup Contracts with local addresses\r\nmodule.exports = {\r\n  1: {\r\n    contracts: {\r\n      DAI: {\r\n        address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\r\n        abi: DAIABI,\r\n      },\r\n      UNI: {\r\n        address: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\r\n        abi: ERC20ABI,\r\n      },\r\n    },\r\n  },\r\n};\r\n"],"sourceRoot":""}